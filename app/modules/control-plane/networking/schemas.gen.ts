// This file is auto-generated by @hey-api/openapi-ts

export const com_datumapis_networking_v1alpha_DomainSchema = {
  description: 'Domain represents a domain name in the Datum system',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'DomainSpec defines the desired state of Domain',
      type: 'object',
      required: ['domainName'],
      properties: {
        domainName: {
          description: 'DomainName is the fully qualified domain name (FQDN) to be managed',
          type: 'string',
          maxLength: 253,
          minLength: 1,
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        },
      },
    },
    status: {
      description: 'DomainStatus defines the observed state of Domain',
      type: 'object',
      properties: {
        conditions: {
          type: 'array',
          items: {
            description:
              'Condition contains details for one aspect of the current state of this API Resource.',
            type: 'object',
            required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
            properties: {
              lastTransitionTime: {
                description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                type: 'string',
                format: 'date-time',
              },
              message: {
                description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                type: 'string',
                maxLength: 32768,
              },
              observedGeneration: {
                description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                type: 'integer',
                format: 'int64',
                minimum: 0,
              },
              reason: {
                description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                type: 'string',
                maxLength: 1024,
                minLength: 1,
                pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
              },
              status: {
                description: 'status of the condition, one of True, False, Unknown.',
                type: 'string',
                enum: ['True', 'False', 'Unknown'],
              },
              type: {
                description: 'type of condition in CamelCase or in foo.example.com/CamelCase.',
                type: 'string',
                maxLength: 316,
                pattern:
                  '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
              },
            },
          },
        },
        registrar: {
          description: 'DomainRegistrarStatus represents the registrar information for a domain',
          type: 'object',
          properties: {
            clientStatusCodes: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
            createdDate: {
              type: 'string',
            },
            dnssec: {
              description: 'DNSSECStatus represents the DNSSEC status of a domain',
              type: 'object',
              required: ['signed'],
              properties: {
                signed: {
                  type: 'boolean',
                },
              },
            },
            expirationDate: {
              type: 'string',
            },
            ianaID: {
              type: 'string',
            },
            ianaName: {
              type: 'string',
            },
            modifiedDate: {
              type: 'string',
            },
            nameservers: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
            serverStatusCodes: {
              type: 'array',
              items: {
                type: 'string',
              },
            },
          },
        },
        verification: {
          description: 'DomainVerificationStatus represents the verification status of a domain',
          type: 'object',
          properties: {
            requiredDNSRecords: {
              type: 'array',
              items: {
                description:
                  'DNSVerificationExpectedRecord represents a DNS record required for verification',
                type: 'object',
                required: ['content', 'name', 'type'],
                properties: {
                  content: {
                    type: 'string',
                  },
                  name: {
                    type: 'string',
                  },
                  type: {
                    type: 'string',
                  },
                },
              },
            },
          },
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'Domain',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_DomainListSchema = {
  description: 'DomainList is a list of Domain',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of domains. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/com.datumapis.networking.v1alpha.Domain',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'DomainList',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_HTTPProxySchema = {
  description: `An HTTPProxy builds on top of Gateway API resources to provide a more convenient
method to manage simple reverse proxy use cases.`,
  type: 'object',
  required: ['spec'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'Spec defines the desired state of an HTTPProxy.',
      type: 'object',
      required: ['rules'],
      properties: {
        rules: {
          description: 'Rules are a list of HTTP matchers, filters and actions.',
          type: 'array',
          maxItems: 16,
          minItems: 1,
          items: {
            description: `HTTPProxyRule defines semantics for matching an HTTP request based on
conditions (matches), processing it (filters), and forwarding the request to
backends.`,
            type: 'object',
            properties: {
              backends: {
                description: `Backends defines the backend(s) where matching requests should be
sent.

Note: While this field is a list, only a single element is permitted at
this time due to underlying Gateway limitations. Once addressed, MaxItems
will be increased to allow for multiple backends on any given route.`,
                type: 'array',
                maxItems: 1,
                minItems: 0,
                items: {
                  type: 'object',
                  required: ['endpoint'],
                  properties: {
                    endpoint: {
                      description: `Endpoint for the backend. Must be a valid URL.

Supports http and https protocols, IPs or DNS addresses in the host, custom
ports, and paths.`,
                      type: 'string',
                    },
                    filters: {
                      description: `Filters defined at this level should be executed if and only if the
request is being forwarded to the backend defined here.`,
                      type: 'array',
                      maxItems: 16,
                      items: {
                        description: `HTTPRouteFilter defines processing steps that must be completed during the
request or response lifecycle. HTTPRouteFilters are meant as an extension
point to express processing that may be done in Gateway implementations. Some
examples include request or response modification, implementing
authentication strategies, rate-limiting, and traffic shaping. API
guarantee/conformance is defined based on the type of the filter.`,
                        type: 'object',
                        required: ['type'],
                        properties: {
                          extensionRef: {
                            description: `ExtensionRef is an optional, implementation-specific extension to the
"filter" behavior.  For example, resource "myroutefilter" in group
"networking.example.net"). ExtensionRef MUST NOT be used for core and
extended filters.

This filter can be used multiple times within the same rule.

Support: Implementation-specific`,
                            type: 'object',
                            required: ['group', 'kind', 'name'],
                            properties: {
                              group: {
                                description: `Group is the group of the referent. For example, "gateway.networking.k8s.io".
When unspecified or empty string, core API group is inferred.`,
                                type: 'string',
                                maxLength: 253,
                                pattern:
                                  '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                              },
                              kind: {
                                description:
                                  'Kind is kind of the referent. For example "HTTPRoute" or "Service".',
                                type: 'string',
                                maxLength: 63,
                                minLength: 1,
                                pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                              },
                              name: {
                                description: 'Name is the name of the referent.',
                                type: 'string',
                                maxLength: 253,
                                minLength: 1,
                              },
                            },
                          },
                          requestHeaderModifier: {
                            description: `RequestHeaderModifier defines a schema for a filter that modifies request
headers.

Support: Core`,
                            type: 'object',
                            properties: {
                              add: {
                                description: `Add adds the given header(s) (name, value) to the request
before the action. It appends to any existing values associated
with the header name.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  add:
  - name: "my-header"
    value: "bar,baz"

Output:
  GET /foo HTTP/1.1
  my-header: foo,bar,baz`,
                                type: 'array',
                                maxItems: 16,
                                items: {
                                  description:
                                    'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                                  type: 'object',
                                  required: ['name', 'value'],
                                  properties: {
                                    name: {
                                      description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                      type: 'string',
                                      maxLength: 256,
                                      minLength: 1,
                                      pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                                    },
                                    value: {
                                      description:
                                        'Value is the value of HTTP Header to be matched.',
                                      type: 'string',
                                      maxLength: 4096,
                                      minLength: 1,
                                    },
                                  },
                                },
                                'x-kubernetes-list-map-keys': ['name'],
                                'x-kubernetes-list-type': 'map',
                              },
                              remove: {
                                description: `Remove the given header(s) from the HTTP request before the action. The
value of Remove is a list of HTTP header names. Note that the header
names are case-insensitive (see
https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).

Input:
  GET /foo HTTP/1.1
  my-header1: foo
  my-header2: bar
  my-header3: baz

Config:
  remove: ["my-header1", "my-header3"]

Output:
  GET /foo HTTP/1.1
  my-header2: bar`,
                                type: 'array',
                                maxItems: 16,
                                items: {
                                  type: 'string',
                                },
                                'x-kubernetes-list-type': 'set',
                              },
                              set: {
                                description: `Set overwrites the request with the given header (name, value)
before the action.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  set:
  - name: "my-header"
    value: "bar"

Output:
  GET /foo HTTP/1.1
  my-header: bar`,
                                type: 'array',
                                maxItems: 16,
                                items: {
                                  description:
                                    'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                                  type: 'object',
                                  required: ['name', 'value'],
                                  properties: {
                                    name: {
                                      description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                      type: 'string',
                                      maxLength: 256,
                                      minLength: 1,
                                      pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                                    },
                                    value: {
                                      description:
                                        'Value is the value of HTTP Header to be matched.',
                                      type: 'string',
                                      maxLength: 4096,
                                      minLength: 1,
                                    },
                                  },
                                },
                                'x-kubernetes-list-map-keys': ['name'],
                                'x-kubernetes-list-type': 'map',
                              },
                            },
                          },
                          requestMirror: {
                            description: `RequestMirror defines a schema for a filter that mirrors requests.
Requests are sent to the specified destination, but responses from
that destination are ignored.

This filter can be used multiple times within the same rule. Note that
not all implementations will be able to support mirroring to multiple
backends.

Support: Extended

<gateway:experimental:validation:XValidation:message="Only one of percent or fraction may be specified in HTTPRequestMirrorFilter",rule="!(has(self.percent) && has(self.fraction))">`,
                            type: 'object',
                            required: ['backendRef'],
                            properties: {
                              backendRef: {
                                description: `BackendRef references a resource where mirrored requests are sent.

Mirrored requests must be sent only to a single destination endpoint
within this BackendRef, irrespective of how many endpoints are present
within this BackendRef.

If the referent cannot be found, this BackendRef is invalid and must be
dropped from the Gateway. The controller must ensure the "ResolvedRefs"
condition on the Route status is set to \`status: False\` and not configure
this backend in the underlying implementation.

If there is a cross-namespace reference to an *existing* object
that is not allowed by a ReferenceGrant, the controller must ensure the
"ResolvedRefs"  condition on the Route is set to \`status: False\`,
with the "RefNotPermitted" reason and not configure this backend in the
underlying implementation.

In either error case, the Message of the \`ResolvedRefs\` Condition
should be used to provide more detail about the problem.

Support: Extended for Kubernetes Service

Support: Implementation-specific for any other resource`,
                                type: 'object',
                                required: ['name'],
                                properties: {
                                  group: {
                                    description: `Group is the group of the referent. For example, "gateway.networking.k8s.io".
When unspecified or empty string, core API group is inferred.`,
                                    type: 'string',
                                    default: '',
                                    maxLength: 253,
                                    pattern:
                                      '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                                  },
                                  kind: {
                                    description: `Kind is the Kubernetes resource kind of the referent. For example
"Service".

Defaults to "Service" when not specified.

ExternalName services can refer to CNAME DNS records that may live
outside of the cluster and as such are difficult to reason about in
terms of conformance. They also may not be safe to forward to (see
CVE-2021-25740 for more information). Implementations SHOULD NOT
support ExternalName Services.

Support: Core (Services with a type other than ExternalName)

Support: Implementation-specific (Services with type ExternalName)`,
                                    type: 'string',
                                    default: 'Service',
                                    maxLength: 63,
                                    minLength: 1,
                                    pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                                  },
                                  name: {
                                    description: 'Name is the name of the referent.',
                                    type: 'string',
                                    maxLength: 253,
                                    minLength: 1,
                                  },
                                  namespace: {
                                    description: `Namespace is the namespace of the backend. When unspecified, the local
namespace is inferred.

Note that when a namespace different than the local namespace is specified,
a ReferenceGrant object is required in the referent namespace to allow that
namespace's owner to accept the reference. See the ReferenceGrant
documentation for details.

Support: Core`,
                                    type: 'string',
                                    maxLength: 63,
                                    minLength: 1,
                                    pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$',
                                  },
                                  port: {
                                    description: `Port specifies the destination port number to use for this resource.
Port is required when the referent is a Kubernetes Service. In this
case, the port number is the service port number, not the target port.
For other resources, destination port might be derived from the referent
resource or this field.`,
                                    type: 'integer',
                                    format: 'int32',
                                    maximum: 65535,
                                    minimum: 1,
                                  },
                                },
                                'x-kubernetes-validations': [
                                  {
                                    rule: "(size(self.group) == 0 && self.kind == 'Service') ? has(self.port) : true",
                                    message: 'Must have port for Service reference',
                                  },
                                ],
                              },
                              fraction: {
                                description: `Fraction represents the fraction of requests that should be
mirrored to BackendRef.

Only one of Fraction or Percent may be specified. If neither field
is specified, 100% of requests will be mirrored.

<gateway:experimental>`,
                                type: 'object',
                                required: ['numerator'],
                                properties: {
                                  denominator: {
                                    type: 'integer',
                                    format: 'int32',
                                    default: 100,
                                    minimum: 1,
                                  },
                                  numerator: {
                                    type: 'integer',
                                    format: 'int32',
                                    minimum: 0,
                                  },
                                },
                                'x-kubernetes-validations': [
                                  {
                                    rule: 'self.numerator <= self.denominator',
                                    message: 'numerator must be less than or equal to denominator',
                                  },
                                ],
                              },
                              percent: {
                                description: `Percent represents the percentage of requests that should be
mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
requests) and its maximum value is 100 (indicating 100% of requests).

Only one of Fraction or Percent may be specified. If neither field
is specified, 100% of requests will be mirrored.

<gateway:experimental>`,
                                type: 'integer',
                                format: 'int32',
                                maximum: 100,
                                minimum: 0,
                              },
                            },
                          },
                          requestRedirect: {
                            description: `RequestRedirect defines a schema for a filter that responds to the
request with an HTTP redirection.

Support: Core`,
                            type: 'object',
                            properties: {
                              hostname: {
                                description: `Hostname is the hostname to be used in the value of the \`Location\`
header in the response.
When empty, the hostname in the \`Host\` header of the request is used.

Support: Core`,
                                type: 'string',
                                maxLength: 253,
                                minLength: 1,
                                pattern:
                                  '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                              },
                              path: {
                                description: `Path defines parameters used to modify the path of the incoming request.
The modified path is then used to construct the \`Location\` header. When
empty, the request path is used as-is.

Support: Extended`,
                                type: 'object',
                                required: ['type'],
                                properties: {
                                  replaceFullPath: {
                                    description: `ReplaceFullPath specifies the value with which to replace the full path
of a request during a rewrite or redirect.`,
                                    type: 'string',
                                    maxLength: 1024,
                                  },
                                  replacePrefixMatch: {
                                    description: `ReplacePrefixMatch specifies the value with which to replace the prefix
match of a request during a rewrite or redirect. For example, a request
to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
of "/xyz" would be modified to "/xyz/bar".

Note that this matches the behavior of the PathPrefix match type. This
matches full path elements. A path element refers to the list of labels
in the path split by the \`/\` separator. When specified, a trailing \`/\` is
ignored. For example, the paths \`/abc\`, \`/abc/\`, and \`/abc/def\` would all
match the prefix \`/abc\`, but the path \`/abcd\` would not.

ReplacePrefixMatch is only compatible with a \`PathPrefix\` HTTPRouteMatch.
Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
the implementation setting the Accepted Condition for the Route to \`status: False\`.

Request Path | Prefix Match | Replace Prefix | Modified Path`,
                                    type: 'string',
                                    maxLength: 1024,
                                  },
                                  type: {
                                    description: `Type defines the type of path modifier. Additional types may be
added in a future release of the API.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.`,
                                    type: 'string',
                                    enum: ['ReplaceFullPath', 'ReplacePrefixMatch'],
                                  },
                                },
                                'x-kubernetes-validations': [
                                  {
                                    rule: "self.type == 'ReplaceFullPath' ? has(self.replaceFullPath) : true",
                                    message:
                                      "replaceFullPath must be specified when type is set to 'ReplaceFullPath'",
                                  },
                                  {
                                    rule: "has(self.replaceFullPath) ? self.type == 'ReplaceFullPath' : true",
                                    message:
                                      "type must be 'ReplaceFullPath' when replaceFullPath is set",
                                  },
                                  {
                                    rule: "self.type == 'ReplacePrefixMatch' ? has(self.replacePrefixMatch) : true",
                                    message:
                                      "replacePrefixMatch must be specified when type is set to 'ReplacePrefixMatch'",
                                  },
                                  {
                                    rule: "has(self.replacePrefixMatch) ? self.type == 'ReplacePrefixMatch' : true",
                                    message:
                                      "type must be 'ReplacePrefixMatch' when replacePrefixMatch is set",
                                  },
                                ],
                              },
                              port: {
                                description: `Port is the port to be used in the value of the \`Location\`
header in the response.

If no port is specified, the redirect port MUST be derived using the
following rules:

* If redirect scheme is not-empty, the redirect port MUST be the well-known
  port associated with the redirect scheme. Specifically "http" to port 80
  and "https" to port 443. If the redirect scheme does not have a
  well-known port, the listener port of the Gateway SHOULD be used.
* If redirect scheme is empty, the redirect port MUST be the Gateway
  Listener port.

Implementations SHOULD NOT add the port number in the 'Location'
header in the following cases:

* A Location header that will use HTTP (whether that is determined via
  the Listener protocol or the Scheme field) _and_ use port 80.
* A Location header that will use HTTPS (whether that is determined via
  the Listener protocol or the Scheme field) _and_ use port 443.

Support: Extended`,
                                type: 'integer',
                                format: 'int32',
                                maximum: 65535,
                                minimum: 1,
                              },
                              scheme: {
                                description: `Scheme is the scheme to be used in the value of the \`Location\` header in
the response. When empty, the scheme of the request is used.

Scheme redirects can affect the port of the redirect, for more information,
refer to the documentation for the port field of this filter.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.

Support: Extended`,
                                type: 'string',
                                enum: ['http', 'https'],
                              },
                              statusCode: {
                                description: `StatusCode is the HTTP status code to be used in response.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.

Support: Core`,
                                type: 'integer',
                                default: 302,
                                enum: [301, 302],
                              },
                            },
                          },
                          responseHeaderModifier: {
                            description: `ResponseHeaderModifier defines a schema for a filter that modifies response
headers.

Support: Extended`,
                            type: 'object',
                            properties: {
                              add: {
                                description: `Add adds the given header(s) (name, value) to the request
before the action. It appends to any existing values associated
with the header name.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  add:
  - name: "my-header"
    value: "bar,baz"

Output:
  GET /foo HTTP/1.1
  my-header: foo,bar,baz`,
                                type: 'array',
                                maxItems: 16,
                                items: {
                                  description:
                                    'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                                  type: 'object',
                                  required: ['name', 'value'],
                                  properties: {
                                    name: {
                                      description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                      type: 'string',
                                      maxLength: 256,
                                      minLength: 1,
                                      pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                                    },
                                    value: {
                                      description:
                                        'Value is the value of HTTP Header to be matched.',
                                      type: 'string',
                                      maxLength: 4096,
                                      minLength: 1,
                                    },
                                  },
                                },
                                'x-kubernetes-list-map-keys': ['name'],
                                'x-kubernetes-list-type': 'map',
                              },
                              remove: {
                                description: `Remove the given header(s) from the HTTP request before the action. The
value of Remove is a list of HTTP header names. Note that the header
names are case-insensitive (see
https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).

Input:
  GET /foo HTTP/1.1
  my-header1: foo
  my-header2: bar
  my-header3: baz

Config:
  remove: ["my-header1", "my-header3"]

Output:
  GET /foo HTTP/1.1
  my-header2: bar`,
                                type: 'array',
                                maxItems: 16,
                                items: {
                                  type: 'string',
                                },
                                'x-kubernetes-list-type': 'set',
                              },
                              set: {
                                description: `Set overwrites the request with the given header (name, value)
before the action.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  set:
  - name: "my-header"
    value: "bar"

Output:
  GET /foo HTTP/1.1
  my-header: bar`,
                                type: 'array',
                                maxItems: 16,
                                items: {
                                  description:
                                    'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                                  type: 'object',
                                  required: ['name', 'value'],
                                  properties: {
                                    name: {
                                      description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                      type: 'string',
                                      maxLength: 256,
                                      minLength: 1,
                                      pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                                    },
                                    value: {
                                      description:
                                        'Value is the value of HTTP Header to be matched.',
                                      type: 'string',
                                      maxLength: 4096,
                                      minLength: 1,
                                    },
                                  },
                                },
                                'x-kubernetes-list-map-keys': ['name'],
                                'x-kubernetes-list-type': 'map',
                              },
                            },
                          },
                          type: {
                            description: `Type identifies the type of filter to apply. As with other API fields,
types are classified into three conformance levels:

- Core: Filter types and their corresponding configuration defined by
  "Support: Core" in this package, e.g. "RequestHeaderModifier". All
  implementations must support core filters.

- Extended: Filter types and their corresponding configuration defined by
  "Support: Extended" in this package, e.g. "RequestMirror". Implementers
  are encouraged to support extended filters.

- Implementation-specific: Filters that are defined and supported by
  specific vendors.
  In the future, filters showing convergence in behavior across multiple
  implementations will be considered for inclusion in extended or core
  conformance levels. Filter-specific configuration for such filters
  is specified using the ExtensionRef field. \`Type\` should be set to
  "ExtensionRef" for custom filters.

Implementers are encouraged to define custom implementation types to
extend the core API with implementation-specific behavior.

If a reference to a custom filter type cannot be resolved, the filter
MUST NOT be skipped. Instead, requests that would have been processed by
that filter MUST receive a HTTP error response.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.`,
                            type: 'string',
                            enum: [
                              'RequestHeaderModifier',
                              'ResponseHeaderModifier',
                              'RequestMirror',
                              'RequestRedirect',
                              'URLRewrite',
                              'ExtensionRef',
                            ],
                          },
                          urlRewrite: {
                            description: `URLRewrite defines a schema for a filter that modifies a request during forwarding.

Support: Extended`,
                            type: 'object',
                            properties: {
                              hostname: {
                                description: `Hostname is the value to be used to replace the Host header value during
forwarding.

Support: Extended`,
                                type: 'string',
                                maxLength: 253,
                                minLength: 1,
                                pattern:
                                  '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                              },
                              path: {
                                description: `Path defines a path rewrite.

Support: Extended`,
                                type: 'object',
                                required: ['type'],
                                properties: {
                                  replaceFullPath: {
                                    description: `ReplaceFullPath specifies the value with which to replace the full path
of a request during a rewrite or redirect.`,
                                    type: 'string',
                                    maxLength: 1024,
                                  },
                                  replacePrefixMatch: {
                                    description: `ReplacePrefixMatch specifies the value with which to replace the prefix
match of a request during a rewrite or redirect. For example, a request
to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
of "/xyz" would be modified to "/xyz/bar".

Note that this matches the behavior of the PathPrefix match type. This
matches full path elements. A path element refers to the list of labels
in the path split by the \`/\` separator. When specified, a trailing \`/\` is
ignored. For example, the paths \`/abc\`, \`/abc/\`, and \`/abc/def\` would all
match the prefix \`/abc\`, but the path \`/abcd\` would not.

ReplacePrefixMatch is only compatible with a \`PathPrefix\` HTTPRouteMatch.
Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
the implementation setting the Accepted Condition for the Route to \`status: False\`.

Request Path | Prefix Match | Replace Prefix | Modified Path`,
                                    type: 'string',
                                    maxLength: 1024,
                                  },
                                  type: {
                                    description: `Type defines the type of path modifier. Additional types may be
added in a future release of the API.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.`,
                                    type: 'string',
                                    enum: ['ReplaceFullPath', 'ReplacePrefixMatch'],
                                  },
                                },
                                'x-kubernetes-validations': [
                                  {
                                    rule: "self.type == 'ReplaceFullPath' ? has(self.replaceFullPath) : true",
                                    message:
                                      "replaceFullPath must be specified when type is set to 'ReplaceFullPath'",
                                  },
                                  {
                                    rule: "has(self.replaceFullPath) ? self.type == 'ReplaceFullPath' : true",
                                    message:
                                      "type must be 'ReplaceFullPath' when replaceFullPath is set",
                                  },
                                  {
                                    rule: "self.type == 'ReplacePrefixMatch' ? has(self.replacePrefixMatch) : true",
                                    message:
                                      "replacePrefixMatch must be specified when type is set to 'ReplacePrefixMatch'",
                                  },
                                  {
                                    rule: "has(self.replacePrefixMatch) ? self.type == 'ReplacePrefixMatch' : true",
                                    message:
                                      "type must be 'ReplacePrefixMatch' when replacePrefixMatch is set",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        'x-kubernetes-validations': [
                          {
                            rule: "!(has(self.requestHeaderModifier) && self.type != 'RequestHeaderModifier')",
                            message:
                              'filter.requestHeaderModifier must be nil if the filter.type is not RequestHeaderModifier',
                          },
                          {
                            rule: "!(!has(self.requestHeaderModifier) && self.type == 'RequestHeaderModifier')",
                            message:
                              'filter.requestHeaderModifier must be specified for RequestHeaderModifier filter.type',
                          },
                          {
                            rule: "!(has(self.responseHeaderModifier) && self.type != 'ResponseHeaderModifier')",
                            message:
                              'filter.responseHeaderModifier must be nil if the filter.type is not ResponseHeaderModifier',
                          },
                          {
                            rule: "!(!has(self.responseHeaderModifier) && self.type == 'ResponseHeaderModifier')",
                            message:
                              'filter.responseHeaderModifier must be specified for ResponseHeaderModifier filter.type',
                          },
                          {
                            rule: "!(has(self.requestMirror) && self.type != 'RequestMirror')",
                            message:
                              'filter.requestMirror must be nil if the filter.type is not RequestMirror',
                          },
                          {
                            rule: "!(!has(self.requestMirror) && self.type == 'RequestMirror')",
                            message:
                              'filter.requestMirror must be specified for RequestMirror filter.type',
                          },
                          {
                            rule: "!(has(self.requestRedirect) && self.type != 'RequestRedirect')",
                            message:
                              'filter.requestRedirect must be nil if the filter.type is not RequestRedirect',
                          },
                          {
                            rule: "!(!has(self.requestRedirect) && self.type == 'RequestRedirect')",
                            message:
                              'filter.requestRedirect must be specified for RequestRedirect filter.type',
                          },
                          {
                            rule: "!(has(self.urlRewrite) && self.type != 'URLRewrite')",
                            message:
                              'filter.urlRewrite must be nil if the filter.type is not URLRewrite',
                          },
                          {
                            rule: "!(!has(self.urlRewrite) && self.type == 'URLRewrite')",
                            message:
                              'filter.urlRewrite must be specified for URLRewrite filter.type',
                          },
                          {
                            rule: "!(has(self.extensionRef) && self.type != 'ExtensionRef')",
                            message:
                              'filter.extensionRef must be nil if the filter.type is not ExtensionRef',
                          },
                          {
                            rule: "!(!has(self.extensionRef) && self.type == 'ExtensionRef')",
                            message:
                              'filter.extensionRef must be specified for ExtensionRef filter.type',
                          },
                        ],
                      },
                      'x-kubernetes-validations': [
                        {
                          rule: "!(self.exists(f, f.type == 'RequestRedirect') && self.exists(f, f.type == 'URLRewrite'))",
                          message: 'May specify either requestRedirect or urlRewrite, but not both',
                        },
                        {
                          rule: "self.filter(f, f.type == 'RequestHeaderModifier').size() <= 1",
                          message: 'RequestHeaderModifier filter cannot be repeated',
                        },
                        {
                          rule: "self.filter(f, f.type == 'ResponseHeaderModifier').size() <= 1",
                          message: 'ResponseHeaderModifier filter cannot be repeated',
                        },
                        {
                          rule: "self.filter(f, f.type == 'RequestRedirect').size() <= 1",
                          message: 'RequestRedirect filter cannot be repeated',
                        },
                        {
                          rule: "self.filter(f, f.type == 'URLRewrite').size() <= 1",
                          message: 'URLRewrite filter cannot be repeated',
                        },
                      ],
                    },
                  },
                },
              },
              filters: {
                description: `Filters define the filters that are applied to requests that match
this rule.

See documentation for the \`filters\` field in the \`HTTPRouteRule\` type at
https://gateway-api.sigs.k8s.io/reference/spec/#httprouterule`,
                type: 'array',
                maxItems: 16,
                items: {
                  description: `HTTPRouteFilter defines processing steps that must be completed during the
request or response lifecycle. HTTPRouteFilters are meant as an extension
point to express processing that may be done in Gateway implementations. Some
examples include request or response modification, implementing
authentication strategies, rate-limiting, and traffic shaping. API
guarantee/conformance is defined based on the type of the filter.`,
                  type: 'object',
                  required: ['type'],
                  properties: {
                    extensionRef: {
                      description: `ExtensionRef is an optional, implementation-specific extension to the
"filter" behavior.  For example, resource "myroutefilter" in group
"networking.example.net"). ExtensionRef MUST NOT be used for core and
extended filters.

This filter can be used multiple times within the same rule.

Support: Implementation-specific`,
                      type: 'object',
                      required: ['group', 'kind', 'name'],
                      properties: {
                        group: {
                          description: `Group is the group of the referent. For example, "gateway.networking.k8s.io".
When unspecified or empty string, core API group is inferred.`,
                          type: 'string',
                          maxLength: 253,
                          pattern:
                            '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                        },
                        kind: {
                          description:
                            'Kind is kind of the referent. For example "HTTPRoute" or "Service".',
                          type: 'string',
                          maxLength: 63,
                          minLength: 1,
                          pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                        },
                        name: {
                          description: 'Name is the name of the referent.',
                          type: 'string',
                          maxLength: 253,
                          minLength: 1,
                        },
                      },
                    },
                    requestHeaderModifier: {
                      description: `RequestHeaderModifier defines a schema for a filter that modifies request
headers.

Support: Core`,
                      type: 'object',
                      properties: {
                        add: {
                          description: `Add adds the given header(s) (name, value) to the request
before the action. It appends to any existing values associated
with the header name.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  add:
  - name: "my-header"
    value: "bar,baz"

Output:
  GET /foo HTTP/1.1
  my-header: foo,bar,baz`,
                          type: 'array',
                          maxItems: 16,
                          items: {
                            description:
                              'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                            type: 'object',
                            required: ['name', 'value'],
                            properties: {
                              name: {
                                description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                type: 'string',
                                maxLength: 256,
                                minLength: 1,
                                pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                              },
                              value: {
                                description: 'Value is the value of HTTP Header to be matched.',
                                type: 'string',
                                maxLength: 4096,
                                minLength: 1,
                              },
                            },
                          },
                          'x-kubernetes-list-map-keys': ['name'],
                          'x-kubernetes-list-type': 'map',
                        },
                        remove: {
                          description: `Remove the given header(s) from the HTTP request before the action. The
value of Remove is a list of HTTP header names. Note that the header
names are case-insensitive (see
https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).

Input:
  GET /foo HTTP/1.1
  my-header1: foo
  my-header2: bar
  my-header3: baz

Config:
  remove: ["my-header1", "my-header3"]

Output:
  GET /foo HTTP/1.1
  my-header2: bar`,
                          type: 'array',
                          maxItems: 16,
                          items: {
                            type: 'string',
                          },
                          'x-kubernetes-list-type': 'set',
                        },
                        set: {
                          description: `Set overwrites the request with the given header (name, value)
before the action.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  set:
  - name: "my-header"
    value: "bar"

Output:
  GET /foo HTTP/1.1
  my-header: bar`,
                          type: 'array',
                          maxItems: 16,
                          items: {
                            description:
                              'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                            type: 'object',
                            required: ['name', 'value'],
                            properties: {
                              name: {
                                description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                type: 'string',
                                maxLength: 256,
                                minLength: 1,
                                pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                              },
                              value: {
                                description: 'Value is the value of HTTP Header to be matched.',
                                type: 'string',
                                maxLength: 4096,
                                minLength: 1,
                              },
                            },
                          },
                          'x-kubernetes-list-map-keys': ['name'],
                          'x-kubernetes-list-type': 'map',
                        },
                      },
                    },
                    requestMirror: {
                      description: `RequestMirror defines a schema for a filter that mirrors requests.
Requests are sent to the specified destination, but responses from
that destination are ignored.

This filter can be used multiple times within the same rule. Note that
not all implementations will be able to support mirroring to multiple
backends.

Support: Extended

<gateway:experimental:validation:XValidation:message="Only one of percent or fraction may be specified in HTTPRequestMirrorFilter",rule="!(has(self.percent) && has(self.fraction))">`,
                      type: 'object',
                      required: ['backendRef'],
                      properties: {
                        backendRef: {
                          description: `BackendRef references a resource where mirrored requests are sent.

Mirrored requests must be sent only to a single destination endpoint
within this BackendRef, irrespective of how many endpoints are present
within this BackendRef.

If the referent cannot be found, this BackendRef is invalid and must be
dropped from the Gateway. The controller must ensure the "ResolvedRefs"
condition on the Route status is set to \`status: False\` and not configure
this backend in the underlying implementation.

If there is a cross-namespace reference to an *existing* object
that is not allowed by a ReferenceGrant, the controller must ensure the
"ResolvedRefs"  condition on the Route is set to \`status: False\`,
with the "RefNotPermitted" reason and not configure this backend in the
underlying implementation.

In either error case, the Message of the \`ResolvedRefs\` Condition
should be used to provide more detail about the problem.

Support: Extended for Kubernetes Service

Support: Implementation-specific for any other resource`,
                          type: 'object',
                          required: ['name'],
                          properties: {
                            group: {
                              description: `Group is the group of the referent. For example, "gateway.networking.k8s.io".
When unspecified or empty string, core API group is inferred.`,
                              type: 'string',
                              default: '',
                              maxLength: 253,
                              pattern:
                                '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                            },
                            kind: {
                              description: `Kind is the Kubernetes resource kind of the referent. For example
"Service".

Defaults to "Service" when not specified.

ExternalName services can refer to CNAME DNS records that may live
outside of the cluster and as such are difficult to reason about in
terms of conformance. They also may not be safe to forward to (see
CVE-2021-25740 for more information). Implementations SHOULD NOT
support ExternalName Services.

Support: Core (Services with a type other than ExternalName)

Support: Implementation-specific (Services with type ExternalName)`,
                              type: 'string',
                              default: 'Service',
                              maxLength: 63,
                              minLength: 1,
                              pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                            },
                            name: {
                              description: 'Name is the name of the referent.',
                              type: 'string',
                              maxLength: 253,
                              minLength: 1,
                            },
                            namespace: {
                              description: `Namespace is the namespace of the backend. When unspecified, the local
namespace is inferred.

Note that when a namespace different than the local namespace is specified,
a ReferenceGrant object is required in the referent namespace to allow that
namespace's owner to accept the reference. See the ReferenceGrant
documentation for details.

Support: Core`,
                              type: 'string',
                              maxLength: 63,
                              minLength: 1,
                              pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$',
                            },
                            port: {
                              description: `Port specifies the destination port number to use for this resource.
Port is required when the referent is a Kubernetes Service. In this
case, the port number is the service port number, not the target port.
For other resources, destination port might be derived from the referent
resource or this field.`,
                              type: 'integer',
                              format: 'int32',
                              maximum: 65535,
                              minimum: 1,
                            },
                          },
                          'x-kubernetes-validations': [
                            {
                              rule: "(size(self.group) == 0 && self.kind == 'Service') ? has(self.port) : true",
                              message: 'Must have port for Service reference',
                            },
                          ],
                        },
                        fraction: {
                          description: `Fraction represents the fraction of requests that should be
mirrored to BackendRef.

Only one of Fraction or Percent may be specified. If neither field
is specified, 100% of requests will be mirrored.

<gateway:experimental>`,
                          type: 'object',
                          required: ['numerator'],
                          properties: {
                            denominator: {
                              type: 'integer',
                              format: 'int32',
                              default: 100,
                              minimum: 1,
                            },
                            numerator: {
                              type: 'integer',
                              format: 'int32',
                              minimum: 0,
                            },
                          },
                          'x-kubernetes-validations': [
                            {
                              rule: 'self.numerator <= self.denominator',
                              message: 'numerator must be less than or equal to denominator',
                            },
                          ],
                        },
                        percent: {
                          description: `Percent represents the percentage of requests that should be
mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
requests) and its maximum value is 100 (indicating 100% of requests).

Only one of Fraction or Percent may be specified. If neither field
is specified, 100% of requests will be mirrored.

<gateway:experimental>`,
                          type: 'integer',
                          format: 'int32',
                          maximum: 100,
                          minimum: 0,
                        },
                      },
                    },
                    requestRedirect: {
                      description: `RequestRedirect defines a schema for a filter that responds to the
request with an HTTP redirection.

Support: Core`,
                      type: 'object',
                      properties: {
                        hostname: {
                          description: `Hostname is the hostname to be used in the value of the \`Location\`
header in the response.
When empty, the hostname in the \`Host\` header of the request is used.

Support: Core`,
                          type: 'string',
                          maxLength: 253,
                          minLength: 1,
                          pattern:
                            '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                        },
                        path: {
                          description: `Path defines parameters used to modify the path of the incoming request.
The modified path is then used to construct the \`Location\` header. When
empty, the request path is used as-is.

Support: Extended`,
                          type: 'object',
                          required: ['type'],
                          properties: {
                            replaceFullPath: {
                              description: `ReplaceFullPath specifies the value with which to replace the full path
of a request during a rewrite or redirect.`,
                              type: 'string',
                              maxLength: 1024,
                            },
                            replacePrefixMatch: {
                              description: `ReplacePrefixMatch specifies the value with which to replace the prefix
match of a request during a rewrite or redirect. For example, a request
to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
of "/xyz" would be modified to "/xyz/bar".

Note that this matches the behavior of the PathPrefix match type. This
matches full path elements. A path element refers to the list of labels
in the path split by the \`/\` separator. When specified, a trailing \`/\` is
ignored. For example, the paths \`/abc\`, \`/abc/\`, and \`/abc/def\` would all
match the prefix \`/abc\`, but the path \`/abcd\` would not.

ReplacePrefixMatch is only compatible with a \`PathPrefix\` HTTPRouteMatch.
Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
the implementation setting the Accepted Condition for the Route to \`status: False\`.

Request Path | Prefix Match | Replace Prefix | Modified Path`,
                              type: 'string',
                              maxLength: 1024,
                            },
                            type: {
                              description: `Type defines the type of path modifier. Additional types may be
added in a future release of the API.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.`,
                              type: 'string',
                              enum: ['ReplaceFullPath', 'ReplacePrefixMatch'],
                            },
                          },
                          'x-kubernetes-validations': [
                            {
                              rule: "self.type == 'ReplaceFullPath' ? has(self.replaceFullPath) : true",
                              message:
                                "replaceFullPath must be specified when type is set to 'ReplaceFullPath'",
                            },
                            {
                              rule: "has(self.replaceFullPath) ? self.type == 'ReplaceFullPath' : true",
                              message: "type must be 'ReplaceFullPath' when replaceFullPath is set",
                            },
                            {
                              rule: "self.type == 'ReplacePrefixMatch' ? has(self.replacePrefixMatch) : true",
                              message:
                                "replacePrefixMatch must be specified when type is set to 'ReplacePrefixMatch'",
                            },
                            {
                              rule: "has(self.replacePrefixMatch) ? self.type == 'ReplacePrefixMatch' : true",
                              message:
                                "type must be 'ReplacePrefixMatch' when replacePrefixMatch is set",
                            },
                          ],
                        },
                        port: {
                          description: `Port is the port to be used in the value of the \`Location\`
header in the response.

If no port is specified, the redirect port MUST be derived using the
following rules:

* If redirect scheme is not-empty, the redirect port MUST be the well-known
  port associated with the redirect scheme. Specifically "http" to port 80
  and "https" to port 443. If the redirect scheme does not have a
  well-known port, the listener port of the Gateway SHOULD be used.
* If redirect scheme is empty, the redirect port MUST be the Gateway
  Listener port.

Implementations SHOULD NOT add the port number in the 'Location'
header in the following cases:

* A Location header that will use HTTP (whether that is determined via
  the Listener protocol or the Scheme field) _and_ use port 80.
* A Location header that will use HTTPS (whether that is determined via
  the Listener protocol or the Scheme field) _and_ use port 443.

Support: Extended`,
                          type: 'integer',
                          format: 'int32',
                          maximum: 65535,
                          minimum: 1,
                        },
                        scheme: {
                          description: `Scheme is the scheme to be used in the value of the \`Location\` header in
the response. When empty, the scheme of the request is used.

Scheme redirects can affect the port of the redirect, for more information,
refer to the documentation for the port field of this filter.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.

Support: Extended`,
                          type: 'string',
                          enum: ['http', 'https'],
                        },
                        statusCode: {
                          description: `StatusCode is the HTTP status code to be used in response.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.

Support: Core`,
                          type: 'integer',
                          default: 302,
                          enum: [301, 302],
                        },
                      },
                    },
                    responseHeaderModifier: {
                      description: `ResponseHeaderModifier defines a schema for a filter that modifies response
headers.

Support: Extended`,
                      type: 'object',
                      properties: {
                        add: {
                          description: `Add adds the given header(s) (name, value) to the request
before the action. It appends to any existing values associated
with the header name.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  add:
  - name: "my-header"
    value: "bar,baz"

Output:
  GET /foo HTTP/1.1
  my-header: foo,bar,baz`,
                          type: 'array',
                          maxItems: 16,
                          items: {
                            description:
                              'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                            type: 'object',
                            required: ['name', 'value'],
                            properties: {
                              name: {
                                description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                type: 'string',
                                maxLength: 256,
                                minLength: 1,
                                pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                              },
                              value: {
                                description: 'Value is the value of HTTP Header to be matched.',
                                type: 'string',
                                maxLength: 4096,
                                minLength: 1,
                              },
                            },
                          },
                          'x-kubernetes-list-map-keys': ['name'],
                          'x-kubernetes-list-type': 'map',
                        },
                        remove: {
                          description: `Remove the given header(s) from the HTTP request before the action. The
value of Remove is a list of HTTP header names. Note that the header
names are case-insensitive (see
https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).

Input:
  GET /foo HTTP/1.1
  my-header1: foo
  my-header2: bar
  my-header3: baz

Config:
  remove: ["my-header1", "my-header3"]

Output:
  GET /foo HTTP/1.1
  my-header2: bar`,
                          type: 'array',
                          maxItems: 16,
                          items: {
                            type: 'string',
                          },
                          'x-kubernetes-list-type': 'set',
                        },
                        set: {
                          description: `Set overwrites the request with the given header (name, value)
before the action.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  set:
  - name: "my-header"
    value: "bar"

Output:
  GET /foo HTTP/1.1
  my-header: bar`,
                          type: 'array',
                          maxItems: 16,
                          items: {
                            description:
                              'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                            type: 'object',
                            required: ['name', 'value'],
                            properties: {
                              name: {
                                description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                type: 'string',
                                maxLength: 256,
                                minLength: 1,
                                pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                              },
                              value: {
                                description: 'Value is the value of HTTP Header to be matched.',
                                type: 'string',
                                maxLength: 4096,
                                minLength: 1,
                              },
                            },
                          },
                          'x-kubernetes-list-map-keys': ['name'],
                          'x-kubernetes-list-type': 'map',
                        },
                      },
                    },
                    type: {
                      description: `Type identifies the type of filter to apply. As with other API fields,
types are classified into three conformance levels:

- Core: Filter types and their corresponding configuration defined by
  "Support: Core" in this package, e.g. "RequestHeaderModifier". All
  implementations must support core filters.

- Extended: Filter types and their corresponding configuration defined by
  "Support: Extended" in this package, e.g. "RequestMirror". Implementers
  are encouraged to support extended filters.

- Implementation-specific: Filters that are defined and supported by
  specific vendors.
  In the future, filters showing convergence in behavior across multiple
  implementations will be considered for inclusion in extended or core
  conformance levels. Filter-specific configuration for such filters
  is specified using the ExtensionRef field. \`Type\` should be set to
  "ExtensionRef" for custom filters.

Implementers are encouraged to define custom implementation types to
extend the core API with implementation-specific behavior.

If a reference to a custom filter type cannot be resolved, the filter
MUST NOT be skipped. Instead, requests that would have been processed by
that filter MUST receive a HTTP error response.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.`,
                      type: 'string',
                      enum: [
                        'RequestHeaderModifier',
                        'ResponseHeaderModifier',
                        'RequestMirror',
                        'RequestRedirect',
                        'URLRewrite',
                        'ExtensionRef',
                      ],
                    },
                    urlRewrite: {
                      description: `URLRewrite defines a schema for a filter that modifies a request during forwarding.

Support: Extended`,
                      type: 'object',
                      properties: {
                        hostname: {
                          description: `Hostname is the value to be used to replace the Host header value during
forwarding.

Support: Extended`,
                          type: 'string',
                          maxLength: 253,
                          minLength: 1,
                          pattern:
                            '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                        },
                        path: {
                          description: `Path defines a path rewrite.

Support: Extended`,
                          type: 'object',
                          required: ['type'],
                          properties: {
                            replaceFullPath: {
                              description: `ReplaceFullPath specifies the value with which to replace the full path
of a request during a rewrite or redirect.`,
                              type: 'string',
                              maxLength: 1024,
                            },
                            replacePrefixMatch: {
                              description: `ReplacePrefixMatch specifies the value with which to replace the prefix
match of a request during a rewrite or redirect. For example, a request
to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
of "/xyz" would be modified to "/xyz/bar".

Note that this matches the behavior of the PathPrefix match type. This
matches full path elements. A path element refers to the list of labels
in the path split by the \`/\` separator. When specified, a trailing \`/\` is
ignored. For example, the paths \`/abc\`, \`/abc/\`, and \`/abc/def\` would all
match the prefix \`/abc\`, but the path \`/abcd\` would not.

ReplacePrefixMatch is only compatible with a \`PathPrefix\` HTTPRouteMatch.
Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
the implementation setting the Accepted Condition for the Route to \`status: False\`.

Request Path | Prefix Match | Replace Prefix | Modified Path`,
                              type: 'string',
                              maxLength: 1024,
                            },
                            type: {
                              description: `Type defines the type of path modifier. Additional types may be
added in a future release of the API.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.`,
                              type: 'string',
                              enum: ['ReplaceFullPath', 'ReplacePrefixMatch'],
                            },
                          },
                          'x-kubernetes-validations': [
                            {
                              rule: "self.type == 'ReplaceFullPath' ? has(self.replaceFullPath) : true",
                              message:
                                "replaceFullPath must be specified when type is set to 'ReplaceFullPath'",
                            },
                            {
                              rule: "has(self.replaceFullPath) ? self.type == 'ReplaceFullPath' : true",
                              message: "type must be 'ReplaceFullPath' when replaceFullPath is set",
                            },
                            {
                              rule: "self.type == 'ReplacePrefixMatch' ? has(self.replacePrefixMatch) : true",
                              message:
                                "replacePrefixMatch must be specified when type is set to 'ReplacePrefixMatch'",
                            },
                            {
                              rule: "has(self.replacePrefixMatch) ? self.type == 'ReplacePrefixMatch' : true",
                              message:
                                "type must be 'ReplacePrefixMatch' when replacePrefixMatch is set",
                            },
                          ],
                        },
                      },
                    },
                  },
                  'x-kubernetes-validations': [
                    {
                      rule: "!(has(self.requestHeaderModifier) && self.type != 'RequestHeaderModifier')",
                      message:
                        'filter.requestHeaderModifier must be nil if the filter.type is not RequestHeaderModifier',
                    },
                    {
                      rule: "!(!has(self.requestHeaderModifier) && self.type == 'RequestHeaderModifier')",
                      message:
                        'filter.requestHeaderModifier must be specified for RequestHeaderModifier filter.type',
                    },
                    {
                      rule: "!(has(self.responseHeaderModifier) && self.type != 'ResponseHeaderModifier')",
                      message:
                        'filter.responseHeaderModifier must be nil if the filter.type is not ResponseHeaderModifier',
                    },
                    {
                      rule: "!(!has(self.responseHeaderModifier) && self.type == 'ResponseHeaderModifier')",
                      message:
                        'filter.responseHeaderModifier must be specified for ResponseHeaderModifier filter.type',
                    },
                    {
                      rule: "!(has(self.requestMirror) && self.type != 'RequestMirror')",
                      message:
                        'filter.requestMirror must be nil if the filter.type is not RequestMirror',
                    },
                    {
                      rule: "!(!has(self.requestMirror) && self.type == 'RequestMirror')",
                      message:
                        'filter.requestMirror must be specified for RequestMirror filter.type',
                    },
                    {
                      rule: "!(has(self.requestRedirect) && self.type != 'RequestRedirect')",
                      message:
                        'filter.requestRedirect must be nil if the filter.type is not RequestRedirect',
                    },
                    {
                      rule: "!(!has(self.requestRedirect) && self.type == 'RequestRedirect')",
                      message:
                        'filter.requestRedirect must be specified for RequestRedirect filter.type',
                    },
                    {
                      rule: "!(has(self.urlRewrite) && self.type != 'URLRewrite')",
                      message: 'filter.urlRewrite must be nil if the filter.type is not URLRewrite',
                    },
                    {
                      rule: "!(!has(self.urlRewrite) && self.type == 'URLRewrite')",
                      message: 'filter.urlRewrite must be specified for URLRewrite filter.type',
                    },
                    {
                      rule: "!(has(self.extensionRef) && self.type != 'ExtensionRef')",
                      message:
                        'filter.extensionRef must be nil if the filter.type is not ExtensionRef',
                    },
                    {
                      rule: "!(!has(self.extensionRef) && self.type == 'ExtensionRef')",
                      message: 'filter.extensionRef must be specified for ExtensionRef filter.type',
                    },
                  ],
                },
                'x-kubernetes-validations': [
                  {
                    rule: "!(self.exists(f, f.type == 'RequestRedirect') && self.exists(f, f.type == 'URLRewrite'))",
                    message: 'May specify either requestRedirect or urlRewrite, but not both',
                  },
                  {
                    rule: "self.filter(f, f.type == 'RequestHeaderModifier').size() <= 1",
                    message: 'RequestHeaderModifier filter cannot be repeated',
                  },
                  {
                    rule: "self.filter(f, f.type == 'ResponseHeaderModifier').size() <= 1",
                    message: 'ResponseHeaderModifier filter cannot be repeated',
                  },
                  {
                    rule: "self.filter(f, f.type == 'RequestRedirect').size() <= 1",
                    message: 'RequestRedirect filter cannot be repeated',
                  },
                  {
                    rule: "self.filter(f, f.type == 'URLRewrite').size() <= 1",
                    message: 'URLRewrite filter cannot be repeated',
                  },
                ],
              },
              matches: {
                description: `Matches define conditions used for matching the rule against incoming
HTTP requests. Each match is independent, i.e. this rule will be matched
if **any** one of the matches is satisfied.

See documentation for the \`matches\` field in the \`HTTPRouteRule\` type at
https://gateway-api.sigs.k8s.io/reference/spec/#httprouterule`,
                type: 'array',
                default: [
                  {
                    path: {
                      type: 'PathPrefix',
                      value: '/',
                    },
                  },
                ],
                maxItems: 64,
                minItems: 1,
                items: {
                  description: `HTTPRouteMatch defines the predicate used to match requests to a given
action. Multiple match types are ANDed together, i.e. the match will
evaluate to true only if all conditions are satisfied.

For example, the match below will match a HTTP request only if its path
starts with \`/foo\` AND it contains the \`version: v1\` header:

\`\`\`
match:

	path:
	  value: "/foo"
	headers:
	- name: "version"
	  value "v1"

\`\`\``,
                  type: 'object',
                  properties: {
                    headers: {
                      description: `Headers specifies HTTP request header matchers. Multiple match values are
ANDed together, meaning, a request must match all the specified headers
to select the route.`,
                      type: 'array',
                      maxItems: 16,
                      items: {
                        description: `HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request
headers.`,
                        type: 'object',
                        required: ['name', 'value'],
                        properties: {
                          name: {
                            description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, only the first
entry with an equivalent name MUST be considered for a match. Subsequent
entries with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.

When a header is repeated in an HTTP request, it is
implementation-specific behavior as to how this is represented.
Generally, proxies should follow the guidance from the RFC:
https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
processing a repeated header, with special handling for "Set-Cookie".`,
                            type: 'string',
                            maxLength: 256,
                            minLength: 1,
                            pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                          },
                          type: {
                            description: `Type specifies how to match against the value of the header.

Support: Core (Exact)

Support: Implementation-specific (RegularExpression)

Since RegularExpression HeaderMatchType has implementation-specific
conformance, implementations can support POSIX, PCRE or any other dialects
of regular expressions. Please read the implementation's documentation to
determine the supported dialect.`,
                            type: 'string',
                            default: 'Exact',
                            enum: ['Exact', 'RegularExpression'],
                          },
                          value: {
                            description: 'Value is the value of HTTP Header to be matched.',
                            type: 'string',
                            maxLength: 4096,
                            minLength: 1,
                          },
                        },
                      },
                      'x-kubernetes-list-map-keys': ['name'],
                      'x-kubernetes-list-type': 'map',
                    },
                    method: {
                      description: `Method specifies HTTP method matcher.
When specified, this route will be matched only if the request has the
specified method.

Support: Extended`,
                      type: 'string',
                      enum: [
                        'GET',
                        'HEAD',
                        'POST',
                        'PUT',
                        'DELETE',
                        'CONNECT',
                        'OPTIONS',
                        'TRACE',
                        'PATCH',
                      ],
                    },
                    path: {
                      description: `Path specifies a HTTP request path matcher. If this field is not
specified, a default prefix match on the "/" path is provided.`,
                      type: 'object',
                      default: {
                        type: 'PathPrefix',
                        value: '/',
                      },
                      properties: {
                        type: {
                          description: `Type specifies how to match against the path Value.

Support: Core (Exact, PathPrefix)

Support: Implementation-specific (RegularExpression)`,
                          type: 'string',
                          default: 'PathPrefix',
                          enum: ['Exact', 'PathPrefix', 'RegularExpression'],
                        },
                        value: {
                          description: 'Value of the HTTP path to match against.',
                          type: 'string',
                          default: '/',
                          maxLength: 1024,
                        },
                      },
                      'x-kubernetes-validations': [
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? self.value.startsWith('/') : true",
                          message:
                            "value must be an absolute path and start with '/' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('//') : true",
                          message: "must not contain '//' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('/./') : true",
                          message:
                            "must not contain '/./' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('/../') : true",
                          message:
                            "must not contain '/../' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('%2f') : true",
                          message:
                            "must not contain '%2f' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('%2F') : true",
                          message:
                            "must not contain '%2F' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('#') : true",
                          message: "must not contain '#' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.endsWith('/..') : true",
                          message:
                            "must not end with '/..' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.endsWith('/.') : true",
                          message:
                            "must not end with '/.' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "self.type in ['Exact','PathPrefix'] || self.type == 'RegularExpression'",
                          message:
                            "type must be one of ['Exact', 'PathPrefix', 'RegularExpression']",
                        },
                        {
                          rule: `(self.type in ['Exact','PathPrefix']) ? self.value.matches(r"""^(?:[-A-Za-z0-9/._~!$&'()*+,;=:@]|[%][0-9a-fA-F]{2})+$""") : true`,
                          message:
                            "must only contain valid characters (matching ^(?:[-A-Za-z0-9/._~!$&'()*+,;=:@]|[%][0-9a-fA-F]{2})+$) for types ['Exact', 'PathPrefix']",
                        },
                      ],
                    },
                    queryParams: {
                      description: `QueryParams specifies HTTP query parameter matchers. Multiple match
values are ANDed together, meaning, a request must match all the
specified query parameters to select the route.

Support: Extended`,
                      type: 'array',
                      maxItems: 16,
                      items: {
                        description: `HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP
query parameters.`,
                        type: 'object',
                        required: ['name', 'value'],
                        properties: {
                          name: {
                            description: `Name is the name of the HTTP query param to be matched. This must be an
exact string match. (See
https://tools.ietf.org/html/rfc7230#section-2.7.3).

If multiple entries specify equivalent query param names, only the first
entry with an equivalent name MUST be considered for a match. Subsequent
entries with an equivalent query param name MUST be ignored.

If a query param is repeated in an HTTP request, the behavior is
purposely left undefined, since different data planes have different
capabilities. However, it is *recommended* that implementations should
match against the first value of the param if the data plane supports it,
as this behavior is expected in other load balancing contexts outside of
the Gateway API.

Users SHOULD NOT route traffic based on repeated query params to guard
themselves against potential differences in the implementations.`,
                            type: 'string',
                            maxLength: 256,
                            minLength: 1,
                            pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                          },
                          type: {
                            description: `Type specifies how to match against the value of the query parameter.

Support: Extended (Exact)

Support: Implementation-specific (RegularExpression)

Since RegularExpression QueryParamMatchType has Implementation-specific
conformance, implementations can support POSIX, PCRE or any other
dialects of regular expressions. Please read the implementation's
documentation to determine the supported dialect.`,
                            type: 'string',
                            default: 'Exact',
                            enum: ['Exact', 'RegularExpression'],
                          },
                          value: {
                            description: 'Value is the value of HTTP query param to be matched.',
                            type: 'string',
                            maxLength: 1024,
                            minLength: 1,
                          },
                        },
                      },
                      'x-kubernetes-list-map-keys': ['name'],
                      'x-kubernetes-list-type': 'map',
                    },
                  },
                },
              },
              name: {
                description: `Name is the name of the route rule. This name MUST be unique within a Route
if it is set.`,
                type: 'string',
                maxLength: 253,
                minLength: 1,
                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
              },
            },
            'x-kubernetes-validations': [
              {
                rule: '(has(self.backends) && size(self.backends) > 0) ? (!has(self.filters) || self.filters.all(f, !has(f.requestRedirect))): true',
                message: 'RequestRedirect filter must not be used together with backends',
              },
              {
                rule: "(has(self.filters) && self.filters.exists_one(f, has(f.requestRedirect) && has(f.requestRedirect.path) && f.requestRedirect.path.type == 'ReplacePrefixMatch' && has(f.requestRedirect.path.replacePrefixMatch))) ? ((size(self.matches) != 1 || !has(self.matches[0].path) || self.matches[0].path.type != 'PathPrefix') ? false : true) : true",
                message:
                  'When using RequestRedirect filter with path.replacePrefixMatch, exactly one PathPrefix match must be specified',
              },
              {
                rule: "(has(self.filters) && self.filters.exists_one(f, has(f.urlRewrite) && has(f.urlRewrite.path) && f.urlRewrite.path.type == 'ReplacePrefixMatch' && has(f.urlRewrite.path.replacePrefixMatch))) ? ((size(self.matches) != 1 || !has(self.matches[0].path) || self.matches[0].path.type != 'PathPrefix') ? false : true) : true",
                message:
                  'When using URLRewrite filter with path.replacePrefixMatch, exactly one PathPrefix match must be specified',
              },
              {
                rule: "(has(self.backends) && self.backends.exists_one(b, (has(b.filters) && b.filters.exists_one(f, has(f.requestRedirect) && has(f.requestRedirect.path) && f.requestRedirect.path.type == 'ReplacePrefixMatch' && has(f.requestRedirect.path.replacePrefixMatch))) )) ? ((size(self.matches) != 1 || !has(self.matches[0].path) || self.matches[0].path.type != 'PathPrefix') ? false : true) : true",
                message:
                  'Within backends, when using RequestRedirect filter with path.replacePrefixMatch, exactly one PathPrefix match must be specified',
              },
              {
                rule: "(has(self.backends) && self.backends.exists_one(b, (has(b.filters) && b.filters.exists_one(f, has(f.urlRewrite) && has(f.urlRewrite.path) && f.urlRewrite.path.type == 'ReplacePrefixMatch' && has(f.urlRewrite.path.replacePrefixMatch))) )) ? ((size(self.matches) != 1 || !has(self.matches[0].path) || self.matches[0].path.type != 'PathPrefix') ? false : true) : true",
                message:
                  'Within backends, When using URLRewrite filter with path.replacePrefixMatch, exactly one PathPrefix match must be specified',
              },
            ],
          },
          'x-kubernetes-validations': [
            {
              rule: 'self.all(l1, !has(l1.name) || self.exists_one(l2, has(l2.name) && l1.name == l2.name))',
              message: 'Rule name must be unique within the route',
            },
            {
              rule: '(self.size() > 0 ? self[0].matches.size() : 0) + (self.size() > 1 ? self[1].matches.size() : 0) + (self.size() > 2 ? self[2].matches.size() : 0) + (self.size() > 3 ? self[3].matches.size() : 0) + (self.size() > 4 ? self[4].matches.size() : 0) + (self.size() > 5 ? self[5].matches.size() : 0) + (self.size() > 6 ? self[6].matches.size() : 0) + (self.size() > 7 ? self[7].matches.size() : 0) + (self.size() > 8 ? self[8].matches.size() : 0) + (self.size() > 9 ? self[9].matches.size() : 0) + (self.size() > 10 ? self[10].matches.size() : 0) + (self.size() > 11 ? self[11].matches.size() : 0) + (self.size() > 12 ? self[12].matches.size() : 0) + (self.size() > 13 ? self[13].matches.size() : 0) + (self.size() > 14 ? self[14].matches.size() : 0) + (self.size() > 15 ? self[15].matches.size() : 0) <= 128',
              message:
                'While 16 rules and 64 matches per rule are allowed, the total number of matches across all rules in a route must be less than 128',
            },
          ],
        },
      },
    },
    status: {
      description: 'Status defines the current state of an HTTPProxy.',
      type: 'object',
      default: {
        conditions: [
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Accepted',
          },
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Programmed',
          },
        ],
      },
      properties: {
        addresses: {
          description: `Addresses lists the network addresses that have been bound to the
HTTPProxy.

This field will not contain custom hostnames defined in the HTTPProxy. See
the \`hostnames\` field`,
          type: 'array',
          maxItems: 16,
          items: {
            description:
              'GatewayStatusAddress describes a network address that is bound to a Gateway.',
            type: 'object',
            required: ['value'],
            properties: {
              type: {
                description: 'Type of the address.',
                type: 'string',
                default: 'IPAddress',
                maxLength: 253,
                minLength: 1,
                pattern:
                  "^Hostname|IPAddress|NamedAddress|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/[A-Za-z0-9\\/\\-._~%!$&'()*+,;=:]+$",
              },
              value: {
                description: `Value of the address. The validity of the values will depend
on the type and support by the controller.

Examples: \`1.2.3.4\`, \`128::1\`, \`my-ip-address\`.`,
                type: 'string',
                maxLength: 253,
                minLength: 1,
              },
            },
            'x-kubernetes-validations': [
              {
                rule: `self.type == 'Hostname' ? self.value.matches(r"""^(\*\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"""): true`,
                message:
                  'Hostname value must only contain valid characters (matching ^(\\*\\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$)',
              },
            ],
          },
        },
        conditions: {
          description: 'Conditions describe the current conditions of the HTTPProxy.',
          type: 'array',
          items: {
            description:
              'Condition contains details for one aspect of the current state of this API Resource.',
            type: 'object',
            required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
            properties: {
              lastTransitionTime: {
                description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                type: 'string',
                format: 'date-time',
              },
              message: {
                description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                type: 'string',
                maxLength: 32768,
              },
              observedGeneration: {
                description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                type: 'integer',
                format: 'int64',
                minimum: 0,
              },
              reason: {
                description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                type: 'string',
                maxLength: 1024,
                minLength: 1,
                pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
              },
              status: {
                description: 'status of the condition, one of True, False, Unknown.',
                type: 'string',
                enum: ['True', 'False', 'Unknown'],
              },
              type: {
                description: 'type of condition in CamelCase or in foo.example.com/CamelCase.',
                type: 'string',
                maxLength: 316,
                pattern:
                  '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
              },
            },
          },
          'x-kubernetes-list-map-keys': ['type'],
          'x-kubernetes-list-type': 'map',
        },
        hostnames: {
          description: `Hostnames lists the hostnames that have been bound to the HTTPProxy.

If this list does not match that defined in the HTTPProxy, see the
\`Programmed\` condition message for details.`,
          type: 'array',
          items: {
            description: `Hostname is the fully qualified domain name of a network host. This matches
the RFC 1123 definition of a hostname with 2 notable exceptions:

 1. IPs are not allowed.
 2. A hostname may be prefixed with a wildcard label (\`*.\`). The wildcard
    label must appear by itself as the first label.

Hostname can be "precise" which is a domain name without the terminating
dot of a network host (e.g. "foo.example.com") or "wildcard", which is a
domain name prefixed with a single wildcard label (e.g. \`*.example.com\`).

Note that as per RFC1035 and RFC1123, a *label* must consist of lower case
alphanumeric characters or '-', and must start and end with an alphanumeric
character. No other punctuation is allowed.`,
            type: 'string',
            maxLength: 253,
            minLength: 1,
            pattern: '^(\\*\\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
          },
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'HTTPProxy',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_HTTPProxyListSchema = {
  description: 'HTTPProxyList is a list of HTTPProxy',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of httpproxies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/com.datumapis.networking.v1alpha.HTTPProxy',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'HTTPProxyList',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_LocationSchema = {
  description: 'Location is the Schema for the locations API.',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'LocationSpec defines the desired state of Location.',
      type: 'object',
      required: ['locationClassName', 'provider', 'topology'],
      properties: {
        locationClassName: {
          description: `The location class that indicates control plane behavior of entities
associated with the location.

Valid values are:
	- datum-managed
	- self-managed`,
          type: 'string',
        },
        provider: {
          description: 'The location provider',
          type: 'object',
          properties: {
            gcp: {
              type: 'object',
              required: ['projectId', 'region', 'zone'],
              properties: {
                projectId: {
                  description: `The GCP project servicing the location

For locations with the class of \`datum-managed\`, a service account will be
required for each unique GCP project ID across all locations registered in a
namespace.`,
                  type: 'string',
                },
                region: {
                  description: 'The GCP region servicing the location',
                  type: 'string',
                },
                zone: {
                  description: 'The GCP zone servicing the location',
                  type: 'string',
                },
              },
            },
          },
        },
        topology: {
          description: `The topology of the location

This may contain arbitrary topology keys. Some keys may be well known, such
as:
	- topology.datum.net/city-code`,
          type: 'object',
          additionalProperties: {
            type: 'string',
          },
        },
      },
    },
    status: {
      description: 'LocationStatus defines the observed state of Location.',
      type: 'object',
      properties: {
        conditions: {
          description: "Represents the observations of a location's current state.",
          type: 'array',
          items: {
            description:
              'Condition contains details for one aspect of the current state of this API Resource.',
            type: 'object',
            required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
            properties: {
              lastTransitionTime: {
                description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                type: 'string',
                format: 'date-time',
              },
              message: {
                description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                type: 'string',
                maxLength: 32768,
              },
              observedGeneration: {
                description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                type: 'integer',
                format: 'int64',
                minimum: 0,
              },
              reason: {
                description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                type: 'string',
                maxLength: 1024,
                minLength: 1,
                pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
              },
              status: {
                description: 'status of the condition, one of True, False, Unknown.',
                type: 'string',
                enum: ['True', 'False', 'Unknown'],
              },
              type: {
                description: 'type of condition in CamelCase or in foo.example.com/CamelCase.',
                type: 'string',
                maxLength: 316,
                pattern:
                  '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
              },
            },
          },
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'Location',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_LocationListSchema = {
  description: 'LocationList is a list of Location',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of locations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/com.datumapis.networking.v1alpha.Location',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'LocationList',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_NetworkSchema = {
  description: 'Network is the Schema for the networks API',
  type: 'object',
  required: ['spec'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'NetworkSpec defines the desired state of a Network',
      type: 'object',
      required: ['ipam'],
      properties: {
        ipFamilies: {
          description: 'IP Families to permit on a network. Defaults to IPv4.',
          type: 'array',
          default: ['IPv4'],
          items: {
            type: 'string',
            enum: ['IPv4', 'IPv6'],
          },
        },
        ipam: {
          description: 'IPAM settings for the network.',
          type: 'object',
          required: ['mode'],
          properties: {
            ipv4Range: {
              description: 'IPv4 range to use in auto mode networks. Defaults to 10.128.0.0/9.',
              type: 'string',
            },
            ipv6Range: {
              description:
                'IPv6 range to use in auto mode networks. Defaults to a /48 allocated from `fd20::/20`.',
              type: 'string',
            },
            mode: {
              description: 'IPAM mode',
              type: 'string',
              enum: ['Auto', 'Policy'],
            },
          },
        },
        mtu: {
          description: 'Network MTU. May be between 1300 and 8856.',
          type: 'integer',
          format: 'int32',
          default: 1460,
          maximum: 8856,
          minimum: 1300,
        },
      },
    },
    status: {
      description: 'NetworkStatus defines the observed state of Network',
      type: 'object',
      properties: {
        conditions: {
          description: "Represents the observations of a network's current state.",
          type: 'array',
          items: {
            description:
              'Condition contains details for one aspect of the current state of this API Resource.',
            type: 'object',
            required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
            properties: {
              lastTransitionTime: {
                description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                type: 'string',
                format: 'date-time',
              },
              message: {
                description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                type: 'string',
                maxLength: 32768,
              },
              observedGeneration: {
                description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                type: 'integer',
                format: 'int64',
                minimum: 0,
              },
              reason: {
                description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                type: 'string',
                maxLength: 1024,
                minLength: 1,
                pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
              },
              status: {
                description: 'status of the condition, one of True, False, Unknown.',
                type: 'string',
                enum: ['True', 'False', 'Unknown'],
              },
              type: {
                description: 'type of condition in CamelCase or in foo.example.com/CamelCase.',
                type: 'string',
                maxLength: 316,
                pattern:
                  '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
              },
            },
          },
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'Network',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_NetworkBindingSchema = {
  description: 'NetworkBinding is the Schema for the networkbindings API',
  type: 'object',
  required: ['spec'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'NetworkBindingSpec defines the desired state of NetworkBinding',
      type: 'object',
      required: ['location', 'network'],
      properties: {
        location: {
          description: 'The location of where a network binding exists.',
          type: 'object',
          required: ['name', 'namespace'],
          properties: {
            name: {
              description: 'Name of a datum location',
              type: 'string',
            },
            namespace: {
              description: 'Namespace for the datum location',
              type: 'string',
            },
          },
        },
        network: {
          description: 'The network that the binding is for.',
          type: 'object',
          required: ['name'],
          properties: {
            name: {
              description: 'The network name',
              type: 'string',
            },
            namespace: {
              description: `The network namespace.

Defaults to the namespace for the type the reference is embedded in.`,
              type: 'string',
            },
          },
        },
      },
    },
    status: {
      description: 'NetworkBindingStatus defines the observed state of NetworkBinding',
      type: 'object',
      default: {
        conditions: [
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Ready',
          },
        ],
      },
      properties: {
        conditions: {
          description: "Represents the observations of a network binding's current state.",
          type: 'array',
          items: {
            description:
              'Condition contains details for one aspect of the current state of this API Resource.',
            type: 'object',
            required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
            properties: {
              lastTransitionTime: {
                description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                type: 'string',
                format: 'date-time',
              },
              message: {
                description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                type: 'string',
                maxLength: 32768,
              },
              observedGeneration: {
                description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                type: 'integer',
                format: 'int64',
                minimum: 0,
              },
              reason: {
                description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                type: 'string',
                maxLength: 1024,
                minLength: 1,
                pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
              },
              status: {
                description: 'status of the condition, one of True, False, Unknown.',
                type: 'string',
                enum: ['True', 'False', 'Unknown'],
              },
              type: {
                description: 'type of condition in CamelCase or in foo.example.com/CamelCase.',
                type: 'string',
                maxLength: 316,
                pattern:
                  '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
              },
            },
          },
        },
        networkContextRef: {
          type: 'object',
          required: ['name', 'namespace'],
          properties: {
            name: {
              description: 'The network context name',
              type: 'string',
            },
            namespace: {
              description: 'The network context namespace',
              type: 'string',
            },
          },
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'NetworkBinding',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_NetworkBindingListSchema = {
  description: 'NetworkBindingList is a list of NetworkBinding',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of networkbindings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/com.datumapis.networking.v1alpha.NetworkBinding',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'NetworkBindingList',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_NetworkContextSchema = {
  description: 'NetworkContext is the Schema for the networkcontexts API',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'NetworkContextSpec defines the desired state of NetworkContext',
      type: 'object',
      required: ['location', 'network'],
      properties: {
        location: {
          description: 'The location of where a network context exists.',
          type: 'object',
          required: ['name', 'namespace'],
          properties: {
            name: {
              description: 'Name of a datum location',
              type: 'string',
            },
            namespace: {
              description: 'Namespace for the datum location',
              type: 'string',
            },
          },
        },
        network: {
          description: 'The attached network',
          type: 'object',
          required: ['name'],
          properties: {
            name: {
              description: 'The network name',
              type: 'string',
            },
          },
        },
      },
    },
    status: {
      description: 'NetworkContextStatus defines the observed state of NetworkContext',
      type: 'object',
      default: {
        conditions: [
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Programmed',
          },
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Ready',
          },
        ],
      },
      properties: {
        conditions: {
          description: "Represents the observations of a network context's current state.",
          type: 'array',
          items: {
            description:
              'Condition contains details for one aspect of the current state of this API Resource.',
            type: 'object',
            required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
            properties: {
              lastTransitionTime: {
                description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                type: 'string',
                format: 'date-time',
              },
              message: {
                description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                type: 'string',
                maxLength: 32768,
              },
              observedGeneration: {
                description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                type: 'integer',
                format: 'int64',
                minimum: 0,
              },
              reason: {
                description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                type: 'string',
                maxLength: 1024,
                minLength: 1,
                pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
              },
              status: {
                description: 'status of the condition, one of True, False, Unknown.',
                type: 'string',
                enum: ['True', 'False', 'Unknown'],
              },
              type: {
                description: 'type of condition in CamelCase or in foo.example.com/CamelCase.',
                type: 'string',
                maxLength: 316,
                pattern:
                  '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
              },
            },
          },
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'NetworkContext',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_NetworkContextListSchema = {
  description: 'NetworkContextList is a list of NetworkContext',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of networkcontexts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/com.datumapis.networking.v1alpha.NetworkContext',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'NetworkContextList',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_NetworkListSchema = {
  description: 'NetworkList is a list of Network',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of networks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/com.datumapis.networking.v1alpha.Network',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'NetworkList',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_NetworkPolicySchema = {
  description: 'NetworkPolicy is the Schema for the networkpolicies API',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'NetworkPolicySpec defines the desired state of NetworkPolicy',
      type: 'object',
    },
    status: {
      description: 'NetworkPolicyStatus defines the observed state of NetworkPolicy',
      type: 'object',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'NetworkPolicy',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_NetworkPolicyListSchema = {
  description: 'NetworkPolicyList is a list of NetworkPolicy',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of networkpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/com.datumapis.networking.v1alpha.NetworkPolicy',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'NetworkPolicyList',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_SubnetSchema = {
  description: 'Subnet is the Schema for the subnets API',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'SubnetSpec defines the desired state of Subnet',
      type: 'object',
      required: [
        'ipFamily',
        'location',
        'networkContext',
        'prefixLength',
        'startAddress',
        'subnetClass',
      ],
      properties: {
        ipFamily: {
          description: 'The IP family of a subnet',
          type: 'string',
          enum: ['IPv4', 'IPv6'],
        },
        location: {
          description: 'The location which a subnet is associated with',
          type: 'object',
          required: ['name', 'namespace'],
          properties: {
            name: {
              description: 'Name of a datum location',
              type: 'string',
            },
            namespace: {
              description: 'Namespace for the datum location',
              type: 'string',
            },
          },
        },
        networkContext: {
          description: "A subnet's network context",
          type: 'object',
          required: ['name'],
          properties: {
            name: {
              description: 'The network context name',
              type: 'string',
            },
          },
        },
        prefixLength: {
          description: 'The prefix length of a subnet',
          type: 'integer',
          format: 'int32',
        },
        startAddress: {
          description: 'The start address of a subnet',
          type: 'string',
        },
        subnetClass: {
          description: 'The class of subnet',
          type: 'string',
        },
      },
    },
    status: {
      description: 'SubnetStatus defines the observed state of a Subnet',
      type: 'object',
      default: {
        conditions: [
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Allocated',
          },
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Programmed',
          },
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Ready',
          },
        ],
      },
      properties: {
        conditions: {
          description: "Represents the observations of a subnet's current state.",
          type: 'array',
          items: {
            description:
              'Condition contains details for one aspect of the current state of this API Resource.',
            type: 'object',
            required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
            properties: {
              lastTransitionTime: {
                description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                type: 'string',
                format: 'date-time',
              },
              message: {
                description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                type: 'string',
                maxLength: 32768,
              },
              observedGeneration: {
                description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                type: 'integer',
                format: 'int64',
                minimum: 0,
              },
              reason: {
                description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                type: 'string',
                maxLength: 1024,
                minLength: 1,
                pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
              },
              status: {
                description: 'status of the condition, one of True, False, Unknown.',
                type: 'string',
                enum: ['True', 'False', 'Unknown'],
              },
              type: {
                description: 'type of condition in CamelCase or in foo.example.com/CamelCase.',
                type: 'string',
                maxLength: 316,
                pattern:
                  '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
              },
            },
          },
        },
        prefixLength: {
          description: 'The prefix length of a subnet',
          type: 'integer',
          format: 'int32',
        },
        startAddress: {
          description: 'The start address of a subnet',
          type: 'string',
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'Subnet',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_SubnetClaimSchema = {
  description: 'SubnetClaim is the Schema for the subnetclaims API',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'SubnetClaimSpec defines the desired state of SubnetClaim',
      type: 'object',
      required: ['ipFamily', 'location', 'networkContext', 'subnetClass'],
      properties: {
        ipFamily: {
          description: 'The IP family of a subnet claim',
          type: 'string',
          enum: ['IPv4', 'IPv6'],
        },
        location: {
          description: 'The location which a subnet claim is associated with',
          type: 'object',
          required: ['name', 'namespace'],
          properties: {
            name: {
              description: 'Name of a datum location',
              type: 'string',
            },
            namespace: {
              description: 'Namespace for the datum location',
              type: 'string',
            },
          },
        },
        networkContext: {
          description: 'The network context to claim a subnet in',
          type: 'object',
          required: ['name'],
          properties: {
            name: {
              description: 'The network context name',
              type: 'string',
            },
          },
        },
        prefixLength: {
          description: 'The prefix length of a subnet claim',
          type: 'integer',
          format: 'int32',
        },
        startAddress: {
          description: 'The start address of a subnet claim',
          type: 'string',
        },
        subnetClass: {
          description: 'The class of subnet required',
          type: 'string',
        },
      },
    },
    status: {
      description: 'SubnetClaimStatus defines the observed state of SubnetClaim',
      type: 'object',
      default: {
        conditions: [
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Allocated',
          },
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Programmed',
          },
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Ready',
          },
        ],
      },
      properties: {
        conditions: {
          description: "Represents the observations of a subnet claim's current state.",
          type: 'array',
          items: {
            description:
              'Condition contains details for one aspect of the current state of this API Resource.',
            type: 'object',
            required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
            properties: {
              lastTransitionTime: {
                description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                type: 'string',
                format: 'date-time',
              },
              message: {
                description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                type: 'string',
                maxLength: 32768,
              },
              observedGeneration: {
                description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                type: 'integer',
                format: 'int64',
                minimum: 0,
              },
              reason: {
                description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                type: 'string',
                maxLength: 1024,
                minLength: 1,
                pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
              },
              status: {
                description: 'status of the condition, one of True, False, Unknown.',
                type: 'string',
                enum: ['True', 'False', 'Unknown'],
              },
              type: {
                description: 'type of condition in CamelCase or in foo.example.com/CamelCase.',
                type: 'string',
                maxLength: 316,
                pattern:
                  '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
              },
            },
          },
        },
        prefixLength: {
          description: 'The prefix length of a subnet claim',
          type: 'integer',
          format: 'int32',
        },
        startAddress: {
          description: 'The start address of a subnet claim',
          type: 'string',
        },
        subnetRef: {
          description: 'The subnet which has been claimed from',
          type: 'object',
          required: ['name'],
          properties: {
            name: {
              type: 'string',
            },
          },
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'SubnetClaim',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_SubnetClaimListSchema = {
  description: 'SubnetClaimList is a list of SubnetClaim',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of subnetclaims. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/com.datumapis.networking.v1alpha.SubnetClaim',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'SubnetClaimList',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const com_datumapis_networking_v1alpha_SubnetListSchema = {
  description: 'SubnetList is a list of Subnet',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of subnets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/com.datumapis.networking.v1alpha.Subnet',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'networking.datumapis.com',
      kind: 'SubnetList',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_DeleteOptionsSchema = {
  description: 'DeleteOptions may be provided when deleting an API object.',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    dryRun: {
      description:
        'When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed',
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
      'x-kubernetes-list-type': 'atomic',
    },
    gracePeriodSeconds: {
      description:
        'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
      type: 'integer',
      format: 'int64',
    },
    ignoreStoreReadErrorWithClusterBreakingPotential: {
      description:
        'if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it',
      type: 'boolean',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    orphanDependents: {
      description: `Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.`,
      type: 'boolean',
    },
    preconditions: {
      description:
        'Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions',
        },
      ],
    },
    propagationPolicy: {
      description:
        "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
      type: 'string',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'apps',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'apps',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'apps',
      kind: 'DeleteOptions',
      version: 'v1beta2',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v2',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v2beta1',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v2beta2',
    },
    {
      group: 'batch',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'batch',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha2',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'discovery.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'discovery.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'events.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'events.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'extensions',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta2',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta3',
    },
    {
      group: 'internal.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'node.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'node.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'node.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'policy',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'policy',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'resource.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha3',
    },
    {
      group: 'resource.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'storagemigration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
  ],
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_FieldsV1Schema = {
  description: `FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

The exact format is defined in sigs.k8s.io/structured-merge-diff`,
  type: 'object',
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_ListMetaSchema = {
  description:
    'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
  type: 'object',
  properties: {
    continue: {
      description:
        'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.',
      type: 'string',
    },
    remainingItemCount: {
      description:
        'remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.',
      type: 'integer',
      format: 'int64',
    },
    resourceVersion: {
      description:
        "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
      type: 'string',
    },
    selfLink: {
      description:
        'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.',
      type: 'string',
    },
  },
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_ManagedFieldsEntrySchema = {
  description:
    'ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.',
      type: 'string',
    },
    fieldsType: {
      description:
        'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"',
      type: 'string',
    },
    fieldsV1: {
      description:
        'FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1',
        },
      ],
    },
    manager: {
      description: 'Manager is an identifier of the workflow managing these fields.',
      type: 'string',
    },
    operation: {
      description:
        "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
      type: 'string',
    },
    subresource: {
      description:
        'Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.',
      type: 'string',
    },
    time: {
      description:
        'Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
  },
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_ObjectMetaSchema = {
  description:
    'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
  type: 'object',
  properties: {
    annotations: {
      description:
        'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations',
      type: 'object',
      additionalProperties: {
        type: 'string',
        default: '',
      },
    },
    creationTimestamp: {
      description: `CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata`,
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
    deletionGracePeriodSeconds: {
      description:
        'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
      type: 'integer',
      format: 'int64',
    },
    deletionTimestamp: {
      description: `DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata`,
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
    finalizers: {
      description:
        'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.',
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
      'x-kubernetes-list-type': 'set',
      'x-kubernetes-patch-strategy': 'merge',
    },
    generateName: {
      description: `GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

If this field is specified and the generated name exists, the server will return a 409.

Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency`,
      type: 'string',
    },
    generation: {
      description:
        'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
      type: 'integer',
      format: 'int64',
    },
    labels: {
      description:
        'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels',
      type: 'object',
      additionalProperties: {
        type: 'string',
        default: '',
      },
    },
    managedFields: {
      description: `ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.`,
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry',
          },
        ],
      },
      'x-kubernetes-list-type': 'atomic',
    },
    name: {
      description:
        'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names',
      type: 'string',
    },
    namespace: {
      description: `Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces`,
      type: 'string',
    },
    ownerReferences: {
      description:
        'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference',
          },
        ],
      },
      'x-kubernetes-list-map-keys': ['uid'],
      'x-kubernetes-list-type': 'map',
      'x-kubernetes-patch-merge-key': 'uid',
      'x-kubernetes-patch-strategy': 'merge',
    },
    resourceVersion: {
      description: `An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency`,
      type: 'string',
    },
    selfLink: {
      description:
        'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.',
      type: 'string',
    },
    uid: {
      description: `UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids`,
      type: 'string',
    },
  },
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_OwnerReferenceSchema = {
  description:
    'OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.',
  type: 'object',
  required: ['apiVersion', 'kind', 'name', 'uid'],
  properties: {
    apiVersion: {
      description: 'API version of the referent.',
      type: 'string',
      default: '',
    },
    blockOwnerDeletion: {
      description:
        'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
      type: 'boolean',
    },
    controller: {
      description: 'If true, this reference points to the managing controller.',
      type: 'boolean',
    },
    kind: {
      description:
        'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
      default: '',
    },
    name: {
      description:
        'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names',
      type: 'string',
      default: '',
    },
    uid: {
      description:
        'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids',
      type: 'string',
      default: '',
    },
  },
  'x-kubernetes-map-type': 'atomic',
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_PatchSchema = {
  description:
    'Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.',
  type: 'object',
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_PreconditionsSchema = {
  description:
    'Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.',
  type: 'object',
  properties: {
    resourceVersion: {
      description: 'Specifies the target ResourceVersion',
      type: 'string',
    },
    uid: {
      description: 'Specifies the target UID.',
      type: 'string',
    },
  },
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_StatusSchema = {
  description: "Status is a return value for calls that don't return other objects.",
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    code: {
      description: 'Suggested HTTP return code for this status, 0 if not set.',
      type: 'integer',
      format: 'int32',
    },
    details: {
      description:
        'Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails',
        },
      ],
      'x-kubernetes-list-type': 'atomic',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    message: {
      description: 'A human-readable description of the status of this operation.',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
    reason: {
      description:
        'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
      type: 'string',
    },
    status: {
      description:
        'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
      type: 'string',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'Status',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_StatusCauseSchema = {
  description:
    'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
  type: 'object',
  properties: {
    field: {
      description: `The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

Examples:
  "name" - the field "name" on the current resource
  "items[0].name" - the field "name" on the first array entry in "items"`,
      type: 'string',
    },
    message: {
      description:
        'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
      type: 'string',
    },
    reason: {
      description:
        'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
      type: 'string',
    },
  },
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_StatusDetailsSchema = {
  description:
    'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
  type: 'object',
  properties: {
    causes: {
      description:
        'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause',
          },
        ],
      },
      'x-kubernetes-list-type': 'atomic',
    },
    group: {
      description: 'The group attribute of the resource associated with the status StatusReason.',
      type: 'string',
    },
    kind: {
      description:
        'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    name: {
      description:
        'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
      type: 'string',
    },
    retryAfterSeconds: {
      description:
        'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
      type: 'integer',
      format: 'int32',
    },
    uid: {
      description:
        'UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids',
      type: 'string',
    },
  },
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_TimeSchema = {
  description:
    'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
  type: 'string',
  format: 'date-time',
} as const;
