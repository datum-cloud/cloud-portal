// This file is auto-generated by @hey-api/openapi-ts
import type {
  ListNetworkingDatumapisComV1AlphaDomainForAllNamespacesResponse,
  ListNetworkingDatumapisComV1AlphaHttpProxyForAllNamespacesResponse,
  ListNetworkingDatumapisComV1AlphaLocationForAllNamespacesResponse,
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedDomainResponse,
  ListNetworkingDatumapisComV1AlphaNamespacedDomainResponse,
  CreateNetworkingDatumapisComV1AlphaNamespacedDomainResponse,
  DeleteNetworkingDatumapisComV1AlphaNamespacedDomainResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedDomainResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedDomainResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponse,
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedHttpProxyResponse,
  ListNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse,
  CreateNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse,
  DeleteNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponse,
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedLocationResponse,
  ListNetworkingDatumapisComV1AlphaNamespacedLocationResponse,
  CreateNetworkingDatumapisComV1AlphaNamespacedLocationResponse,
  DeleteNetworkingDatumapisComV1AlphaNamespacedLocationResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedLocationResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedLocationResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponse,
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkBindingResponse,
  ListNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse,
  CreateNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse,
  DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponse,
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkContextResponse,
  ListNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse,
  CreateNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse,
  DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponse,
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkPolicyResponse,
  ListNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse,
  CreateNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse,
  DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponse,
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkResponse,
  ListNetworkingDatumapisComV1AlphaNamespacedNetworkResponse,
  CreateNetworkingDatumapisComV1AlphaNamespacedNetworkResponse,
  DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponse,
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetClaimResponse,
  ListNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse,
  CreateNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse,
  DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponse,
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetResponse,
  ListNetworkingDatumapisComV1AlphaNamespacedSubnetResponse,
  CreateNetworkingDatumapisComV1AlphaNamespacedSubnetResponse,
  DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedSubnetResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedSubnetResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetResponse,
  ReadNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponse,
  PatchNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponse,
  ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponse,
  ListNetworkingDatumapisComV1AlphaNetworkBindingForAllNamespacesResponse,
  ListNetworkingDatumapisComV1AlphaNetworkContextForAllNamespacesResponse,
  ListNetworkingDatumapisComV1AlphaNetworkPolicyForAllNamespacesResponse,
  ListNetworkingDatumapisComV1AlphaNetworkForAllNamespacesResponse,
  ListNetworkingDatumapisComV1AlphaSubnetClaimForAllNamespacesResponse,
  ListNetworkingDatumapisComV1AlphaSubnetForAllNamespacesResponse,
} from './types.gen';

const ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer = (data: any) => {
  data = new Date(data);
  return data;
};

const ioK8sApimachineryPkgApisMetaV1ManagedFieldsEntrySchemaResponseTransformer = (data: any) => {
  if (data.time) {
    data.time = ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer(data.time);
  }
  return data;
};

const ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer = (data: any) => {
  if (data.creationTimestamp) {
    data.creationTimestamp = ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer(
      data.creationTimestamp
    );
  }
  if (data.deletionGracePeriodSeconds) {
    data.deletionGracePeriodSeconds = BigInt(data.deletionGracePeriodSeconds.toString());
  }
  if (data.deletionTimestamp) {
    data.deletionTimestamp = ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer(
      data.deletionTimestamp
    );
  }
  if (data.generation) {
    data.generation = BigInt(data.generation.toString());
  }
  if (data.managedFields) {
    data.managedFields = data.managedFields.map((item: any) => {
      return ioK8sApimachineryPkgApisMetaV1ManagedFieldsEntrySchemaResponseTransformer(item);
    });
  }
  return data;
};

const comDatumapisNetworkingV1AlphaDomainSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata
    );
  }
  if (data.status) {
    if (data.status.conditions) {
      data.status.conditions = data.status.conditions.map((item: any) => {
        item.lastTransitionTime = new Date(item.lastTransitionTime);
        if (item.observedGeneration) {
          item.observedGeneration = BigInt(item.observedGeneration.toString());
        }
        return item;
      });
    }
  }
  return data;
};

const ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer = (data: any) => {
  if (data.remainingItemCount) {
    data.remainingItemCount = BigInt(data.remainingItemCount.toString());
  }
  return data;
};

const comDatumapisNetworkingV1AlphaDomainListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return comDatumapisNetworkingV1AlphaDomainSchemaResponseTransformer(item);
  });
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const listNetworkingDatumapisComV1AlphaDomainForAllNamespacesResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaDomainForAllNamespacesResponse> => {
  data = comDatumapisNetworkingV1AlphaDomainListSchemaResponseTransformer(data);
  return data;
};

const comDatumapisNetworkingV1AlphaHttpProxySchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata
    );
  }
  if (data.status) {
    if (data.status.conditions) {
      data.status.conditions = data.status.conditions.map((item: any) => {
        item.lastTransitionTime = new Date(item.lastTransitionTime);
        if (item.observedGeneration) {
          item.observedGeneration = BigInt(item.observedGeneration.toString());
        }
        return item;
      });
    }
  }
  return data;
};

const comDatumapisNetworkingV1AlphaHttpProxyListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return comDatumapisNetworkingV1AlphaHttpProxySchemaResponseTransformer(item);
  });
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const listNetworkingDatumapisComV1AlphaHttpProxyForAllNamespacesResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaHttpProxyForAllNamespacesResponse> => {
  data = comDatumapisNetworkingV1AlphaHttpProxyListSchemaResponseTransformer(data);
  return data;
};

const comDatumapisNetworkingV1AlphaLocationSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata
    );
  }
  if (data.status) {
    if (data.status.conditions) {
      data.status.conditions = data.status.conditions.map((item: any) => {
        item.lastTransitionTime = new Date(item.lastTransitionTime);
        if (item.observedGeneration) {
          item.observedGeneration = BigInt(item.observedGeneration.toString());
        }
        return item;
      });
    }
  }
  return data;
};

const comDatumapisNetworkingV1AlphaLocationListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return comDatumapisNetworkingV1AlphaLocationSchemaResponseTransformer(item);
  });
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const listNetworkingDatumapisComV1AlphaLocationForAllNamespacesResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaLocationForAllNamespacesResponse> => {
  data = comDatumapisNetworkingV1AlphaLocationListSchemaResponseTransformer(data);
  return data;
};

const ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const deleteNetworkingDatumapisComV1AlphaCollectionNamespacedDomainResponseTransformer =
  async (
    data: any
  ): Promise<DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedDomainResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

export const listNetworkingDatumapisComV1AlphaNamespacedDomainResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaNamespacedDomainResponse> => {
  data = comDatumapisNetworkingV1AlphaDomainListSchemaResponseTransformer(data);
  return data;
};

export const createNetworkingDatumapisComV1AlphaNamespacedDomainResponseTransformer = async (
  data: any
): Promise<CreateNetworkingDatumapisComV1AlphaNamespacedDomainResponse> => {
  data = comDatumapisNetworkingV1AlphaDomainSchemaResponseTransformer(data);
  return data;
};

export const deleteNetworkingDatumapisComV1AlphaNamespacedDomainResponseTransformer = async (
  data: any
): Promise<DeleteNetworkingDatumapisComV1AlphaNamespacedDomainResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
  return data;
};

export const readNetworkingDatumapisComV1AlphaNamespacedDomainResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedDomainResponse> => {
  data = comDatumapisNetworkingV1AlphaDomainSchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedDomainResponseTransformer = async (
  data: any
): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedDomainResponse> => {
  data = comDatumapisNetworkingV1AlphaDomainSchemaResponseTransformer(data);
  return data;
};

export const replaceNetworkingDatumapisComV1AlphaNamespacedDomainResponseTransformer = async (
  data: any
): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainResponse> => {
  data = comDatumapisNetworkingV1AlphaDomainSchemaResponseTransformer(data);
  return data;
};

export const readNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponse> => {
  data = comDatumapisNetworkingV1AlphaDomainSchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponseTransformer = async (
  data: any
): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponse> => {
  data = comDatumapisNetworkingV1AlphaDomainSchemaResponseTransformer(data);
  return data;
};

export const replaceNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponseTransformer = async (
  data: any
): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponse> => {
  data = comDatumapisNetworkingV1AlphaDomainSchemaResponseTransformer(data);
  return data;
};

export const deleteNetworkingDatumapisComV1AlphaCollectionNamespacedHttpProxyResponseTransformer =
  async (
    data: any
  ): Promise<DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedHttpProxyResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

export const listNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse> => {
  data = comDatumapisNetworkingV1AlphaHttpProxyListSchemaResponseTransformer(data);
  return data;
};

export const createNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponseTransformer = async (
  data: any
): Promise<CreateNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse> => {
  data = comDatumapisNetworkingV1AlphaHttpProxySchemaResponseTransformer(data);
  return data;
};

export const deleteNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponseTransformer = async (
  data: any
): Promise<DeleteNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
  return data;
};

export const readNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse> => {
  data = comDatumapisNetworkingV1AlphaHttpProxySchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponseTransformer = async (
  data: any
): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse> => {
  data = comDatumapisNetworkingV1AlphaHttpProxySchemaResponseTransformer(data);
  return data;
};

export const replaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponseTransformer = async (
  data: any
): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse> => {
  data = comDatumapisNetworkingV1AlphaHttpProxySchemaResponseTransformer(data);
  return data;
};

export const readNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponse> => {
  data = comDatumapisNetworkingV1AlphaHttpProxySchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponseTransformer =
  async (
    data: any
  ): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaHttpProxySchemaResponseTransformer(data);
    return data;
  };

export const replaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponseTransformer =
  async (
    data: any
  ): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaHttpProxySchemaResponseTransformer(data);
    return data;
  };

export const deleteNetworkingDatumapisComV1AlphaCollectionNamespacedLocationResponseTransformer =
  async (
    data: any
  ): Promise<DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedLocationResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

export const listNetworkingDatumapisComV1AlphaNamespacedLocationResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaNamespacedLocationResponse> => {
  data = comDatumapisNetworkingV1AlphaLocationListSchemaResponseTransformer(data);
  return data;
};

export const createNetworkingDatumapisComV1AlphaNamespacedLocationResponseTransformer = async (
  data: any
): Promise<CreateNetworkingDatumapisComV1AlphaNamespacedLocationResponse> => {
  data = comDatumapisNetworkingV1AlphaLocationSchemaResponseTransformer(data);
  return data;
};

export const deleteNetworkingDatumapisComV1AlphaNamespacedLocationResponseTransformer = async (
  data: any
): Promise<DeleteNetworkingDatumapisComV1AlphaNamespacedLocationResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
  return data;
};

export const readNetworkingDatumapisComV1AlphaNamespacedLocationResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedLocationResponse> => {
  data = comDatumapisNetworkingV1AlphaLocationSchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedLocationResponseTransformer = async (
  data: any
): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedLocationResponse> => {
  data = comDatumapisNetworkingV1AlphaLocationSchemaResponseTransformer(data);
  return data;
};

export const replaceNetworkingDatumapisComV1AlphaNamespacedLocationResponseTransformer = async (
  data: any
): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationResponse> => {
  data = comDatumapisNetworkingV1AlphaLocationSchemaResponseTransformer(data);
  return data;
};

export const readNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponse> => {
  data = comDatumapisNetworkingV1AlphaLocationSchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponseTransformer = async (
  data: any
): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponse> => {
  data = comDatumapisNetworkingV1AlphaLocationSchemaResponseTransformer(data);
  return data;
};

export const replaceNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponseTransformer =
  async (
    data: any
  ): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaLocationSchemaResponseTransformer(data);
    return data;
  };

export const deleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkBindingResponseTransformer =
  async (
    data: any
  ): Promise<DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkBindingResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

const comDatumapisNetworkingV1AlphaNetworkBindingSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata
    );
  }
  if (data.status) {
    if (data.status.conditions) {
      data.status.conditions = data.status.conditions.map((item: any) => {
        item.lastTransitionTime = new Date(item.lastTransitionTime);
        if (item.observedGeneration) {
          item.observedGeneration = BigInt(item.observedGeneration.toString());
        }
        return item;
      });
    }
  }
  return data;
};

const comDatumapisNetworkingV1AlphaNetworkBindingListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return comDatumapisNetworkingV1AlphaNetworkBindingSchemaResponseTransformer(item);
  });
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const listNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkBindingListSchemaResponseTransformer(data);
  return data;
};

export const createNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponseTransformer =
  async (
    data: any
  ): Promise<CreateNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkBindingSchemaResponseTransformer(data);
    return data;
  };

export const deleteNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponseTransformer =
  async (
    data: any
  ): Promise<DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

export const readNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkBindingSchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponseTransformer = async (
  data: any
): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkBindingSchemaResponseTransformer(data);
  return data;
};

export const replaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponseTransformer =
  async (
    data: any
  ): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkBindingSchemaResponseTransformer(data);
    return data;
  };

export const readNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponseTransformer =
  async (
    data: any
  ): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkBindingSchemaResponseTransformer(data);
    return data;
  };

export const patchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponseTransformer =
  async (
    data: any
  ): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkBindingSchemaResponseTransformer(data);
    return data;
  };

export const replaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponseTransformer =
  async (
    data: any
  ): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkBindingSchemaResponseTransformer(data);
    return data;
  };

export const deleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkContextResponseTransformer =
  async (
    data: any
  ): Promise<DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkContextResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

const comDatumapisNetworkingV1AlphaNetworkContextSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata
    );
  }
  if (data.status) {
    if (data.status.conditions) {
      data.status.conditions = data.status.conditions.map((item: any) => {
        item.lastTransitionTime = new Date(item.lastTransitionTime);
        if (item.observedGeneration) {
          item.observedGeneration = BigInt(item.observedGeneration.toString());
        }
        return item;
      });
    }
  }
  return data;
};

const comDatumapisNetworkingV1AlphaNetworkContextListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return comDatumapisNetworkingV1AlphaNetworkContextSchemaResponseTransformer(item);
  });
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const listNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkContextListSchemaResponseTransformer(data);
  return data;
};

export const createNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponseTransformer =
  async (
    data: any
  ): Promise<CreateNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkContextSchemaResponseTransformer(data);
    return data;
  };

export const deleteNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponseTransformer =
  async (
    data: any
  ): Promise<DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

export const readNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkContextSchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponseTransformer = async (
  data: any
): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkContextSchemaResponseTransformer(data);
  return data;
};

export const replaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponseTransformer =
  async (
    data: any
  ): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkContextSchemaResponseTransformer(data);
    return data;
  };

export const readNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponseTransformer =
  async (
    data: any
  ): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkContextSchemaResponseTransformer(data);
    return data;
  };

export const patchNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponseTransformer =
  async (
    data: any
  ): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkContextSchemaResponseTransformer(data);
    return data;
  };

export const replaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponseTransformer =
  async (
    data: any
  ): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkContextSchemaResponseTransformer(data);
    return data;
  };

export const deleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkPolicyResponseTransformer =
  async (
    data: any
  ): Promise<DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkPolicyResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

const comDatumapisNetworkingV1AlphaNetworkPolicySchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata
    );
  }
  return data;
};

const comDatumapisNetworkingV1AlphaNetworkPolicyListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return comDatumapisNetworkingV1AlphaNetworkPolicySchemaResponseTransformer(item);
  });
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const listNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkPolicyListSchemaResponseTransformer(data);
  return data;
};

export const createNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponseTransformer = async (
  data: any
): Promise<CreateNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkPolicySchemaResponseTransformer(data);
  return data;
};

export const deleteNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponseTransformer = async (
  data: any
): Promise<DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
  return data;
};

export const readNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkPolicySchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponseTransformer = async (
  data: any
): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkPolicySchemaResponseTransformer(data);
  return data;
};

export const replaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponseTransformer =
  async (
    data: any
  ): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkPolicySchemaResponseTransformer(data);
    return data;
  };

export const readNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponseTransformer =
  async (
    data: any
  ): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkPolicySchemaResponseTransformer(data);
    return data;
  };

export const patchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponseTransformer =
  async (
    data: any
  ): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkPolicySchemaResponseTransformer(data);
    return data;
  };

export const replaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponseTransformer =
  async (
    data: any
  ): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkPolicySchemaResponseTransformer(data);
    return data;
  };

export const deleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkResponseTransformer =
  async (
    data: any
  ): Promise<DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

const comDatumapisNetworkingV1AlphaNetworkSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata
    );
  }
  if (data.status) {
    if (data.status.conditions) {
      data.status.conditions = data.status.conditions.map((item: any) => {
        item.lastTransitionTime = new Date(item.lastTransitionTime);
        if (item.observedGeneration) {
          item.observedGeneration = BigInt(item.observedGeneration.toString());
        }
        return item;
      });
    }
  }
  return data;
};

const comDatumapisNetworkingV1AlphaNetworkListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return comDatumapisNetworkingV1AlphaNetworkSchemaResponseTransformer(item);
  });
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const listNetworkingDatumapisComV1AlphaNamespacedNetworkResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaNamespacedNetworkResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkListSchemaResponseTransformer(data);
  return data;
};

export const createNetworkingDatumapisComV1AlphaNamespacedNetworkResponseTransformer = async (
  data: any
): Promise<CreateNetworkingDatumapisComV1AlphaNamespacedNetworkResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkSchemaResponseTransformer(data);
  return data;
};

export const deleteNetworkingDatumapisComV1AlphaNamespacedNetworkResponseTransformer = async (
  data: any
): Promise<DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
  return data;
};

export const readNetworkingDatumapisComV1AlphaNamespacedNetworkResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedNetworkResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkSchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedNetworkResponseTransformer = async (
  data: any
): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedNetworkResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkSchemaResponseTransformer(data);
  return data;
};

export const replaceNetworkingDatumapisComV1AlphaNamespacedNetworkResponseTransformer = async (
  data: any
): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkSchemaResponseTransformer(data);
  return data;
};

export const readNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkSchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponseTransformer = async (
  data: any
): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkSchemaResponseTransformer(data);
  return data;
};

export const replaceNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponseTransformer =
  async (
    data: any
  ): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkSchemaResponseTransformer(data);
    return data;
  };

export const deleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetClaimResponseTransformer =
  async (
    data: any
  ): Promise<DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetClaimResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

const comDatumapisNetworkingV1AlphaSubnetClaimSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata
    );
  }
  if (data.status) {
    if (data.status.conditions) {
      data.status.conditions = data.status.conditions.map((item: any) => {
        item.lastTransitionTime = new Date(item.lastTransitionTime);
        if (item.observedGeneration) {
          item.observedGeneration = BigInt(item.observedGeneration.toString());
        }
        return item;
      });
    }
  }
  return data;
};

const comDatumapisNetworkingV1AlphaSubnetClaimListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return comDatumapisNetworkingV1AlphaSubnetClaimSchemaResponseTransformer(item);
  });
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const listNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetClaimListSchemaResponseTransformer(data);
  return data;
};

export const createNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponseTransformer = async (
  data: any
): Promise<CreateNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetClaimSchemaResponseTransformer(data);
  return data;
};

export const deleteNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponseTransformer = async (
  data: any
): Promise<DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
  return data;
};

export const readNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetClaimSchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponseTransformer = async (
  data: any
): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetClaimSchemaResponseTransformer(data);
  return data;
};

export const replaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponseTransformer = async (
  data: any
): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetClaimSchemaResponseTransformer(data);
  return data;
};

export const readNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponseTransformer =
  async (
    data: any
  ): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaSubnetClaimSchemaResponseTransformer(data);
    return data;
  };

export const patchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponseTransformer =
  async (
    data: any
  ): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaSubnetClaimSchemaResponseTransformer(data);
    return data;
  };

export const replaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponseTransformer =
  async (
    data: any
  ): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponse> => {
    data = comDatumapisNetworkingV1AlphaSubnetClaimSchemaResponseTransformer(data);
    return data;
  };

export const deleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetResponseTransformer =
  async (
    data: any
  ): Promise<DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

const comDatumapisNetworkingV1AlphaSubnetSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata
    );
  }
  if (data.status) {
    if (data.status.conditions) {
      data.status.conditions = data.status.conditions.map((item: any) => {
        item.lastTransitionTime = new Date(item.lastTransitionTime);
        if (item.observedGeneration) {
          item.observedGeneration = BigInt(item.observedGeneration.toString());
        }
        return item;
      });
    }
  }
  return data;
};

const comDatumapisNetworkingV1AlphaSubnetListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return comDatumapisNetworkingV1AlphaSubnetSchemaResponseTransformer(item);
  });
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const listNetworkingDatumapisComV1AlphaNamespacedSubnetResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaNamespacedSubnetResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetListSchemaResponseTransformer(data);
  return data;
};

export const createNetworkingDatumapisComV1AlphaNamespacedSubnetResponseTransformer = async (
  data: any
): Promise<CreateNetworkingDatumapisComV1AlphaNamespacedSubnetResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetSchemaResponseTransformer(data);
  return data;
};

export const deleteNetworkingDatumapisComV1AlphaNamespacedSubnetResponseTransformer = async (
  data: any
): Promise<DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
  return data;
};

export const readNetworkingDatumapisComV1AlphaNamespacedSubnetResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedSubnetResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetSchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedSubnetResponseTransformer = async (
  data: any
): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedSubnetResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetSchemaResponseTransformer(data);
  return data;
};

export const replaceNetworkingDatumapisComV1AlphaNamespacedSubnetResponseTransformer = async (
  data: any
): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetSchemaResponseTransformer(data);
  return data;
};

export const readNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponseTransformer = async (
  data: any
): Promise<ReadNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetSchemaResponseTransformer(data);
  return data;
};

export const patchNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponseTransformer = async (
  data: any
): Promise<PatchNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetSchemaResponseTransformer(data);
  return data;
};

export const replaceNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponseTransformer = async (
  data: any
): Promise<ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetSchemaResponseTransformer(data);
  return data;
};

export const listNetworkingDatumapisComV1AlphaNetworkBindingForAllNamespacesResponseTransformer =
  async (
    data: any
  ): Promise<ListNetworkingDatumapisComV1AlphaNetworkBindingForAllNamespacesResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkBindingListSchemaResponseTransformer(data);
    return data;
  };

export const listNetworkingDatumapisComV1AlphaNetworkContextForAllNamespacesResponseTransformer =
  async (
    data: any
  ): Promise<ListNetworkingDatumapisComV1AlphaNetworkContextForAllNamespacesResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkContextListSchemaResponseTransformer(data);
    return data;
  };

export const listNetworkingDatumapisComV1AlphaNetworkPolicyForAllNamespacesResponseTransformer =
  async (
    data: any
  ): Promise<ListNetworkingDatumapisComV1AlphaNetworkPolicyForAllNamespacesResponse> => {
    data = comDatumapisNetworkingV1AlphaNetworkPolicyListSchemaResponseTransformer(data);
    return data;
  };

export const listNetworkingDatumapisComV1AlphaNetworkForAllNamespacesResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaNetworkForAllNamespacesResponse> => {
  data = comDatumapisNetworkingV1AlphaNetworkListSchemaResponseTransformer(data);
  return data;
};

export const listNetworkingDatumapisComV1AlphaSubnetClaimForAllNamespacesResponseTransformer =
  async (
    data: any
  ): Promise<ListNetworkingDatumapisComV1AlphaSubnetClaimForAllNamespacesResponse> => {
    data = comDatumapisNetworkingV1AlphaSubnetClaimListSchemaResponseTransformer(data);
    return data;
  };

export const listNetworkingDatumapisComV1AlphaSubnetForAllNamespacesResponseTransformer = async (
  data: any
): Promise<ListNetworkingDatumapisComV1AlphaSubnetForAllNamespacesResponse> => {
  data = comDatumapisNetworkingV1AlphaSubnetListSchemaResponseTransformer(data);
  return data;
};
