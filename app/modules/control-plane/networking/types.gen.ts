// This file is auto-generated by @hey-api/openapi-ts

/**
 * Domain represents a domain name in the Datum system
 */
export type ComDatumapisNetworkingV1AlphaDomain = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
  /**
   * DomainSpec defines the desired state of Domain
   */
  spec?: {
    /**
     * DomainName is the fully qualified domain name (FQDN) to be managed
     */
    domainName: string;
  };
  /**
   * DomainStatus defines the observed state of Domain
   */
  status?: {
    conditions?: Array<{
      /**
       * lastTransitionTime is the last time the condition transitioned from one status to another.
       * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
       */
      lastTransitionTime: Date;
      /**
       * message is a human readable message indicating details about the transition.
       * This may be an empty string.
       */
      message: string;
      /**
       * observedGeneration represents the .metadata.generation that the condition was set based upon.
       * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
       * with respect to the current state of the instance.
       */
      observedGeneration?: bigint;
      /**
       * reason contains a programmatic identifier indicating the reason for the condition's last transition.
       * Producers of specific condition types may define expected values and meanings for this field,
       * and whether the values are considered a guaranteed API.
       * The value should be a CamelCase string.
       * This field may not be empty.
       */
      reason: string;
      /**
       * status of the condition, one of True, False, Unknown.
       */
      status: 'True' | 'False' | 'Unknown';
      /**
       * type of condition in CamelCase or in foo.example.com/CamelCase.
       */
      type: string;
    }>;
    /**
     * DomainRegistrarStatus represents the registrar information for a domain
     */
    registrar?: {
      clientStatusCodes?: Array<string>;
      createdDate?: string;
      /**
       * DNSSECStatus represents the DNSSEC status of a domain
       */
      dnssec?: {
        signed: boolean;
      };
      expirationDate?: string;
      ianaID?: string;
      ianaName?: string;
      modifiedDate?: string;
      nameservers?: Array<string>;
      serverStatusCodes?: Array<string>;
    };
    /**
     * DomainVerificationStatus represents the verification status of a domain
     */
    verification?: {
      requiredDNSRecords?: Array<{
        content: string;
        name: string;
        type: string;
      }>;
    };
  };
};

/**
 * DomainList is a list of Domain
 */
export type ComDatumapisNetworkingV1AlphaDomainList = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * List of domains. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
   */
  items: Array<ComDatumapisNetworkingV1AlphaDomain>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ListMeta;
};

/**
 * An HTTPProxy builds on top of Gateway API resources to provide a more convenient
 * method to manage simple reverse proxy use cases.
 */
export type ComDatumapisNetworkingV1AlphaHttpProxy = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
  /**
   * Spec defines the desired state of an HTTPProxy.
   */
  spec: {
    /**
     * Rules are a list of HTTP matchers, filters and actions.
     */
    rules: Array<{
      /**
       * Backends defines the backend(s) where matching requests should be
       * sent.
       *
       * Note: While this field is a list, only a single element is permitted at
       * this time due to underlying Gateway limitations. Once addressed, MaxItems
       * will be increased to allow for multiple backends on any given route.
       */
      backends?: Array<{
        /**
         * Endpoint for the backend. Must be a valid URL.
         *
         * Supports http and https protocols, IPs or DNS addresses in the host, custom
         * ports, and paths.
         */
        endpoint: string;
        /**
         * Filters defined at this level should be executed if and only if the
         * request is being forwarded to the backend defined here.
         */
        filters?: Array<{
          /**
           * ExtensionRef is an optional, implementation-specific extension to the
           * "filter" behavior.  For example, resource "myroutefilter" in group
           * "networking.example.net"). ExtensionRef MUST NOT be used for core and
           * extended filters.
           *
           * This filter can be used multiple times within the same rule.
           *
           * Support: Implementation-specific
           */
          extensionRef?: {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
          };
          /**
           * RequestHeaderModifier defines a schema for a filter that modifies request
           * headers.
           *
           * Support: Core
           */
          requestHeaderModifier?: {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             * GET /foo HTTP/1.1
             * my-header: foo
             *
             * Config:
             * add:
             * - name: "my-header"
             * value: "bar,baz"
             *
             * Output:
             * GET /foo HTTP/1.1
             * my-header: foo,bar,baz
             */
            add?: Array<{
              /**
               * Name is the name of the HTTP Header to be matched. Name matching MUST be
               * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
               *
               * If multiple entries specify equivalent header names, the first entry with
               * an equivalent name MUST be considered for a match. Subsequent entries
               * with an equivalent header name MUST be ignored. Due to the
               * case-insensitivity of header names, "foo" and "Foo" are considered
               * equivalent.
               */
              name: string;
              /**
               * Value is the value of HTTP Header to be matched.
               */
              value: string;
            }>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             * GET /foo HTTP/1.1
             * my-header1: foo
             * my-header2: bar
             * my-header3: baz
             *
             * Config:
             * remove: ["my-header1", "my-header3"]
             *
             * Output:
             * GET /foo HTTP/1.1
             * my-header2: bar
             */
            remove?: Array<string>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             * GET /foo HTTP/1.1
             * my-header: foo
             *
             * Config:
             * set:
             * - name: "my-header"
             * value: "bar"
             *
             * Output:
             * GET /foo HTTP/1.1
             * my-header: bar
             */
            set?: Array<{
              /**
               * Name is the name of the HTTP Header to be matched. Name matching MUST be
               * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
               *
               * If multiple entries specify equivalent header names, the first entry with
               * an equivalent name MUST be considered for a match. Subsequent entries
               * with an equivalent header name MUST be ignored. Due to the
               * case-insensitivity of header names, "foo" and "Foo" are considered
               * equivalent.
               */
              name: string;
              /**
               * Value is the value of HTTP Header to be matched.
               */
              value: string;
            }>;
          };
          /**
           * RequestMirror defines a schema for a filter that mirrors requests.
           * Requests are sent to the specified destination, but responses from
           * that destination are ignored.
           *
           * This filter can be used multiple times within the same rule. Note that
           * not all implementations will be able to support mirroring to multiple
           * backends.
           *
           * Support: Extended
           *
           * <gateway:experimental:validation:XValidation:message="Only one of percent or fraction may be specified in HTTPRequestMirrorFilter",rule="!(has(self.percent) && has(self.fraction))">
           */
          requestMirror?: {
            /**
             * BackendRef references a resource where mirrored requests are sent.
             *
             * Mirrored requests must be sent only to a single destination endpoint
             * within this BackendRef, irrespective of how many endpoints are present
             * within this BackendRef.
             *
             * If the referent cannot be found, this BackendRef is invalid and must be
             * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
             * condition on the Route status is set to `status: False` and not configure
             * this backend in the underlying implementation.
             *
             * If there is a cross-namespace reference to an *existing* object
             * that is not allowed by a ReferenceGrant, the controller must ensure the
             * "ResolvedRefs"  condition on the Route is set to `status: False`,
             * with the "RefNotPermitted" reason and not configure this backend in the
             * underlying implementation.
             *
             * In either error case, the Message of the `ResolvedRefs` Condition
             * should be used to provide more detail about the problem.
             *
             * Support: Extended for Kubernetes Service
             *
             * Support: Implementation-specific for any other resource
             */
            backendRef: {
              /**
               * Group is the group of the referent. For example, "gateway.networking.k8s.io".
               * When unspecified or empty string, core API group is inferred.
               */
              group?: string;
              /**
               * Kind is the Kubernetes resource kind of the referent. For example
               * "Service".
               *
               * Defaults to "Service" when not specified.
               *
               * ExternalName services can refer to CNAME DNS records that may live
               * outside of the cluster and as such are difficult to reason about in
               * terms of conformance. They also may not be safe to forward to (see
               * CVE-2021-25740 for more information). Implementations SHOULD NOT
               * support ExternalName Services.
               *
               * Support: Core (Services with a type other than ExternalName)
               *
               * Support: Implementation-specific (Services with type ExternalName)
               */
              kind?: string;
              /**
               * Name is the name of the referent.
               */
              name: string;
              /**
               * Namespace is the namespace of the backend. When unspecified, the local
               * namespace is inferred.
               *
               * Note that when a namespace different than the local namespace is specified,
               * a ReferenceGrant object is required in the referent namespace to allow that
               * namespace's owner to accept the reference. See the ReferenceGrant
               * documentation for details.
               *
               * Support: Core
               */
              namespace?: string;
              /**
               * Port specifies the destination port number to use for this resource.
               * Port is required when the referent is a Kubernetes Service. In this
               * case, the port number is the service port number, not the target port.
               * For other resources, destination port might be derived from the referent
               * resource or this field.
               */
              port?: number;
            };
            /**
             * Fraction represents the fraction of requests that should be
             * mirrored to BackendRef.
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             *
             * <gateway:experimental>
             */
            fraction?: {
              denominator?: number;
              numerator: number;
            };
            /**
             * Percent represents the percentage of requests that should be
             * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
             * requests) and its maximum value is 100 (indicating 100% of requests).
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             *
             * <gateway:experimental>
             */
            percent?: number;
          };
          /**
           * RequestRedirect defines a schema for a filter that responds to the
           * request with an HTTP redirection.
           *
           * Support: Core
           */
          requestRedirect?: {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname?: string;
            /**
             * Path defines parameters used to modify the path of the incoming request.
             * The modified path is then used to construct the `Location` header. When
             * empty, the request path is used as-is.
             *
             * Support: Extended
             */
            path?: {
              /**
               * ReplaceFullPath specifies the value with which to replace the full path
               * of a request during a rewrite or redirect.
               */
              replaceFullPath?: string;
              /**
               * ReplacePrefixMatch specifies the value with which to replace the prefix
               * match of a request during a rewrite or redirect. For example, a request
               * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
               * of "/xyz" would be modified to "/xyz/bar".
               *
               * Note that this matches the behavior of the PathPrefix match type. This
               * matches full path elements. A path element refers to the list of labels
               * in the path split by the `/` separator. When specified, a trailing `/` is
               * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
               * match the prefix `/abc`, but the path `/abcd` would not.
               *
               * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
               * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
               * the implementation setting the Accepted Condition for the Route to `status: False`.
               *
               * Request Path | Prefix Match | Replace Prefix | Modified Path
               */
              replacePrefixMatch?: string;
              /**
               * Type defines the type of path modifier. Additional types may be
               * added in a future release of the API.
               *
               * Note that values may be added to this enum, implementations
               * must ensure that unknown values will not cause a crash.
               *
               * Unknown values here must result in the implementation setting the
               * Accepted Condition for the Route to `status: False`, with a
               * Reason of `UnsupportedValue`.
               */
              type: 'ReplaceFullPath' | 'ReplacePrefixMatch';
            };
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             * port associated with the redirect scheme. Specifically "http" to port 80
             * and "https" to port 443. If the redirect scheme does not have a
             * well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             * Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             * the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             * the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port?: number;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme?: 'http' | 'https';
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode?: 301 | 302;
          };
          /**
           * ResponseHeaderModifier defines a schema for a filter that modifies response
           * headers.
           *
           * Support: Extended
           */
          responseHeaderModifier?: {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             * GET /foo HTTP/1.1
             * my-header: foo
             *
             * Config:
             * add:
             * - name: "my-header"
             * value: "bar,baz"
             *
             * Output:
             * GET /foo HTTP/1.1
             * my-header: foo,bar,baz
             */
            add?: Array<{
              /**
               * Name is the name of the HTTP Header to be matched. Name matching MUST be
               * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
               *
               * If multiple entries specify equivalent header names, the first entry with
               * an equivalent name MUST be considered for a match. Subsequent entries
               * with an equivalent header name MUST be ignored. Due to the
               * case-insensitivity of header names, "foo" and "Foo" are considered
               * equivalent.
               */
              name: string;
              /**
               * Value is the value of HTTP Header to be matched.
               */
              value: string;
            }>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             * GET /foo HTTP/1.1
             * my-header1: foo
             * my-header2: bar
             * my-header3: baz
             *
             * Config:
             * remove: ["my-header1", "my-header3"]
             *
             * Output:
             * GET /foo HTTP/1.1
             * my-header2: bar
             */
            remove?: Array<string>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             * GET /foo HTTP/1.1
             * my-header: foo
             *
             * Config:
             * set:
             * - name: "my-header"
             * value: "bar"
             *
             * Output:
             * GET /foo HTTP/1.1
             * my-header: bar
             */
            set?: Array<{
              /**
               * Name is the name of the HTTP Header to be matched. Name matching MUST be
               * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
               *
               * If multiple entries specify equivalent header names, the first entry with
               * an equivalent name MUST be considered for a match. Subsequent entries
               * with an equivalent header name MUST be ignored. Due to the
               * case-insensitivity of header names, "foo" and "Foo" are considered
               * equivalent.
               */
              name: string;
              /**
               * Value is the value of HTTP Header to be matched.
               */
              value: string;
            }>;
          };
          /**
           * Type identifies the type of filter to apply. As with other API fields,
           * types are classified into three conformance levels:
           *
           * - Core: Filter types and their corresponding configuration defined by
           * "Support: Core" in this package, e.g. "RequestHeaderModifier". All
           * implementations must support core filters.
           *
           * - Extended: Filter types and their corresponding configuration defined by
           * "Support: Extended" in this package, e.g. "RequestMirror". Implementers
           * are encouraged to support extended filters.
           *
           * - Implementation-specific: Filters that are defined and supported by
           * specific vendors.
           * In the future, filters showing convergence in behavior across multiple
           * implementations will be considered for inclusion in extended or core
           * conformance levels. Filter-specific configuration for such filters
           * is specified using the ExtensionRef field. `Type` should be set to
           * "ExtensionRef" for custom filters.
           *
           * Implementers are encouraged to define custom implementation types to
           * extend the core API with implementation-specific behavior.
           *
           * If a reference to a custom filter type cannot be resolved, the filter
           * MUST NOT be skipped. Instead, requests that would have been processed by
           * that filter MUST receive a HTTP error response.
           *
           * Note that values may be added to this enum, implementations
           * must ensure that unknown values will not cause a crash.
           *
           * Unknown values here must result in the implementation setting the
           * Accepted Condition for the Route to `status: False`, with a
           * Reason of `UnsupportedValue`.
           */
          type:
            | 'RequestHeaderModifier'
            | 'ResponseHeaderModifier'
            | 'RequestMirror'
            | 'RequestRedirect'
            | 'URLRewrite'
            | 'ExtensionRef';
          /**
           * URLRewrite defines a schema for a filter that modifies a request during forwarding.
           *
           * Support: Extended
           */
          urlRewrite?: {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname?: string;
            /**
             * Path defines a path rewrite.
             *
             * Support: Extended
             */
            path?: {
              /**
               * ReplaceFullPath specifies the value with which to replace the full path
               * of a request during a rewrite or redirect.
               */
              replaceFullPath?: string;
              /**
               * ReplacePrefixMatch specifies the value with which to replace the prefix
               * match of a request during a rewrite or redirect. For example, a request
               * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
               * of "/xyz" would be modified to "/xyz/bar".
               *
               * Note that this matches the behavior of the PathPrefix match type. This
               * matches full path elements. A path element refers to the list of labels
               * in the path split by the `/` separator. When specified, a trailing `/` is
               * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
               * match the prefix `/abc`, but the path `/abcd` would not.
               *
               * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
               * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
               * the implementation setting the Accepted Condition for the Route to `status: False`.
               *
               * Request Path | Prefix Match | Replace Prefix | Modified Path
               */
              replacePrefixMatch?: string;
              /**
               * Type defines the type of path modifier. Additional types may be
               * added in a future release of the API.
               *
               * Note that values may be added to this enum, implementations
               * must ensure that unknown values will not cause a crash.
               *
               * Unknown values here must result in the implementation setting the
               * Accepted Condition for the Route to `status: False`, with a
               * Reason of `UnsupportedValue`.
               */
              type: 'ReplaceFullPath' | 'ReplacePrefixMatch';
            };
          };
        }>;
      }>;
      /**
       * Filters define the filters that are applied to requests that match
       * this rule.
       *
       * See documentation for the `filters` field in the `HTTPRouteRule` type at
       * https://gateway-api.sigs.k8s.io/reference/spec/#httprouterule
       */
      filters?: Array<{
        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        extensionRef?: {
          /**
           * Group is the group of the referent. For example, "gateway.networking.k8s.io".
           * When unspecified or empty string, core API group is inferred.
           */
          group: string;
          /**
           * Kind is kind of the referent. For example "HTTPRoute" or "Service".
           */
          kind: string;
          /**
           * Name is the name of the referent.
           */
          name: string;
        };
        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        requestHeaderModifier?: {
          /**
           * Add adds the given header(s) (name, value) to the request
           * before the action. It appends to any existing values associated
           * with the header name.
           *
           * Input:
           * GET /foo HTTP/1.1
           * my-header: foo
           *
           * Config:
           * add:
           * - name: "my-header"
           * value: "bar,baz"
           *
           * Output:
           * GET /foo HTTP/1.1
           * my-header: foo,bar,baz
           */
          add?: Array<{
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
          }>;
          /**
           * Remove the given header(s) from the HTTP request before the action. The
           * value of Remove is a list of HTTP header names. Note that the header
           * names are case-insensitive (see
           * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
           *
           * Input:
           * GET /foo HTTP/1.1
           * my-header1: foo
           * my-header2: bar
           * my-header3: baz
           *
           * Config:
           * remove: ["my-header1", "my-header3"]
           *
           * Output:
           * GET /foo HTTP/1.1
           * my-header2: bar
           */
          remove?: Array<string>;
          /**
           * Set overwrites the request with the given header (name, value)
           * before the action.
           *
           * Input:
           * GET /foo HTTP/1.1
           * my-header: foo
           *
           * Config:
           * set:
           * - name: "my-header"
           * value: "bar"
           *
           * Output:
           * GET /foo HTTP/1.1
           * my-header: bar
           */
          set?: Array<{
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
          }>;
        };
        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         *
         * <gateway:experimental:validation:XValidation:message="Only one of percent or fraction may be specified in HTTPRequestMirrorFilter",rule="!(has(self.percent) && has(self.fraction))">
         */
        requestMirror?: {
          /**
           * BackendRef references a resource where mirrored requests are sent.
           *
           * Mirrored requests must be sent only to a single destination endpoint
           * within this BackendRef, irrespective of how many endpoints are present
           * within this BackendRef.
           *
           * If the referent cannot be found, this BackendRef is invalid and must be
           * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
           * condition on the Route status is set to `status: False` and not configure
           * this backend in the underlying implementation.
           *
           * If there is a cross-namespace reference to an *existing* object
           * that is not allowed by a ReferenceGrant, the controller must ensure the
           * "ResolvedRefs"  condition on the Route is set to `status: False`,
           * with the "RefNotPermitted" reason and not configure this backend in the
           * underlying implementation.
           *
           * In either error case, the Message of the `ResolvedRefs` Condition
           * should be used to provide more detail about the problem.
           *
           * Support: Extended for Kubernetes Service
           *
           * Support: Implementation-specific for any other resource
           */
          backendRef: {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: number;
          };
          /**
           * Fraction represents the fraction of requests that should be
           * mirrored to BackendRef.
           *
           * Only one of Fraction or Percent may be specified. If neither field
           * is specified, 100% of requests will be mirrored.
           *
           * <gateway:experimental>
           */
          fraction?: {
            denominator?: number;
            numerator: number;
          };
          /**
           * Percent represents the percentage of requests that should be
           * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
           * requests) and its maximum value is 100 (indicating 100% of requests).
           *
           * Only one of Fraction or Percent may be specified. If neither field
           * is specified, 100% of requests will be mirrored.
           *
           * <gateway:experimental>
           */
          percent?: number;
        };
        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        requestRedirect?: {
          /**
           * Hostname is the hostname to be used in the value of the `Location`
           * header in the response.
           * When empty, the hostname in the `Host` header of the request is used.
           *
           * Support: Core
           */
          hostname?: string;
          /**
           * Path defines parameters used to modify the path of the incoming request.
           * The modified path is then used to construct the `Location` header. When
           * empty, the request path is used as-is.
           *
           * Support: Extended
           */
          path?: {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: 'ReplaceFullPath' | 'ReplacePrefixMatch';
          };
          /**
           * Port is the port to be used in the value of the `Location`
           * header in the response.
           *
           * If no port is specified, the redirect port MUST be derived using the
           * following rules:
           *
           * * If redirect scheme is not-empty, the redirect port MUST be the well-known
           * port associated with the redirect scheme. Specifically "http" to port 80
           * and "https" to port 443. If the redirect scheme does not have a
           * well-known port, the listener port of the Gateway SHOULD be used.
           * * If redirect scheme is empty, the redirect port MUST be the Gateway
           * Listener port.
           *
           * Implementations SHOULD NOT add the port number in the 'Location'
           * header in the following cases:
           *
           * * A Location header that will use HTTP (whether that is determined via
           * the Listener protocol or the Scheme field) _and_ use port 80.
           * * A Location header that will use HTTPS (whether that is determined via
           * the Listener protocol or the Scheme field) _and_ use port 443.
           *
           * Support: Extended
           */
          port?: number;
          /**
           * Scheme is the scheme to be used in the value of the `Location` header in
           * the response. When empty, the scheme of the request is used.
           *
           * Scheme redirects can affect the port of the redirect, for more information,
           * refer to the documentation for the port field of this filter.
           *
           * Note that values may be added to this enum, implementations
           * must ensure that unknown values will not cause a crash.
           *
           * Unknown values here must result in the implementation setting the
           * Accepted Condition for the Route to `status: False`, with a
           * Reason of `UnsupportedValue`.
           *
           * Support: Extended
           */
          scheme?: 'http' | 'https';
          /**
           * StatusCode is the HTTP status code to be used in response.
           *
           * Note that values may be added to this enum, implementations
           * must ensure that unknown values will not cause a crash.
           *
           * Unknown values here must result in the implementation setting the
           * Accepted Condition for the Route to `status: False`, with a
           * Reason of `UnsupportedValue`.
           *
           * Support: Core
           */
          statusCode?: 301 | 302;
        };
        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        responseHeaderModifier?: {
          /**
           * Add adds the given header(s) (name, value) to the request
           * before the action. It appends to any existing values associated
           * with the header name.
           *
           * Input:
           * GET /foo HTTP/1.1
           * my-header: foo
           *
           * Config:
           * add:
           * - name: "my-header"
           * value: "bar,baz"
           *
           * Output:
           * GET /foo HTTP/1.1
           * my-header: foo,bar,baz
           */
          add?: Array<{
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
          }>;
          /**
           * Remove the given header(s) from the HTTP request before the action. The
           * value of Remove is a list of HTTP header names. Note that the header
           * names are case-insensitive (see
           * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
           *
           * Input:
           * GET /foo HTTP/1.1
           * my-header1: foo
           * my-header2: bar
           * my-header3: baz
           *
           * Config:
           * remove: ["my-header1", "my-header3"]
           *
           * Output:
           * GET /foo HTTP/1.1
           * my-header2: bar
           */
          remove?: Array<string>;
          /**
           * Set overwrites the request with the given header (name, value)
           * before the action.
           *
           * Input:
           * GET /foo HTTP/1.1
           * my-header: foo
           *
           * Config:
           * set:
           * - name: "my-header"
           * value: "bar"
           *
           * Output:
           * GET /foo HTTP/1.1
           * my-header: bar
           */
          set?: Array<{
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
          }>;
        };
        /**
         * Type identifies the type of filter to apply. As with other API fields,
         * types are classified into three conformance levels:
         *
         * - Core: Filter types and their corresponding configuration defined by
         * "Support: Core" in this package, e.g. "RequestHeaderModifier". All
         * implementations must support core filters.
         *
         * - Extended: Filter types and their corresponding configuration defined by
         * "Support: Extended" in this package, e.g. "RequestMirror". Implementers
         * are encouraged to support extended filters.
         *
         * - Implementation-specific: Filters that are defined and supported by
         * specific vendors.
         * In the future, filters showing convergence in behavior across multiple
         * implementations will be considered for inclusion in extended or core
         * conformance levels. Filter-specific configuration for such filters
         * is specified using the ExtensionRef field. `Type` should be set to
         * "ExtensionRef" for custom filters.
         *
         * Implementers are encouraged to define custom implementation types to
         * extend the core API with implementation-specific behavior.
         *
         * If a reference to a custom filter type cannot be resolved, the filter
         * MUST NOT be skipped. Instead, requests that would have been processed by
         * that filter MUST receive a HTTP error response.
         *
         * Note that values may be added to this enum, implementations
         * must ensure that unknown values will not cause a crash.
         *
         * Unknown values here must result in the implementation setting the
         * Accepted Condition for the Route to `status: False`, with a
         * Reason of `UnsupportedValue`.
         */
        type:
          | 'RequestHeaderModifier'
          | 'ResponseHeaderModifier'
          | 'RequestMirror'
          | 'RequestRedirect'
          | 'URLRewrite'
          | 'ExtensionRef';
        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        urlRewrite?: {
          /**
           * Hostname is the value to be used to replace the Host header value during
           * forwarding.
           *
           * Support: Extended
           */
          hostname?: string;
          /**
           * Path defines a path rewrite.
           *
           * Support: Extended
           */
          path?: {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: 'ReplaceFullPath' | 'ReplacePrefixMatch';
          };
        };
      }>;
      /**
       * Matches define conditions used for matching the rule against incoming
       * HTTP requests. Each match is independent, i.e. this rule will be matched
       * if **any** one of the matches is satisfied.
       *
       * See documentation for the `matches` field in the `HTTPRouteRule` type at
       * https://gateway-api.sigs.k8s.io/reference/spec/#httprouterule
       */
      matches?: Array<{
        /**
         * Headers specifies HTTP request header matchers. Multiple match values are
         * ANDed together, meaning, a request must match all the specified headers
         * to select the route.
         */
        headers?: Array<{
          /**
           * Name is the name of the HTTP Header to be matched. Name matching MUST be
           * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
           *
           * If multiple entries specify equivalent header names, only the first
           * entry with an equivalent name MUST be considered for a match. Subsequent
           * entries with an equivalent header name MUST be ignored. Due to the
           * case-insensitivity of header names, "foo" and "Foo" are considered
           * equivalent.
           *
           * When a header is repeated in an HTTP request, it is
           * implementation-specific behavior as to how this is represented.
           * Generally, proxies should follow the guidance from the RFC:
           * https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
           * processing a repeated header, with special handling for "Set-Cookie".
           */
          name: string;
          /**
           * Type specifies how to match against the value of the header.
           *
           * Support: Core (Exact)
           *
           * Support: Implementation-specific (RegularExpression)
           *
           * Since RegularExpression HeaderMatchType has implementation-specific
           * conformance, implementations can support POSIX, PCRE or any other dialects
           * of regular expressions. Please read the implementation's documentation to
           * determine the supported dialect.
           */
          type?: 'Exact' | 'RegularExpression';
          /**
           * Value is the value of HTTP Header to be matched.
           */
          value: string;
        }>;
        /**
         * Method specifies HTTP method matcher.
         * When specified, this route will be matched only if the request has the
         * specified method.
         *
         * Support: Extended
         */
        method?:
          | 'GET'
          | 'HEAD'
          | 'POST'
          | 'PUT'
          | 'DELETE'
          | 'CONNECT'
          | 'OPTIONS'
          | 'TRACE'
          | 'PATCH';
        /**
         * Path specifies a HTTP request path matcher. If this field is not
         * specified, a default prefix match on the "/" path is provided.
         */
        path?: {
          /**
           * Type specifies how to match against the path Value.
           *
           * Support: Core (Exact, PathPrefix)
           *
           * Support: Implementation-specific (RegularExpression)
           */
          type?: 'Exact' | 'PathPrefix' | 'RegularExpression';
          /**
           * Value of the HTTP path to match against.
           */
          value?: string;
        };
        /**
         * QueryParams specifies HTTP query parameter matchers. Multiple match
         * values are ANDed together, meaning, a request must match all the
         * specified query parameters to select the route.
         *
         * Support: Extended
         */
        queryParams?: Array<{
          /**
           * Name is the name of the HTTP query param to be matched. This must be an
           * exact string match. (See
           * https://tools.ietf.org/html/rfc7230#section-2.7.3).
           *
           * If multiple entries specify equivalent query param names, only the first
           * entry with an equivalent name MUST be considered for a match. Subsequent
           * entries with an equivalent query param name MUST be ignored.
           *
           * If a query param is repeated in an HTTP request, the behavior is
           * purposely left undefined, since different data planes have different
           * capabilities. However, it is *recommended* that implementations should
           * match against the first value of the param if the data plane supports it,
           * as this behavior is expected in other load balancing contexts outside of
           * the Gateway API.
           *
           * Users SHOULD NOT route traffic based on repeated query params to guard
           * themselves against potential differences in the implementations.
           */
          name: string;
          /**
           * Type specifies how to match against the value of the query parameter.
           *
           * Support: Extended (Exact)
           *
           * Support: Implementation-specific (RegularExpression)
           *
           * Since RegularExpression QueryParamMatchType has Implementation-specific
           * conformance, implementations can support POSIX, PCRE or any other
           * dialects of regular expressions. Please read the implementation's
           * documentation to determine the supported dialect.
           */
          type?: 'Exact' | 'RegularExpression';
          /**
           * Value is the value of HTTP query param to be matched.
           */
          value: string;
        }>;
      }>;
      /**
       * Name is the name of the route rule. This name MUST be unique within a Route
       * if it is set.
       */
      name?: string;
    }>;
  };
  /**
   * Status defines the current state of an HTTPProxy.
   */
  status?: {
    /**
     * Addresses lists the network addresses that have been bound to the
     * HTTPProxy.
     *
     * This field will not contain custom hostnames defined in the HTTPProxy. See
     * the `hostnames` field
     */
    addresses?: Array<{
      /**
       * Type of the address.
       */
      type?: string;
      /**
       * Value of the address. The validity of the values will depend
       * on the type and support by the controller.
       *
       * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
       */
      value: string;
    }>;
    /**
     * Conditions describe the current conditions of the HTTPProxy.
     */
    conditions?: Array<{
      /**
       * lastTransitionTime is the last time the condition transitioned from one status to another.
       * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
       */
      lastTransitionTime: Date;
      /**
       * message is a human readable message indicating details about the transition.
       * This may be an empty string.
       */
      message: string;
      /**
       * observedGeneration represents the .metadata.generation that the condition was set based upon.
       * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
       * with respect to the current state of the instance.
       */
      observedGeneration?: bigint;
      /**
       * reason contains a programmatic identifier indicating the reason for the condition's last transition.
       * Producers of specific condition types may define expected values and meanings for this field,
       * and whether the values are considered a guaranteed API.
       * The value should be a CamelCase string.
       * This field may not be empty.
       */
      reason: string;
      /**
       * status of the condition, one of True, False, Unknown.
       */
      status: 'True' | 'False' | 'Unknown';
      /**
       * type of condition in CamelCase or in foo.example.com/CamelCase.
       */
      type: string;
    }>;
    /**
     * Hostnames lists the hostnames that have been bound to the HTTPProxy.
     *
     * If this list does not match that defined in the HTTPProxy, see the
     * `Programmed` condition message for details.
     */
    hostnames?: Array<string>;
  };
};

/**
 * HTTPProxyList is a list of HTTPProxy
 */
export type ComDatumapisNetworkingV1AlphaHttpProxyList = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * List of httpproxies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
   */
  items: Array<ComDatumapisNetworkingV1AlphaHttpProxy>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ListMeta;
};

/**
 * Location is the Schema for the locations API.
 */
export type ComDatumapisNetworkingV1AlphaLocation = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
  /**
   * LocationSpec defines the desired state of Location.
   */
  spec?: {
    /**
     * The location class that indicates control plane behavior of entities
     * associated with the location.
     *
     * Valid values are:
     * - datum-managed
     * - self-managed
     */
    locationClassName: string;
    /**
     * The location provider
     */
    provider: {
      gcp?: {
        /**
         * The GCP project servicing the location
         *
         * For locations with the class of `datum-managed`, a service account will be
         * required for each unique GCP project ID across all locations registered in a
         * namespace.
         */
        projectId: string;
        /**
         * The GCP region servicing the location
         */
        region: string;
        /**
         * The GCP zone servicing the location
         */
        zone: string;
      };
    };
    /**
     * The topology of the location
     *
     * This may contain arbitrary topology keys. Some keys may be well known, such
     * as:
     * - topology.datum.net/city-code
     */
    topology: {
      [key: string]: string;
    };
  };
  /**
   * LocationStatus defines the observed state of Location.
   */
  status?: {
    /**
     * Represents the observations of a location's current state.
     */
    conditions?: Array<{
      /**
       * lastTransitionTime is the last time the condition transitioned from one status to another.
       * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
       */
      lastTransitionTime: Date;
      /**
       * message is a human readable message indicating details about the transition.
       * This may be an empty string.
       */
      message: string;
      /**
       * observedGeneration represents the .metadata.generation that the condition was set based upon.
       * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
       * with respect to the current state of the instance.
       */
      observedGeneration?: bigint;
      /**
       * reason contains a programmatic identifier indicating the reason for the condition's last transition.
       * Producers of specific condition types may define expected values and meanings for this field,
       * and whether the values are considered a guaranteed API.
       * The value should be a CamelCase string.
       * This field may not be empty.
       */
      reason: string;
      /**
       * status of the condition, one of True, False, Unknown.
       */
      status: 'True' | 'False' | 'Unknown';
      /**
       * type of condition in CamelCase or in foo.example.com/CamelCase.
       */
      type: string;
    }>;
  };
};

/**
 * LocationList is a list of Location
 */
export type ComDatumapisNetworkingV1AlphaLocationList = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * List of locations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
   */
  items: Array<ComDatumapisNetworkingV1AlphaLocation>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ListMeta;
};

/**
 * Network is the Schema for the networks API
 */
export type ComDatumapisNetworkingV1AlphaNetwork = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
  /**
   * NetworkSpec defines the desired state of a Network
   */
  spec: {
    /**
     * IP Families to permit on a network. Defaults to IPv4.
     */
    ipFamilies?: Array<'IPv4' | 'IPv6'>;
    /**
     * IPAM settings for the network.
     */
    ipam: {
      /**
       * IPv4 range to use in auto mode networks. Defaults to 10.128.0.0/9.
       */
      ipv4Range?: string;
      /**
       * IPv6 range to use in auto mode networks. Defaults to a /48 allocated from `fd20::/20`.
       */
      ipv6Range?: string;
      /**
       * IPAM mode
       */
      mode: 'Auto' | 'Policy';
    };
    /**
     * Network MTU. May be between 1300 and 8856.
     */
    mtu?: number;
  };
  /**
   * NetworkStatus defines the observed state of Network
   */
  status?: {
    /**
     * Represents the observations of a network's current state.
     */
    conditions?: Array<{
      /**
       * lastTransitionTime is the last time the condition transitioned from one status to another.
       * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
       */
      lastTransitionTime: Date;
      /**
       * message is a human readable message indicating details about the transition.
       * This may be an empty string.
       */
      message: string;
      /**
       * observedGeneration represents the .metadata.generation that the condition was set based upon.
       * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
       * with respect to the current state of the instance.
       */
      observedGeneration?: bigint;
      /**
       * reason contains a programmatic identifier indicating the reason for the condition's last transition.
       * Producers of specific condition types may define expected values and meanings for this field,
       * and whether the values are considered a guaranteed API.
       * The value should be a CamelCase string.
       * This field may not be empty.
       */
      reason: string;
      /**
       * status of the condition, one of True, False, Unknown.
       */
      status: 'True' | 'False' | 'Unknown';
      /**
       * type of condition in CamelCase or in foo.example.com/CamelCase.
       */
      type: string;
    }>;
  };
};

/**
 * NetworkBinding is the Schema for the networkbindings API
 */
export type ComDatumapisNetworkingV1AlphaNetworkBinding = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
  /**
   * NetworkBindingSpec defines the desired state of NetworkBinding
   */
  spec: {
    /**
     * The location of where a network binding exists.
     */
    location: {
      /**
       * Name of a datum location
       */
      name: string;
      /**
       * Namespace for the datum location
       */
      namespace: string;
    };
    /**
     * The network that the binding is for.
     */
    network: {
      /**
       * The network name
       */
      name: string;
      /**
       * The network namespace.
       *
       * Defaults to the namespace for the type the reference is embedded in.
       */
      namespace?: string;
    };
  };
  /**
   * NetworkBindingStatus defines the observed state of NetworkBinding
   */
  status?: {
    /**
     * Represents the observations of a network binding's current state.
     */
    conditions?: Array<{
      /**
       * lastTransitionTime is the last time the condition transitioned from one status to another.
       * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
       */
      lastTransitionTime: Date;
      /**
       * message is a human readable message indicating details about the transition.
       * This may be an empty string.
       */
      message: string;
      /**
       * observedGeneration represents the .metadata.generation that the condition was set based upon.
       * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
       * with respect to the current state of the instance.
       */
      observedGeneration?: bigint;
      /**
       * reason contains a programmatic identifier indicating the reason for the condition's last transition.
       * Producers of specific condition types may define expected values and meanings for this field,
       * and whether the values are considered a guaranteed API.
       * The value should be a CamelCase string.
       * This field may not be empty.
       */
      reason: string;
      /**
       * status of the condition, one of True, False, Unknown.
       */
      status: 'True' | 'False' | 'Unknown';
      /**
       * type of condition in CamelCase or in foo.example.com/CamelCase.
       */
      type: string;
    }>;
    networkContextRef?: {
      /**
       * The network context name
       */
      name: string;
      /**
       * The network context namespace
       */
      namespace: string;
    };
  };
};

/**
 * NetworkBindingList is a list of NetworkBinding
 */
export type ComDatumapisNetworkingV1AlphaNetworkBindingList = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * List of networkbindings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
   */
  items: Array<ComDatumapisNetworkingV1AlphaNetworkBinding>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ListMeta;
};

/**
 * NetworkContext is the Schema for the networkcontexts API
 */
export type ComDatumapisNetworkingV1AlphaNetworkContext = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
  /**
   * NetworkContextSpec defines the desired state of NetworkContext
   */
  spec?: {
    /**
     * The location of where a network context exists.
     */
    location: {
      /**
       * Name of a datum location
       */
      name: string;
      /**
       * Namespace for the datum location
       */
      namespace: string;
    };
    /**
     * The attached network
     */
    network: {
      /**
       * The network name
       */
      name: string;
    };
  };
  /**
   * NetworkContextStatus defines the observed state of NetworkContext
   */
  status?: {
    /**
     * Represents the observations of a network context's current state.
     */
    conditions?: Array<{
      /**
       * lastTransitionTime is the last time the condition transitioned from one status to another.
       * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
       */
      lastTransitionTime: Date;
      /**
       * message is a human readable message indicating details about the transition.
       * This may be an empty string.
       */
      message: string;
      /**
       * observedGeneration represents the .metadata.generation that the condition was set based upon.
       * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
       * with respect to the current state of the instance.
       */
      observedGeneration?: bigint;
      /**
       * reason contains a programmatic identifier indicating the reason for the condition's last transition.
       * Producers of specific condition types may define expected values and meanings for this field,
       * and whether the values are considered a guaranteed API.
       * The value should be a CamelCase string.
       * This field may not be empty.
       */
      reason: string;
      /**
       * status of the condition, one of True, False, Unknown.
       */
      status: 'True' | 'False' | 'Unknown';
      /**
       * type of condition in CamelCase or in foo.example.com/CamelCase.
       */
      type: string;
    }>;
  };
};

/**
 * NetworkContextList is a list of NetworkContext
 */
export type ComDatumapisNetworkingV1AlphaNetworkContextList = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * List of networkcontexts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
   */
  items: Array<ComDatumapisNetworkingV1AlphaNetworkContext>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ListMeta;
};

/**
 * NetworkList is a list of Network
 */
export type ComDatumapisNetworkingV1AlphaNetworkList = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * List of networks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
   */
  items: Array<ComDatumapisNetworkingV1AlphaNetwork>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ListMeta;
};

/**
 * NetworkPolicy is the Schema for the networkpolicies API
 */
export type ComDatumapisNetworkingV1AlphaNetworkPolicy = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
  /**
   * NetworkPolicySpec defines the desired state of NetworkPolicy
   */
  spec?: {
    [key: string]: unknown;
  };
  /**
   * NetworkPolicyStatus defines the observed state of NetworkPolicy
   */
  status?: {
    [key: string]: unknown;
  };
};

/**
 * NetworkPolicyList is a list of NetworkPolicy
 */
export type ComDatumapisNetworkingV1AlphaNetworkPolicyList = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * List of networkpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
   */
  items: Array<ComDatumapisNetworkingV1AlphaNetworkPolicy>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ListMeta;
};

/**
 * Subnet is the Schema for the subnets API
 */
export type ComDatumapisNetworkingV1AlphaSubnet = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
  /**
   * SubnetSpec defines the desired state of Subnet
   */
  spec?: {
    /**
     * The IP family of a subnet
     */
    ipFamily: 'IPv4' | 'IPv6';
    /**
     * The location which a subnet is associated with
     */
    location: {
      /**
       * Name of a datum location
       */
      name: string;
      /**
       * Namespace for the datum location
       */
      namespace: string;
    };
    /**
     * A subnet's network context
     */
    networkContext: {
      /**
       * The network context name
       */
      name: string;
    };
    /**
     * The prefix length of a subnet
     */
    prefixLength: number;
    /**
     * The start address of a subnet
     */
    startAddress: string;
    /**
     * The class of subnet
     */
    subnetClass: string;
  };
  /**
   * SubnetStatus defines the observed state of a Subnet
   */
  status?: {
    /**
     * Represents the observations of a subnet's current state.
     */
    conditions?: Array<{
      /**
       * lastTransitionTime is the last time the condition transitioned from one status to another.
       * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
       */
      lastTransitionTime: Date;
      /**
       * message is a human readable message indicating details about the transition.
       * This may be an empty string.
       */
      message: string;
      /**
       * observedGeneration represents the .metadata.generation that the condition was set based upon.
       * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
       * with respect to the current state of the instance.
       */
      observedGeneration?: bigint;
      /**
       * reason contains a programmatic identifier indicating the reason for the condition's last transition.
       * Producers of specific condition types may define expected values and meanings for this field,
       * and whether the values are considered a guaranteed API.
       * The value should be a CamelCase string.
       * This field may not be empty.
       */
      reason: string;
      /**
       * status of the condition, one of True, False, Unknown.
       */
      status: 'True' | 'False' | 'Unknown';
      /**
       * type of condition in CamelCase or in foo.example.com/CamelCase.
       */
      type: string;
    }>;
    /**
     * The prefix length of a subnet
     */
    prefixLength?: number;
    /**
     * The start address of a subnet
     */
    startAddress?: string;
  };
};

/**
 * SubnetClaim is the Schema for the subnetclaims API
 */
export type ComDatumapisNetworkingV1AlphaSubnetClaim = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
  /**
   * SubnetClaimSpec defines the desired state of SubnetClaim
   */
  spec?: {
    /**
     * The IP family of a subnet claim
     */
    ipFamily: 'IPv4' | 'IPv6';
    /**
     * The location which a subnet claim is associated with
     */
    location: {
      /**
       * Name of a datum location
       */
      name: string;
      /**
       * Namespace for the datum location
       */
      namespace: string;
    };
    /**
     * The network context to claim a subnet in
     */
    networkContext: {
      /**
       * The network context name
       */
      name: string;
    };
    /**
     * The prefix length of a subnet claim
     */
    prefixLength?: number;
    /**
     * The start address of a subnet claim
     */
    startAddress?: string;
    /**
     * The class of subnet required
     */
    subnetClass: string;
  };
  /**
   * SubnetClaimStatus defines the observed state of SubnetClaim
   */
  status?: {
    /**
     * Represents the observations of a subnet claim's current state.
     */
    conditions?: Array<{
      /**
       * lastTransitionTime is the last time the condition transitioned from one status to another.
       * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
       */
      lastTransitionTime: Date;
      /**
       * message is a human readable message indicating details about the transition.
       * This may be an empty string.
       */
      message: string;
      /**
       * observedGeneration represents the .metadata.generation that the condition was set based upon.
       * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
       * with respect to the current state of the instance.
       */
      observedGeneration?: bigint;
      /**
       * reason contains a programmatic identifier indicating the reason for the condition's last transition.
       * Producers of specific condition types may define expected values and meanings for this field,
       * and whether the values are considered a guaranteed API.
       * The value should be a CamelCase string.
       * This field may not be empty.
       */
      reason: string;
      /**
       * status of the condition, one of True, False, Unknown.
       */
      status: 'True' | 'False' | 'Unknown';
      /**
       * type of condition in CamelCase or in foo.example.com/CamelCase.
       */
      type: string;
    }>;
    /**
     * The prefix length of a subnet claim
     */
    prefixLength?: number;
    /**
     * The start address of a subnet claim
     */
    startAddress?: string;
    /**
     * The subnet which has been claimed from
     */
    subnetRef?: {
      name: string;
    };
  };
};

/**
 * SubnetClaimList is a list of SubnetClaim
 */
export type ComDatumapisNetworkingV1AlphaSubnetClaimList = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * List of subnetclaims. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
   */
  items: Array<ComDatumapisNetworkingV1AlphaSubnetClaim>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ListMeta;
};

/**
 * SubnetList is a list of Subnet
 */
export type ComDatumapisNetworkingV1AlphaSubnetList = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * List of subnets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
   */
  items: Array<ComDatumapisNetworkingV1AlphaSubnet>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ListMeta;
};

/**
 * DeleteOptions may be provided when deleting an API object.
 */
export type IoK8sApimachineryPkgApisMetaV1DeleteOptions = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   */
  dryRun?: Array<string>;
  /**
   * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   */
  gracePeriodSeconds?: bigint;
  /**
   * if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
   */
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
   */
  orphanDependents?: boolean;
  /**
   * Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
   */
  preconditions?: IoK8sApimachineryPkgApisMetaV1Preconditions;
  /**
   * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
   */
  propagationPolicy?: string;
};

/**
 * FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
 *
 * Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.
 *
 * The exact format is defined in sigs.k8s.io/structured-merge-diff
 */
export type IoK8sApimachineryPkgApisMetaV1FieldsV1 = {
  [key: string]: unknown;
};

/**
 * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
 */
export type IoK8sApimachineryPkgApisMetaV1ListMeta = {
  /**
   * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
   */
  continue?: string;
  /**
   * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
   */
  remainingItemCount?: bigint;
  /**
   * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   */
  resourceVersion?: string;
  /**
   * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
   */
  selfLink?: string;
};

/**
 * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
 */
export type IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry = {
  /**
   * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
   */
  apiVersion?: string;
  /**
   * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
   */
  fieldsType?: string;
  /**
   * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
   */
  fieldsV1?: IoK8sApimachineryPkgApisMetaV1FieldsV1;
  /**
   * Manager is an identifier of the workflow managing these fields.
   */
  manager?: string;
  /**
   * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
   */
  operation?: string;
  /**
   * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
   */
  subresource?: string;
  /**
   * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
   */
  time?: IoK8sApimachineryPkgApisMetaV1Time;
};

/**
 * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
 */
export type IoK8sApimachineryPkgApisMetaV1ObjectMeta = {
  /**
   * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
   */
  annotations?: {
    [key: string]: string;
  };
  /**
   * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
   *
   * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
   */
  creationTimestamp?: IoK8sApimachineryPkgApisMetaV1Time;
  /**
   * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
   */
  deletionGracePeriodSeconds?: bigint;
  /**
   * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
   *
   * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
   */
  deletionTimestamp?: IoK8sApimachineryPkgApisMetaV1Time;
  /**
   * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
   */
  finalizers?: Array<string>;
  /**
   * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
   *
   * If this field is specified and the generated name exists, the server will return a 409.
   *
   * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
   */
  generateName?: string;
  /**
   * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
   */
  generation?: bigint;
  /**
   * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
   */
  labels?: {
    [key: string]: string;
  };
  /**
   * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
   */
  managedFields?: Array<IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry>;
  /**
   * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
   */
  name?: string;
  /**
   * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
   *
   * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
   */
  namespace?: string;
  /**
   * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
   */
  ownerReferences?: Array<IoK8sApimachineryPkgApisMetaV1OwnerReference>;
  /**
   * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
   *
   * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   */
  resourceVersion?: string;
  /**
   * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
   */
  selfLink?: string;
  /**
   * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
   *
   * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
   */
  uid?: string;
};

/**
 * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
 */
export type IoK8sApimachineryPkgApisMetaV1OwnerReference = {
  /**
   * API version of the referent.
   */
  apiVersion: string;
  /**
   * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
   */
  blockOwnerDeletion?: boolean;
  /**
   * If true, this reference points to the managing controller.
   */
  controller?: boolean;
  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind: string;
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
   */
  name: string;
  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
   */
  uid: string;
};

/**
 * Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.
 */
export type IoK8sApimachineryPkgApisMetaV1Patch = {
  [key: string]: unknown;
};

/**
 * Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
 */
export type IoK8sApimachineryPkgApisMetaV1Preconditions = {
  /**
   * Specifies the target ResourceVersion
   */
  resourceVersion?: string;
  /**
   * Specifies the target UID.
   */
  uid?: string;
};

/**
 * Status is a return value for calls that don't return other objects.
 */
export type IoK8sApimachineryPkgApisMetaV1Status = {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Suggested HTTP return code for this status, 0 if not set.
   */
  code?: number;
  /**
   * Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
   */
  details?: IoK8sApimachineryPkgApisMetaV1StatusDetails;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * A human-readable description of the status of this operation.
   */
  message?: string;
  /**
   * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  metadata?: IoK8sApimachineryPkgApisMetaV1ListMeta;
  /**
   * A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
   */
  reason?: string;
  /**
   * Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
   */
  status?: string;
};

/**
 * StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
 */
export type IoK8sApimachineryPkgApisMetaV1StatusCause = {
  /**
   * The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
   *
   * Examples:
   * "name" - the field "name" on the current resource
   * "items[0].name" - the field "name" on the first array entry in "items"
   */
  field?: string;
  /**
   * A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
   */
  message?: string;
  /**
   * A machine-readable description of the cause of the error. If this value is empty there is no information available.
   */
  reason?: string;
};

/**
 * StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
 */
export type IoK8sApimachineryPkgApisMetaV1StatusDetails = {
  /**
   * The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
   */
  causes?: Array<IoK8sApimachineryPkgApisMetaV1StatusCause>;
  /**
   * The group attribute of the resource associated with the status StatusReason.
   */
  group?: string;
  /**
   * The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  /**
   * The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
   */
  name?: string;
  /**
   * If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
   */
  retryAfterSeconds?: number;
  /**
   * UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
   */
  uid?: string;
};

/**
 * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
 */
export type IoK8sApimachineryPkgApisMetaV1Time = Date;

export type ListNetworkingDatumapisComV1AlphaDomainForAllNamespacesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/domains';
};

export type ListNetworkingDatumapisComV1AlphaDomainForAllNamespacesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaDomainForAllNamespacesResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaDomainList;
};

export type ListNetworkingDatumapisComV1AlphaDomainForAllNamespacesResponse =
  ListNetworkingDatumapisComV1AlphaDomainForAllNamespacesResponses[keyof ListNetworkingDatumapisComV1AlphaDomainForAllNamespacesResponses];

export type ListNetworkingDatumapisComV1AlphaHttpProxyForAllNamespacesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/httpproxies';
};

export type ListNetworkingDatumapisComV1AlphaHttpProxyForAllNamespacesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaHttpProxyForAllNamespacesResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaHttpProxyList;
};

export type ListNetworkingDatumapisComV1AlphaHttpProxyForAllNamespacesResponse =
  ListNetworkingDatumapisComV1AlphaHttpProxyForAllNamespacesResponses[keyof ListNetworkingDatumapisComV1AlphaHttpProxyForAllNamespacesResponses];

export type ListNetworkingDatumapisComV1AlphaLocationForAllNamespacesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/locations';
};

export type ListNetworkingDatumapisComV1AlphaLocationForAllNamespacesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaLocationForAllNamespacesResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaLocationList;
};

export type ListNetworkingDatumapisComV1AlphaLocationForAllNamespacesResponse =
  ListNetworkingDatumapisComV1AlphaLocationForAllNamespacesResponses[keyof ListNetworkingDatumapisComV1AlphaLocationForAllNamespacesResponses];

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedDomainData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/domains';
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedDomainErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedDomainResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedDomainResponse =
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedDomainResponses[keyof DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedDomainResponses];

export type ListNetworkingDatumapisComV1AlphaNamespacedDomainData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/domains';
};

export type ListNetworkingDatumapisComV1AlphaNamespacedDomainErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedDomainResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaDomainList;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedDomainResponse =
  ListNetworkingDatumapisComV1AlphaNamespacedDomainResponses[keyof ListNetworkingDatumapisComV1AlphaNamespacedDomainResponses];

export type CreateNetworkingDatumapisComV1AlphaNamespacedDomainData = {
  body: ComDatumapisNetworkingV1AlphaDomain;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/domains';
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedDomainErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedDomainResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaDomain;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaDomain;
  /**
   * Accepted
   */
  202: ComDatumapisNetworkingV1AlphaDomain;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedDomainResponse =
  CreateNetworkingDatumapisComV1AlphaNamespacedDomainResponses[keyof CreateNetworkingDatumapisComV1AlphaNamespacedDomainResponses];

export type DeleteNetworkingDatumapisComV1AlphaNamespacedDomainData = {
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
  path: {
    /**
     * name of the Domain
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     */
    gracePeriodSeconds?: number;
    /**
     * if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     */
    ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
    /**
     * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     */
    orphanDependents?: boolean;
    /**
     * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
     */
    propagationPolicy?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/domains/{name}';
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedDomainErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedDomainResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
  /**
   * Accepted
   */
  202: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedDomainResponse =
  DeleteNetworkingDatumapisComV1AlphaNamespacedDomainResponses[keyof DeleteNetworkingDatumapisComV1AlphaNamespacedDomainResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedDomainData = {
  body?: never;
  path: {
    /**
     * name of the Domain
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/domains/{name}';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedDomainErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedDomainResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaDomain;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedDomainResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedDomainResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedDomainResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedDomainData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the Domain
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/domains/{name}';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedDomainErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedDomainResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaDomain;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedDomainResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedDomainResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedDomainResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainData = {
  body: ComDatumapisNetworkingV1AlphaDomain;
  path: {
    /**
     * name of the Domain
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/domains/{name}';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaDomain;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaDomain;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedDomainStatusData = {
  body?: never;
  path: {
    /**
     * name of the Domain
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/domains/{name}/status';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedDomainStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaDomain;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedDomainStatusData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the Domain
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/domains/{name}/status';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedDomainStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaDomain;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainStatusData = {
  body: ComDatumapisNetworkingV1AlphaDomain;
  path: {
    /**
     * name of the Domain
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/domains/{name}/status';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaDomain;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaDomain;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedDomainStatusResponses];

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedHttpProxyData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/httpproxies';
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedHttpProxyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedHttpProxyResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedHttpProxyResponse =
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedHttpProxyResponses[keyof DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedHttpProxyResponses];

export type ListNetworkingDatumapisComV1AlphaNamespacedHttpProxyData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/httpproxies';
};

export type ListNetworkingDatumapisComV1AlphaNamespacedHttpProxyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaHttpProxyList;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse =
  ListNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses[keyof ListNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses];

export type CreateNetworkingDatumapisComV1AlphaNamespacedHttpProxyData = {
  body: ComDatumapisNetworkingV1AlphaHttpProxy;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/httpproxies';
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedHttpProxyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaHttpProxy;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaHttpProxy;
  /**
   * Accepted
   */
  202: ComDatumapisNetworkingV1AlphaHttpProxy;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse =
  CreateNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses[keyof CreateNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses];

export type DeleteNetworkingDatumapisComV1AlphaNamespacedHttpProxyData = {
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
  path: {
    /**
     * name of the HTTPProxy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     */
    gracePeriodSeconds?: number;
    /**
     * if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     */
    ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
    /**
     * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     */
    orphanDependents?: boolean;
    /**
     * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
     */
    propagationPolicy?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/httpproxies/{name}';
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedHttpProxyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
  /**
   * Accepted
   */
  202: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse =
  DeleteNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses[keyof DeleteNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyData = {
  body?: never;
  path: {
    /**
     * name of the HTTPProxy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/httpproxies/{name}';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaHttpProxy;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the HTTPProxy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/httpproxies/{name}';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaHttpProxy;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyData = {
  body: ComDatumapisNetworkingV1AlphaHttpProxy;
  path: {
    /**
     * name of the HTTPProxy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/httpproxies/{name}';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaHttpProxy;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaHttpProxy;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusData = {
  body?: never;
  path: {
    /**
     * name of the HTTPProxy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/httpproxies/{name}/status';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaHttpProxy;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the HTTPProxy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/httpproxies/{name}/status';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaHttpProxy;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusData = {
  body: ComDatumapisNetworkingV1AlphaHttpProxy;
  path: {
    /**
     * name of the HTTPProxy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/httpproxies/{name}/status';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaHttpProxy;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaHttpProxy;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedHttpProxyStatusResponses];

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedLocationData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/locations';
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedLocationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedLocationResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedLocationResponse =
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedLocationResponses[keyof DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedLocationResponses];

export type ListNetworkingDatumapisComV1AlphaNamespacedLocationData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/locations';
};

export type ListNetworkingDatumapisComV1AlphaNamespacedLocationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedLocationResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaLocationList;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedLocationResponse =
  ListNetworkingDatumapisComV1AlphaNamespacedLocationResponses[keyof ListNetworkingDatumapisComV1AlphaNamespacedLocationResponses];

export type CreateNetworkingDatumapisComV1AlphaNamespacedLocationData = {
  body: ComDatumapisNetworkingV1AlphaLocation;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/locations';
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedLocationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedLocationResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaLocation;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaLocation;
  /**
   * Accepted
   */
  202: ComDatumapisNetworkingV1AlphaLocation;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedLocationResponse =
  CreateNetworkingDatumapisComV1AlphaNamespacedLocationResponses[keyof CreateNetworkingDatumapisComV1AlphaNamespacedLocationResponses];

export type DeleteNetworkingDatumapisComV1AlphaNamespacedLocationData = {
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
  path: {
    /**
     * name of the Location
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     */
    gracePeriodSeconds?: number;
    /**
     * if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     */
    ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
    /**
     * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     */
    orphanDependents?: boolean;
    /**
     * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
     */
    propagationPolicy?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/locations/{name}';
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedLocationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedLocationResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
  /**
   * Accepted
   */
  202: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedLocationResponse =
  DeleteNetworkingDatumapisComV1AlphaNamespacedLocationResponses[keyof DeleteNetworkingDatumapisComV1AlphaNamespacedLocationResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedLocationData = {
  body?: never;
  path: {
    /**
     * name of the Location
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/locations/{name}';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedLocationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedLocationResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaLocation;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedLocationResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedLocationResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedLocationResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedLocationData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the Location
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/locations/{name}';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedLocationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedLocationResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaLocation;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedLocationResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedLocationResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedLocationResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationData = {
  body: ComDatumapisNetworkingV1AlphaLocation;
  path: {
    /**
     * name of the Location
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/locations/{name}';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaLocation;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaLocation;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedLocationStatusData = {
  body?: never;
  path: {
    /**
     * name of the Location
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/locations/{name}/status';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedLocationStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaLocation;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedLocationStatusData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the Location
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/locations/{name}/status';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedLocationStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaLocation;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationStatusData = {
  body: ComDatumapisNetworkingV1AlphaLocation;
  path: {
    /**
     * name of the Location
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/locations/{name}/status';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaLocation;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaLocation;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedLocationStatusResponses];

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkBindingData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkbindings';
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkBindingErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkBindingResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkBindingResponse =
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkBindingResponses[keyof DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkBindingResponses];

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkBindingData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkbindings';
};

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkBindingErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkBindingList;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse =
  ListNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses[keyof ListNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses];

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkBindingData = {
  body: ComDatumapisNetworkingV1AlphaNetworkBinding;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkbindings';
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkBindingErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkBinding;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaNetworkBinding;
  /**
   * Accepted
   */
  202: ComDatumapisNetworkingV1AlphaNetworkBinding;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse =
  CreateNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses[keyof CreateNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses];

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkBindingData = {
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
  path: {
    /**
     * name of the NetworkBinding
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     */
    gracePeriodSeconds?: number;
    /**
     * if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     */
    ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
    /**
     * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     */
    orphanDependents?: boolean;
    /**
     * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
     */
    propagationPolicy?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkbindings/{name}';
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkBindingErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
  /**
   * Accepted
   */
  202: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse =
  DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses[keyof DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingData = {
  body?: never;
  path: {
    /**
     * name of the NetworkBinding
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkbindings/{name}';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkBinding;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the NetworkBinding
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkbindings/{name}';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkBinding;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingData = {
  body: ComDatumapisNetworkingV1AlphaNetworkBinding;
  path: {
    /**
     * name of the NetworkBinding
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkbindings/{name}';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkBinding;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaNetworkBinding;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusData = {
  body?: never;
  path: {
    /**
     * name of the NetworkBinding
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkbindings/{name}/status';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkBinding;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the NetworkBinding
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkbindings/{name}/status';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkBinding;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusData = {
  body: ComDatumapisNetworkingV1AlphaNetworkBinding;
  path: {
    /**
     * name of the NetworkBinding
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkbindings/{name}/status';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkBinding;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaNetworkBinding;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkBindingStatusResponses];

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkContextData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkcontexts';
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkContextErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkContextResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkContextResponse =
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkContextResponses[keyof DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkContextResponses];

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkContextData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkcontexts';
};

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkContextErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkContextList;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse =
  ListNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses[keyof ListNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses];

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkContextData = {
  body: ComDatumapisNetworkingV1AlphaNetworkContext;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkcontexts';
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkContextErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkContext;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaNetworkContext;
  /**
   * Accepted
   */
  202: ComDatumapisNetworkingV1AlphaNetworkContext;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse =
  CreateNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses[keyof CreateNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses];

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkContextData = {
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
  path: {
    /**
     * name of the NetworkContext
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     */
    gracePeriodSeconds?: number;
    /**
     * if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     */
    ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
    /**
     * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     */
    orphanDependents?: boolean;
    /**
     * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
     */
    propagationPolicy?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkcontexts/{name}';
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkContextErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
  /**
   * Accepted
   */
  202: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse =
  DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses[keyof DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextData = {
  body?: never;
  path: {
    /**
     * name of the NetworkContext
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkcontexts/{name}';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkContext;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the NetworkContext
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkcontexts/{name}';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkContext;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextData = {
  body: ComDatumapisNetworkingV1AlphaNetworkContext;
  path: {
    /**
     * name of the NetworkContext
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkcontexts/{name}';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkContext;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaNetworkContext;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusData = {
  body?: never;
  path: {
    /**
     * name of the NetworkContext
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkcontexts/{name}/status';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkContext;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the NetworkContext
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkcontexts/{name}/status';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkContext;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusData = {
  body: ComDatumapisNetworkingV1AlphaNetworkContext;
  path: {
    /**
     * name of the NetworkContext
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkcontexts/{name}/status';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkContext;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaNetworkContext;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkContextStatusResponses];

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkPolicyData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkpolicies';
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkPolicyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkPolicyResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkPolicyResponse =
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkPolicyResponses[keyof DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkPolicyResponses];

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkpolicies';
};

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkPolicyList;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse =
  ListNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses[keyof ListNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses];

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyData = {
  body: ComDatumapisNetworkingV1AlphaNetworkPolicy;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkpolicies';
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkPolicy;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaNetworkPolicy;
  /**
   * Accepted
   */
  202: ComDatumapisNetworkingV1AlphaNetworkPolicy;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse =
  CreateNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses[keyof CreateNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses];

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyData = {
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
  path: {
    /**
     * name of the NetworkPolicy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     */
    gracePeriodSeconds?: number;
    /**
     * if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     */
    ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
    /**
     * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     */
    orphanDependents?: boolean;
    /**
     * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
     */
    propagationPolicy?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkpolicies/{name}';
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
  /**
   * Accepted
   */
  202: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse =
  DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses[keyof DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyData = {
  body?: never;
  path: {
    /**
     * name of the NetworkPolicy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkpolicies/{name}';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkPolicy;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the NetworkPolicy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkpolicies/{name}';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkPolicy;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyData = {
  body: ComDatumapisNetworkingV1AlphaNetworkPolicy;
  path: {
    /**
     * name of the NetworkPolicy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkpolicies/{name}';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkPolicy;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaNetworkPolicy;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusData = {
  body?: never;
  path: {
    /**
     * name of the NetworkPolicy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkpolicies/{name}/status';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkPolicy;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the NetworkPolicy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkpolicies/{name}/status';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkPolicy;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusData = {
  body: ComDatumapisNetworkingV1AlphaNetworkPolicy;
  path: {
    /**
     * name of the NetworkPolicy
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networkpolicies/{name}/status';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkPolicy;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaNetworkPolicy;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkPolicyStatusResponses];

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networks';
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkResponse =
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkResponses[keyof DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedNetworkResponses];

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networks';
};

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkList;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedNetworkResponse =
  ListNetworkingDatumapisComV1AlphaNamespacedNetworkResponses[keyof ListNetworkingDatumapisComV1AlphaNamespacedNetworkResponses];

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkData = {
  body: ComDatumapisNetworkingV1AlphaNetwork;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networks';
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetwork;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaNetwork;
  /**
   * Accepted
   */
  202: ComDatumapisNetworkingV1AlphaNetwork;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedNetworkResponse =
  CreateNetworkingDatumapisComV1AlphaNamespacedNetworkResponses[keyof CreateNetworkingDatumapisComV1AlphaNamespacedNetworkResponses];

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkData = {
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
  path: {
    /**
     * name of the Network
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     */
    gracePeriodSeconds?: number;
    /**
     * if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     */
    ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
    /**
     * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     */
    orphanDependents?: boolean;
    /**
     * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
     */
    propagationPolicy?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networks/{name}';
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
  /**
   * Accepted
   */
  202: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkResponse =
  DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkResponses[keyof DeleteNetworkingDatumapisComV1AlphaNamespacedNetworkResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkData = {
  body?: never;
  path: {
    /**
     * name of the Network
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networks/{name}';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetwork;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedNetworkResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the Network
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networks/{name}';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetwork;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedNetworkResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkData = {
  body: ComDatumapisNetworkingV1AlphaNetwork;
  path: {
    /**
     * name of the Network
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networks/{name}';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetwork;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaNetwork;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkStatusData = {
  body?: never;
  path: {
    /**
     * name of the Network
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networks/{name}/status';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetwork;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkStatusData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the Network
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networks/{name}/status';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetwork;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkStatusData = {
  body: ComDatumapisNetworkingV1AlphaNetwork;
  path: {
    /**
     * name of the Network
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/networks/{name}/status';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetwork;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaNetwork;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedNetworkStatusResponses];

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetClaimData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnetclaims';
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetClaimErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetClaimResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetClaimResponse =
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetClaimResponses[keyof DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetClaimResponses];

export type ListNetworkingDatumapisComV1AlphaNamespacedSubnetClaimData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnetclaims';
};

export type ListNetworkingDatumapisComV1AlphaNamespacedSubnetClaimErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnetClaimList;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse =
  ListNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses[keyof ListNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses];

export type CreateNetworkingDatumapisComV1AlphaNamespacedSubnetClaimData = {
  body: ComDatumapisNetworkingV1AlphaSubnetClaim;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnetclaims';
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedSubnetClaimErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnetClaim;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaSubnetClaim;
  /**
   * Accepted
   */
  202: ComDatumapisNetworkingV1AlphaSubnetClaim;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse =
  CreateNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses[keyof CreateNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses];

export type DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetClaimData = {
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
  path: {
    /**
     * name of the SubnetClaim
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     */
    gracePeriodSeconds?: number;
    /**
     * if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     */
    ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
    /**
     * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     */
    orphanDependents?: boolean;
    /**
     * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
     */
    propagationPolicy?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnetclaims/{name}';
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetClaimErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
  /**
   * Accepted
   */
  202: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse =
  DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses[keyof DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimData = {
  body?: never;
  path: {
    /**
     * name of the SubnetClaim
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnetclaims/{name}';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnetClaim;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the SubnetClaim
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnetclaims/{name}';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnetClaim;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimData = {
  body: ComDatumapisNetworkingV1AlphaSubnetClaim;
  path: {
    /**
     * name of the SubnetClaim
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnetclaims/{name}';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnetClaim;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaSubnetClaim;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusData = {
  body?: never;
  path: {
    /**
     * name of the SubnetClaim
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnetclaims/{name}/status';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnetClaim;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the SubnetClaim
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnetclaims/{name}/status';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnetClaim;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusData = {
  body: ComDatumapisNetworkingV1AlphaSubnetClaim;
  path: {
    /**
     * name of the SubnetClaim
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnetclaims/{name}/status';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnetClaim;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaSubnetClaim;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetClaimStatusResponses];

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnets';
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetResponse =
  DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetResponses[keyof DeleteNetworkingDatumapisComV1AlphaCollectionNamespacedSubnetResponses];

export type ListNetworkingDatumapisComV1AlphaNamespacedSubnetData = {
  body?: never;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnets';
};

export type ListNetworkingDatumapisComV1AlphaNamespacedSubnetErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedSubnetResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnetList;
};

export type ListNetworkingDatumapisComV1AlphaNamespacedSubnetResponse =
  ListNetworkingDatumapisComV1AlphaNamespacedSubnetResponses[keyof ListNetworkingDatumapisComV1AlphaNamespacedSubnetResponses];

export type CreateNetworkingDatumapisComV1AlphaNamespacedSubnetData = {
  body: ComDatumapisNetworkingV1AlphaSubnet;
  path: {
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnets';
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedSubnetErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedSubnetResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnet;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaSubnet;
  /**
   * Accepted
   */
  202: ComDatumapisNetworkingV1AlphaSubnet;
};

export type CreateNetworkingDatumapisComV1AlphaNamespacedSubnetResponse =
  CreateNetworkingDatumapisComV1AlphaNamespacedSubnetResponses[keyof CreateNetworkingDatumapisComV1AlphaNamespacedSubnetResponses];

export type DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetData = {
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
  path: {
    /**
     * name of the Subnet
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     */
    gracePeriodSeconds?: number;
    /**
     * if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     */
    ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
    /**
     * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     */
    orphanDependents?: boolean;
    /**
     * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
     */
    propagationPolicy?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnets/{name}';
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetResponses = {
  /**
   * OK
   */
  200: IoK8sApimachineryPkgApisMetaV1Status;
  /**
   * Accepted
   */
  202: IoK8sApimachineryPkgApisMetaV1Status;
};

export type DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetResponse =
  DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetResponses[keyof DeleteNetworkingDatumapisComV1AlphaNamespacedSubnetResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetData = {
  body?: never;
  path: {
    /**
     * name of the Subnet
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnets/{name}';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnet;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedSubnetResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedSubnetResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the Subnet
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnets/{name}';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnet;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedSubnetResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedSubnetResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetData = {
  body: ComDatumapisNetworkingV1AlphaSubnet;
  path: {
    /**
     * name of the Subnet
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnets/{name}';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnet;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaSubnet;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetResponses];

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetStatusData = {
  body?: never;
  path: {
    /**
     * name of the Subnet
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnets/{name}/status';
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnet;
};

export type ReadNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponse =
  ReadNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponses[keyof ReadNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponses];

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetStatusData = {
  body: IoK8sApimachineryPkgApisMetaV1Patch;
  path: {
    /**
     * name of the Subnet
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
    /**
     * Force is going to "force" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     */
    force?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnets/{name}/status';
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnet;
};

export type PatchNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponse =
  PatchNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponses[keyof PatchNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponses];

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetStatusData = {
  body: ComDatumapisNetworkingV1AlphaSubnet;
  path: {
    /**
     * name of the Subnet
     */
    name: string;
    /**
     * object name and auth scope, such as for teams and projects
     */
    namespace: string;
  };
  query?: {
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     */
    dryRun?: string;
    /**
     * fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     */
    fieldManager?: string;
    /**
     * fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     */
    fieldValidation?: string;
  };
  url: '/apis/networking.datumapis.com/v1alpha/namespaces/{namespace}/subnets/{name}/status';
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetStatusErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnet;
  /**
   * Created
   */
  201: ComDatumapisNetworkingV1AlphaSubnet;
};

export type ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponse =
  ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponses[keyof ReplaceNetworkingDatumapisComV1AlphaNamespacedSubnetStatusResponses];

export type ListNetworkingDatumapisComV1AlphaNetworkBindingForAllNamespacesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/networkbindings';
};

export type ListNetworkingDatumapisComV1AlphaNetworkBindingForAllNamespacesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaNetworkBindingForAllNamespacesResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkBindingList;
};

export type ListNetworkingDatumapisComV1AlphaNetworkBindingForAllNamespacesResponse =
  ListNetworkingDatumapisComV1AlphaNetworkBindingForAllNamespacesResponses[keyof ListNetworkingDatumapisComV1AlphaNetworkBindingForAllNamespacesResponses];

export type ListNetworkingDatumapisComV1AlphaNetworkContextForAllNamespacesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/networkcontexts';
};

export type ListNetworkingDatumapisComV1AlphaNetworkContextForAllNamespacesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaNetworkContextForAllNamespacesResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkContextList;
};

export type ListNetworkingDatumapisComV1AlphaNetworkContextForAllNamespacesResponse =
  ListNetworkingDatumapisComV1AlphaNetworkContextForAllNamespacesResponses[keyof ListNetworkingDatumapisComV1AlphaNetworkContextForAllNamespacesResponses];

export type ListNetworkingDatumapisComV1AlphaNetworkPolicyForAllNamespacesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/networkpolicies';
};

export type ListNetworkingDatumapisComV1AlphaNetworkPolicyForAllNamespacesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaNetworkPolicyForAllNamespacesResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkPolicyList;
};

export type ListNetworkingDatumapisComV1AlphaNetworkPolicyForAllNamespacesResponse =
  ListNetworkingDatumapisComV1AlphaNetworkPolicyForAllNamespacesResponses[keyof ListNetworkingDatumapisComV1AlphaNetworkPolicyForAllNamespacesResponses];

export type ListNetworkingDatumapisComV1AlphaNetworkForAllNamespacesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/networks';
};

export type ListNetworkingDatumapisComV1AlphaNetworkForAllNamespacesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaNetworkForAllNamespacesResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaNetworkList;
};

export type ListNetworkingDatumapisComV1AlphaNetworkForAllNamespacesResponse =
  ListNetworkingDatumapisComV1AlphaNetworkForAllNamespacesResponses[keyof ListNetworkingDatumapisComV1AlphaNetworkForAllNamespacesResponses];

export type ListNetworkingDatumapisComV1AlphaSubnetClaimForAllNamespacesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/subnetclaims';
};

export type ListNetworkingDatumapisComV1AlphaSubnetClaimForAllNamespacesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaSubnetClaimForAllNamespacesResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnetClaimList;
};

export type ListNetworkingDatumapisComV1AlphaSubnetClaimForAllNamespacesResponse =
  ListNetworkingDatumapisComV1AlphaSubnetClaimForAllNamespacesResponses[keyof ListNetworkingDatumapisComV1AlphaSubnetClaimForAllNamespacesResponses];

export type ListNetworkingDatumapisComV1AlphaSubnetForAllNamespacesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     */
    allowWatchBookmarks?: boolean;
    /**
     * The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".
     *
     * This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     */
    continue?: string;
    /**
     * A selector to restrict the list of returned objects by their fields. Defaults to everything.
     */
    fieldSelector?: string;
    /**
     * A selector to restrict the list of returned objects by their labels. Defaults to everything.
     */
    labelSelector?: string;
    /**
     * limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
     *
     * The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     */
    limit?: number;
    /**
     * If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     */
    pretty?: string;
    /**
     * resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersion?: string;
    /**
     * resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.
     *
     * Defaults to unset
     */
    resourceVersionMatch?: string;
    /**
     * `sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic "Bookmark" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `"k8s.io/initial-events-end": "true"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.
     *
     * When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan
     * is interpreted as "data at least as new as the provided `resourceVersion`"
     * and the bookmark event is send when the state is synced
     * to a `resourceVersion` at least as fresh as the one provided by the ListOptions.
     * If `resourceVersion` is unset, this is interpreted as "consistent read" and the
     * bookmark event is send when the state is synced at least to the moment
     * when request started being processed.
     * - `resourceVersionMatch` set to any other value or unset
     * Invalid error is returned.
     *
     * Defaults to true if `resourceVersion=""` or `resourceVersion="0"` (for backward compatibility reasons) and to false otherwise.
     */
    sendInitialEvents?: boolean;
    /**
     * Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     */
    timeoutSeconds?: number;
    /**
     * Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     */
    watch?: boolean;
  };
  url: '/apis/networking.datumapis.com/v1alpha/subnets';
};

export type ListNetworkingDatumapisComV1AlphaSubnetForAllNamespacesErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type ListNetworkingDatumapisComV1AlphaSubnetForAllNamespacesResponses = {
  /**
   * OK
   */
  200: ComDatumapisNetworkingV1AlphaSubnetList;
};

export type ListNetworkingDatumapisComV1AlphaSubnetForAllNamespacesResponse =
  ListNetworkingDatumapisComV1AlphaSubnetForAllNamespacesResponses[keyof ListNetworkingDatumapisComV1AlphaSubnetForAllNamespacesResponses];

export type ClientOptions = {
  baseURL: `${string}://${string}` | (string & {});
};
