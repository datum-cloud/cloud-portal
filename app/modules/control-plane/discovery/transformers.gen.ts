// This file is auto-generated by @hey-api/openapi-ts
import type {
  ListDiscoveryV1EndpointSliceForAllNamespacesResponse,
  DeleteDiscoveryV1CollectionNamespacedEndpointSliceResponse,
  ListDiscoveryV1NamespacedEndpointSliceResponse,
  CreateDiscoveryV1NamespacedEndpointSliceResponse,
  DeleteDiscoveryV1NamespacedEndpointSliceResponse,
  ReadDiscoveryV1NamespacedEndpointSliceResponse,
  PatchDiscoveryV1NamespacedEndpointSliceResponse,
  ReplaceDiscoveryV1NamespacedEndpointSliceResponse,
} from './types.gen';

const ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer = (data: any) => {
  data = new Date(data);
  return data;
};

const ioK8sApimachineryPkgApisMetaV1ManagedFieldsEntrySchemaResponseTransformer = (data: any) => {
  if (data.time) {
    data.time = ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer(data.time);
  }
  return data;
};

const ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer = (data: any) => {
  if (data.creationTimestamp) {
    data.creationTimestamp = ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer(
      data.creationTimestamp
    );
  }
  if (data.deletionGracePeriodSeconds) {
    data.deletionGracePeriodSeconds = BigInt(data.deletionGracePeriodSeconds.toString());
  }
  if (data.deletionTimestamp) {
    data.deletionTimestamp = ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer(
      data.deletionTimestamp
    );
  }
  if (data.generation) {
    data.generation = BigInt(data.generation.toString());
  }
  if (data.managedFields) {
    data.managedFields = data.managedFields.map((item: any) => {
      return ioK8sApimachineryPkgApisMetaV1ManagedFieldsEntrySchemaResponseTransformer(item);
    });
  }
  return data;
};

const ioK8sApiDiscoveryV1EndpointSliceSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata
    );
  }
  return data;
};

const ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer = (data: any) => {
  if (data.remainingItemCount) {
    data.remainingItemCount = BigInt(data.remainingItemCount.toString());
  }
  return data;
};

const ioK8sApiDiscoveryV1EndpointSliceListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return ioK8sApiDiscoveryV1EndpointSliceSchemaResponseTransformer(item);
  });
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const listDiscoveryV1EndpointSliceForAllNamespacesResponseTransformer = async (
  data: any
): Promise<ListDiscoveryV1EndpointSliceForAllNamespacesResponse> => {
  data = ioK8sApiDiscoveryV1EndpointSliceListSchemaResponseTransformer(data);
  return data;
};

const ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const deleteDiscoveryV1CollectionNamespacedEndpointSliceResponseTransformer = async (
  data: any
): Promise<DeleteDiscoveryV1CollectionNamespacedEndpointSliceResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
  return data;
};

export const listDiscoveryV1NamespacedEndpointSliceResponseTransformer = async (
  data: any
): Promise<ListDiscoveryV1NamespacedEndpointSliceResponse> => {
  data = ioK8sApiDiscoveryV1EndpointSliceListSchemaResponseTransformer(data);
  return data;
};

export const createDiscoveryV1NamespacedEndpointSliceResponseTransformer = async (
  data: any
): Promise<CreateDiscoveryV1NamespacedEndpointSliceResponse> => {
  data = ioK8sApiDiscoveryV1EndpointSliceSchemaResponseTransformer(data);
  return data;
};

export const deleteDiscoveryV1NamespacedEndpointSliceResponseTransformer = async (
  data: any
): Promise<DeleteDiscoveryV1NamespacedEndpointSliceResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
  return data;
};

export const readDiscoveryV1NamespacedEndpointSliceResponseTransformer = async (
  data: any
): Promise<ReadDiscoveryV1NamespacedEndpointSliceResponse> => {
  data = ioK8sApiDiscoveryV1EndpointSliceSchemaResponseTransformer(data);
  return data;
};

export const patchDiscoveryV1NamespacedEndpointSliceResponseTransformer = async (
  data: any
): Promise<PatchDiscoveryV1NamespacedEndpointSliceResponse> => {
  data = ioK8sApiDiscoveryV1EndpointSliceSchemaResponseTransformer(data);
  return data;
};

export const replaceDiscoveryV1NamespacedEndpointSliceResponseTransformer = async (
  data: any
): Promise<ReplaceDiscoveryV1NamespacedEndpointSliceResponse> => {
  data = ioK8sApiDiscoveryV1EndpointSliceSchemaResponseTransformer(data);
  return data;
};
