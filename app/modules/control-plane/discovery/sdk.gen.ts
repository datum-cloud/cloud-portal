// This file is auto-generated by @hey-api/openapi-ts
import { client as _heyApiClient } from './client.gen'
import type {
  GetDiscoveryV1ApiResourcesData,
  GetDiscoveryV1ApiResourcesResponse,
  ListDiscoveryV1EndpointSliceForAllNamespacesData,
  ListDiscoveryV1EndpointSliceForAllNamespacesResponse,
  DeleteDiscoveryV1CollectionNamespacedEndpointSliceData,
  DeleteDiscoveryV1CollectionNamespacedEndpointSliceResponse,
  ListDiscoveryV1NamespacedEndpointSliceData,
  ListDiscoveryV1NamespacedEndpointSliceResponse,
  CreateDiscoveryV1NamespacedEndpointSliceData,
  CreateDiscoveryV1NamespacedEndpointSliceResponse,
  DeleteDiscoveryV1NamespacedEndpointSliceData,
  DeleteDiscoveryV1NamespacedEndpointSliceResponse,
  ReadDiscoveryV1NamespacedEndpointSliceData,
  ReadDiscoveryV1NamespacedEndpointSliceResponse,
  PatchDiscoveryV1NamespacedEndpointSliceData,
  PatchDiscoveryV1NamespacedEndpointSliceResponse,
  ReplaceDiscoveryV1NamespacedEndpointSliceData,
  ReplaceDiscoveryV1NamespacedEndpointSliceResponse,
  WatchDiscoveryV1EndpointSliceListForAllNamespacesData,
  WatchDiscoveryV1EndpointSliceListForAllNamespacesResponse,
  WatchDiscoveryV1NamespacedEndpointSliceListData,
  WatchDiscoveryV1NamespacedEndpointSliceListResponse,
  WatchDiscoveryV1NamespacedEndpointSliceData,
  WatchDiscoveryV1NamespacedEndpointSliceResponse,
} from './types.gen'
import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * get available resources
 */
export const getDiscoveryV1ApiResources = <ThrowOnError extends boolean = false>(
  options?: Options<GetDiscoveryV1ApiResourcesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetDiscoveryV1ApiResourcesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/discovery.k8s.io/v1/',
    ...options,
  })
}

/**
 * list or watch objects of kind EndpointSlice
 */
export const listDiscoveryV1EndpointSliceForAllNamespaces = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListDiscoveryV1EndpointSliceForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListDiscoveryV1EndpointSliceForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/discovery.k8s.io/v1/endpointslices',
    ...options,
  })
}

/**
 * delete collection of EndpointSlice
 */
export const deleteDiscoveryV1CollectionNamespacedEndpointSlice = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteDiscoveryV1CollectionNamespacedEndpointSliceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDiscoveryV1CollectionNamespacedEndpointSliceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * list or watch objects of kind EndpointSlice
 */
export const listDiscoveryV1NamespacedEndpointSlice = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ListDiscoveryV1NamespacedEndpointSliceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListDiscoveryV1NamespacedEndpointSliceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices',
    ...options,
  })
}

/**
 * create an EndpointSlice
 */
export const createDiscoveryV1NamespacedEndpointSlice = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateDiscoveryV1NamespacedEndpointSliceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDiscoveryV1NamespacedEndpointSliceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * delete an EndpointSlice
 */
export const deleteDiscoveryV1NamespacedEndpointSlice = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteDiscoveryV1NamespacedEndpointSliceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDiscoveryV1NamespacedEndpointSliceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * read the specified EndpointSlice
 */
export const readDiscoveryV1NamespacedEndpointSlice = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReadDiscoveryV1NamespacedEndpointSliceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadDiscoveryV1NamespacedEndpointSliceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}',
    ...options,
  })
}

/**
 * partially update the specified EndpointSlice
 */
export const patchDiscoveryV1NamespacedEndpointSlice = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchDiscoveryV1NamespacedEndpointSliceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchDiscoveryV1NamespacedEndpointSliceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace the specified EndpointSlice
 */
export const replaceDiscoveryV1NamespacedEndpointSlice = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReplaceDiscoveryV1NamespacedEndpointSliceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceDiscoveryV1NamespacedEndpointSliceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
 */
export const watchDiscoveryV1EndpointSliceListForAllNamespaces = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<WatchDiscoveryV1EndpointSliceListForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WatchDiscoveryV1EndpointSliceListForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/discovery.k8s.io/v1/watch/endpointslices',
    ...options,
  })
}

/**
 * watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
 */
export const watchDiscoveryV1NamespacedEndpointSliceList = <
  ThrowOnError extends boolean = false,
>(
  options: Options<WatchDiscoveryV1NamespacedEndpointSliceListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WatchDiscoveryV1NamespacedEndpointSliceListResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices',
    ...options,
  })
}

/**
 * watch changes to an object of kind EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
 */
export const watchDiscoveryV1NamespacedEndpointSlice = <
  ThrowOnError extends boolean = false,
>(
  options: Options<WatchDiscoveryV1NamespacedEndpointSliceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WatchDiscoveryV1NamespacedEndpointSliceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices/{name}',
    ...options,
  })
}
