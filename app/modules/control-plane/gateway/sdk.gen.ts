// This file is auto-generated by @hey-api/openapi-ts
import { client as _heyApiClient } from './client.gen'
import type {
  DeleteGatewayNetworkingV1CollectionGatewayClassData,
  DeleteGatewayNetworkingV1CollectionGatewayClassResponse,
  ListGatewayNetworkingV1GatewayClassData,
  ListGatewayNetworkingV1GatewayClassResponse,
  CreateGatewayNetworkingV1GatewayClassData,
  CreateGatewayNetworkingV1GatewayClassResponse,
  DeleteGatewayNetworkingV1GatewayClassData,
  DeleteGatewayNetworkingV1GatewayClassResponse,
  ReadGatewayNetworkingV1GatewayClassData,
  ReadGatewayNetworkingV1GatewayClassResponse,
  PatchGatewayNetworkingV1GatewayClassData,
  PatchGatewayNetworkingV1GatewayClassResponse,
  ReplaceGatewayNetworkingV1GatewayClassData,
  ReplaceGatewayNetworkingV1GatewayClassResponse,
  ReadGatewayNetworkingV1GatewayClassStatusData,
  ReadGatewayNetworkingV1GatewayClassStatusResponse,
  PatchGatewayNetworkingV1GatewayClassStatusData,
  PatchGatewayNetworkingV1GatewayClassStatusResponse,
  ReplaceGatewayNetworkingV1GatewayClassStatusData,
  ReplaceGatewayNetworkingV1GatewayClassStatusResponse,
  ListGatewayNetworkingV1GatewayForAllNamespacesData,
  ListGatewayNetworkingV1GatewayForAllNamespacesResponse,
  ListGatewayNetworkingV1HttpRouteForAllNamespacesData,
  ListGatewayNetworkingV1HttpRouteForAllNamespacesResponse,
  DeleteGatewayNetworkingV1CollectionNamespacedGatewayData,
  DeleteGatewayNetworkingV1CollectionNamespacedGatewayResponse,
  ListGatewayNetworkingV1NamespacedGatewayData,
  ListGatewayNetworkingV1NamespacedGatewayResponse,
  CreateGatewayNetworkingV1NamespacedGatewayData,
  CreateGatewayNetworkingV1NamespacedGatewayResponse,
  DeleteGatewayNetworkingV1NamespacedGatewayData,
  DeleteGatewayNetworkingV1NamespacedGatewayResponse,
  ReadGatewayNetworkingV1NamespacedGatewayData,
  ReadGatewayNetworkingV1NamespacedGatewayResponse,
  PatchGatewayNetworkingV1NamespacedGatewayData,
  PatchGatewayNetworkingV1NamespacedGatewayResponse,
  ReplaceGatewayNetworkingV1NamespacedGatewayData,
  ReplaceGatewayNetworkingV1NamespacedGatewayResponse,
  ReadGatewayNetworkingV1NamespacedGatewayStatusData,
  ReadGatewayNetworkingV1NamespacedGatewayStatusResponse,
  PatchGatewayNetworkingV1NamespacedGatewayStatusData,
  PatchGatewayNetworkingV1NamespacedGatewayStatusResponse,
  ReplaceGatewayNetworkingV1NamespacedGatewayStatusData,
  ReplaceGatewayNetworkingV1NamespacedGatewayStatusResponse,
  DeleteGatewayNetworkingV1CollectionNamespacedHttpRouteData,
  DeleteGatewayNetworkingV1CollectionNamespacedHttpRouteResponse,
  ListGatewayNetworkingV1NamespacedHttpRouteData,
  ListGatewayNetworkingV1NamespacedHttpRouteResponse,
  CreateGatewayNetworkingV1NamespacedHttpRouteData,
  CreateGatewayNetworkingV1NamespacedHttpRouteResponse,
  DeleteGatewayNetworkingV1NamespacedHttpRouteData,
  DeleteGatewayNetworkingV1NamespacedHttpRouteResponse,
  ReadGatewayNetworkingV1NamespacedHttpRouteData,
  ReadGatewayNetworkingV1NamespacedHttpRouteResponse,
  PatchGatewayNetworkingV1NamespacedHttpRouteData,
  PatchGatewayNetworkingV1NamespacedHttpRouteResponse,
  ReplaceGatewayNetworkingV1NamespacedHttpRouteData,
  ReplaceGatewayNetworkingV1NamespacedHttpRouteResponse,
  ReadGatewayNetworkingV1NamespacedHttpRouteStatusData,
  ReadGatewayNetworkingV1NamespacedHttpRouteStatusResponse,
  PatchGatewayNetworkingV1NamespacedHttpRouteStatusData,
  PatchGatewayNetworkingV1NamespacedHttpRouteStatusResponse,
  ReplaceGatewayNetworkingV1NamespacedHttpRouteStatusData,
  ReplaceGatewayNetworkingV1NamespacedHttpRouteStatusResponse,
} from './types.gen'
import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * delete collection of GatewayClass
 */
export const deleteGatewayNetworkingV1CollectionGatewayClass = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<DeleteGatewayNetworkingV1CollectionGatewayClassData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteGatewayNetworkingV1CollectionGatewayClassResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/gatewayclasses',
    ...options,
  })
}

/**
 * list objects of kind GatewayClass
 */
export const listGatewayNetworkingV1GatewayClass = <ThrowOnError extends boolean = false>(
  options?: Options<ListGatewayNetworkingV1GatewayClassData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListGatewayNetworkingV1GatewayClassResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/gatewayclasses',
    ...options,
  })
}

/**
 * create a GatewayClass
 */
export const createGatewayNetworkingV1GatewayClass = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateGatewayNetworkingV1GatewayClassData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateGatewayNetworkingV1GatewayClassResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/gatewayclasses',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * delete a GatewayClass
 */
export const deleteGatewayNetworkingV1GatewayClass = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteGatewayNetworkingV1GatewayClassData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGatewayNetworkingV1GatewayClassResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/gatewayclasses/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * read the specified GatewayClass
 */
export const readGatewayNetworkingV1GatewayClass = <ThrowOnError extends boolean = false>(
  options: Options<ReadGatewayNetworkingV1GatewayClassData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadGatewayNetworkingV1GatewayClassResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/gatewayclasses/{name}',
    ...options,
  })
}

/**
 * partially update the specified GatewayClass
 */
export const patchGatewayNetworkingV1GatewayClass = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchGatewayNetworkingV1GatewayClassData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchGatewayNetworkingV1GatewayClassResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/gatewayclasses/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace the specified GatewayClass
 */
export const replaceGatewayNetworkingV1GatewayClass = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReplaceGatewayNetworkingV1GatewayClassData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceGatewayNetworkingV1GatewayClassResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/gatewayclasses/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * read status of the specified GatewayClass
 */
export const readGatewayNetworkingV1GatewayClassStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReadGatewayNetworkingV1GatewayClassStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadGatewayNetworkingV1GatewayClassStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/gatewayclasses/{name}/status',
    ...options,
  })
}

/**
 * partially update status of the specified GatewayClass
 */
export const patchGatewayNetworkingV1GatewayClassStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchGatewayNetworkingV1GatewayClassStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchGatewayNetworkingV1GatewayClassStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/gatewayclasses/{name}/status',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace status of the specified GatewayClass
 */
export const replaceGatewayNetworkingV1GatewayClassStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReplaceGatewayNetworkingV1GatewayClassStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceGatewayNetworkingV1GatewayClassStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/gatewayclasses/{name}/status',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * list objects of kind Gateway
 */
export const listGatewayNetworkingV1GatewayForAllNamespaces = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListGatewayNetworkingV1GatewayForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListGatewayNetworkingV1GatewayForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/gateways',
    ...options,
  })
}

/**
 * list objects of kind HTTPRoute
 */
export const listGatewayNetworkingV1HttpRouteForAllNamespaces = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListGatewayNetworkingV1HttpRouteForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListGatewayNetworkingV1HttpRouteForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/httproutes',
    ...options,
  })
}

/**
 * delete collection of Gateway
 */
export const deleteGatewayNetworkingV1CollectionNamespacedGateway = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteGatewayNetworkingV1CollectionNamespacedGatewayData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGatewayNetworkingV1CollectionNamespacedGatewayResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways',
    ...options,
  })
}

/**
 * list objects of kind Gateway
 */
export const listGatewayNetworkingV1NamespacedGateway = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ListGatewayNetworkingV1NamespacedGatewayData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListGatewayNetworkingV1NamespacedGatewayResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways',
    ...options,
  })
}

/**
 * create a Gateway
 */
export const createGatewayNetworkingV1NamespacedGateway = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateGatewayNetworkingV1NamespacedGatewayData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateGatewayNetworkingV1NamespacedGatewayResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * delete a Gateway
 */
export const deleteGatewayNetworkingV1NamespacedGateway = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteGatewayNetworkingV1NamespacedGatewayData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGatewayNetworkingV1NamespacedGatewayResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * read the specified Gateway
 */
export const readGatewayNetworkingV1NamespacedGateway = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReadGatewayNetworkingV1NamespacedGatewayData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadGatewayNetworkingV1NamespacedGatewayResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways/{name}',
    ...options,
  })
}

/**
 * partially update the specified Gateway
 */
export const patchGatewayNetworkingV1NamespacedGateway = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchGatewayNetworkingV1NamespacedGatewayData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchGatewayNetworkingV1NamespacedGatewayResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace the specified Gateway
 */
export const replaceGatewayNetworkingV1NamespacedGateway = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReplaceGatewayNetworkingV1NamespacedGatewayData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceGatewayNetworkingV1NamespacedGatewayResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * read status of the specified Gateway
 */
export const readGatewayNetworkingV1NamespacedGatewayStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReadGatewayNetworkingV1NamespacedGatewayStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadGatewayNetworkingV1NamespacedGatewayStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways/{name}/status',
    ...options,
  })
}

/**
 * partially update status of the specified Gateway
 */
export const patchGatewayNetworkingV1NamespacedGatewayStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchGatewayNetworkingV1NamespacedGatewayStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchGatewayNetworkingV1NamespacedGatewayStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways/{name}/status',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace status of the specified Gateway
 */
export const replaceGatewayNetworkingV1NamespacedGatewayStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReplaceGatewayNetworkingV1NamespacedGatewayStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceGatewayNetworkingV1NamespacedGatewayStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways/{name}/status',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * delete collection of HTTPRoute
 */
export const deleteGatewayNetworkingV1CollectionNamespacedHttpRoute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteGatewayNetworkingV1CollectionNamespacedHttpRouteData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGatewayNetworkingV1CollectionNamespacedHttpRouteResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/httproutes',
    ...options,
  })
}

/**
 * list objects of kind HTTPRoute
 */
export const listGatewayNetworkingV1NamespacedHttpRoute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ListGatewayNetworkingV1NamespacedHttpRouteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListGatewayNetworkingV1NamespacedHttpRouteResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/httproutes',
    ...options,
  })
}

/**
 * create a HTTPRoute
 */
export const createGatewayNetworkingV1NamespacedHttpRoute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateGatewayNetworkingV1NamespacedHttpRouteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateGatewayNetworkingV1NamespacedHttpRouteResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/httproutes',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * delete a HTTPRoute
 */
export const deleteGatewayNetworkingV1NamespacedHttpRoute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteGatewayNetworkingV1NamespacedHttpRouteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGatewayNetworkingV1NamespacedHttpRouteResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/httproutes/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * read the specified HTTPRoute
 */
export const readGatewayNetworkingV1NamespacedHttpRoute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReadGatewayNetworkingV1NamespacedHttpRouteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadGatewayNetworkingV1NamespacedHttpRouteResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/httproutes/{name}',
    ...options,
  })
}

/**
 * partially update the specified HTTPRoute
 */
export const patchGatewayNetworkingV1NamespacedHttpRoute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchGatewayNetworkingV1NamespacedHttpRouteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchGatewayNetworkingV1NamespacedHttpRouteResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/httproutes/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace the specified HTTPRoute
 */
export const replaceGatewayNetworkingV1NamespacedHttpRoute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReplaceGatewayNetworkingV1NamespacedHttpRouteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceGatewayNetworkingV1NamespacedHttpRouteResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/httproutes/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * read status of the specified HTTPRoute
 */
export const readGatewayNetworkingV1NamespacedHttpRouteStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReadGatewayNetworkingV1NamespacedHttpRouteStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadGatewayNetworkingV1NamespacedHttpRouteStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/httproutes/{name}/status',
    ...options,
  })
}

/**
 * partially update status of the specified HTTPRoute
 */
export const patchGatewayNetworkingV1NamespacedHttpRouteStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchGatewayNetworkingV1NamespacedHttpRouteStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchGatewayNetworkingV1NamespacedHttpRouteStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/httproutes/{name}/status',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace status of the specified HTTPRoute
 */
export const replaceGatewayNetworkingV1NamespacedHttpRouteStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReplaceGatewayNetworkingV1NamespacedHttpRouteStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceGatewayNetworkingV1NamespacedHttpRouteStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/httproutes/{name}/status',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}
