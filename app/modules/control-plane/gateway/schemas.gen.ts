// This file is auto-generated by @hey-api/openapi-ts

export const io_k8s_apimachinery_pkg_apis_meta_v1_DeleteOptionsSchema = {
  description: 'DeleteOptions may be provided when deleting an API object.',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    dryRun: {
      description:
        'When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed',
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
      'x-kubernetes-list-type': 'atomic',
    },
    gracePeriodSeconds: {
      description:
        'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
      type: 'integer',
      format: 'int64',
    },
    ignoreStoreReadErrorWithClusterBreakingPotential: {
      description:
        'if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it',
      type: 'boolean',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    orphanDependents: {
      description: `Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.`,
      type: 'boolean',
    },
    preconditions: {
      description:
        'Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions',
        },
      ],
    },
    propagationPolicy: {
      description:
        "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
      type: 'string',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'apps',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'apps',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'apps',
      kind: 'DeleteOptions',
      version: 'v1beta2',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v2',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v2beta1',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v2beta2',
    },
    {
      group: 'batch',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'batch',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha2',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'discovery.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'discovery.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'events.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'events.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'extensions',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta2',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta3',
    },
    {
      group: 'internal.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'node.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'node.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'node.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'policy',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'policy',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'resource.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha3',
    },
    {
      group: 'resource.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'storagemigration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
  ],
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_FieldsV1Schema = {
  description: `FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

The exact format is defined in sigs.k8s.io/structured-merge-diff`,
  type: 'object',
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_ListMetaSchema = {
  description:
    'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
  type: 'object',
  properties: {
    continue: {
      description:
        'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.',
      type: 'string',
    },
    remainingItemCount: {
      description:
        'remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.',
      type: 'integer',
      format: 'int64',
    },
    resourceVersion: {
      description:
        "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
      type: 'string',
    },
    selfLink: {
      description:
        'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.',
      type: 'string',
    },
  },
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_ManagedFieldsEntrySchema = {
  description:
    'ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.',
      type: 'string',
    },
    fieldsType: {
      description:
        'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"',
      type: 'string',
    },
    fieldsV1: {
      description:
        'FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1',
        },
      ],
    },
    manager: {
      description: 'Manager is an identifier of the workflow managing these fields.',
      type: 'string',
    },
    operation: {
      description:
        "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
      type: 'string',
    },
    subresource: {
      description:
        'Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.',
      type: 'string',
    },
    time: {
      description:
        'Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
  },
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_ObjectMetaSchema = {
  description:
    'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
  type: 'object',
  properties: {
    annotations: {
      description:
        'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations',
      type: 'object',
      additionalProperties: {
        type: 'string',
        default: '',
      },
    },
    creationTimestamp: {
      description: `CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata`,
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
    deletionGracePeriodSeconds: {
      description:
        'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
      type: 'integer',
      format: 'int64',
    },
    deletionTimestamp: {
      description: `DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata`,
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
    finalizers: {
      description:
        'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.',
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
      'x-kubernetes-list-type': 'set',
      'x-kubernetes-patch-strategy': 'merge',
    },
    generateName: {
      description: `GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

If this field is specified and the generated name exists, the server will return a 409.

Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency`,
      type: 'string',
    },
    generation: {
      description:
        'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
      type: 'integer',
      format: 'int64',
    },
    labels: {
      description:
        'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels',
      type: 'object',
      additionalProperties: {
        type: 'string',
        default: '',
      },
    },
    managedFields: {
      description: `ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.`,
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry',
          },
        ],
      },
      'x-kubernetes-list-type': 'atomic',
    },
    name: {
      description:
        'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names',
      type: 'string',
    },
    namespace: {
      description: `Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces`,
      type: 'string',
    },
    ownerReferences: {
      description:
        'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference',
          },
        ],
      },
      'x-kubernetes-list-map-keys': ['uid'],
      'x-kubernetes-list-type': 'map',
      'x-kubernetes-patch-merge-key': 'uid',
      'x-kubernetes-patch-strategy': 'merge',
    },
    resourceVersion: {
      description: `An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency`,
      type: 'string',
    },
    selfLink: {
      description:
        'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.',
      type: 'string',
    },
    uid: {
      description: `UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids`,
      type: 'string',
    },
  },
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_OwnerReferenceSchema = {
  description:
    'OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.',
  type: 'object',
  required: ['apiVersion', 'kind', 'name', 'uid'],
  properties: {
    apiVersion: {
      description: 'API version of the referent.',
      type: 'string',
      default: '',
    },
    blockOwnerDeletion: {
      description:
        'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
      type: 'boolean',
    },
    controller: {
      description: 'If true, this reference points to the managing controller.',
      type: 'boolean',
    },
    kind: {
      description:
        'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
      default: '',
    },
    name: {
      description:
        'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names',
      type: 'string',
      default: '',
    },
    uid: {
      description:
        'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids',
      type: 'string',
      default: '',
    },
  },
  'x-kubernetes-map-type': 'atomic',
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_PatchSchema = {
  description:
    'Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.',
  type: 'object',
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_PreconditionsSchema = {
  description:
    'Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.',
  type: 'object',
  properties: {
    resourceVersion: {
      description: 'Specifies the target ResourceVersion',
      type: 'string',
    },
    uid: {
      description: 'Specifies the target UID.',
      type: 'string',
    },
  },
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_StatusSchema = {
  description: "Status is a return value for calls that don't return other objects.",
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    code: {
      description: 'Suggested HTTP return code for this status, 0 if not set.',
      type: 'integer',
      format: 'int32',
    },
    details: {
      description:
        'Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails',
        },
      ],
      'x-kubernetes-list-type': 'atomic',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    message: {
      description: 'A human-readable description of the status of this operation.',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
    reason: {
      description:
        'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
      type: 'string',
    },
    status: {
      description:
        'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
      type: 'string',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'Status',
      version: 'v1',
    },
  ],
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_StatusCauseSchema = {
  description:
    'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
  type: 'object',
  properties: {
    field: {
      description: `The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

Examples:
  "name" - the field "name" on the current resource
  "items[0].name" - the field "name" on the first array entry in "items"`,
      type: 'string',
    },
    message: {
      description:
        'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
      type: 'string',
    },
    reason: {
      description:
        'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
      type: 'string',
    },
  },
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_StatusDetailsSchema = {
  description:
    'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
  type: 'object',
  properties: {
    causes: {
      description:
        'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause',
          },
        ],
      },
      'x-kubernetes-list-type': 'atomic',
    },
    group: {
      description:
        'The group attribute of the resource associated with the status StatusReason.',
      type: 'string',
    },
    kind: {
      description:
        'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    name: {
      description:
        'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
      type: 'string',
    },
    retryAfterSeconds: {
      description:
        'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
      type: 'integer',
      format: 'int32',
    },
    uid: {
      description:
        'UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids',
      type: 'string',
    },
  },
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_TimeSchema = {
  description:
    'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
  type: 'string',
  format: 'date-time',
} as const

export const io_k8s_networking_gateway_v1_GatewaySchema = {
  description: `Gateway represents an instance of a service-traffic handling infrastructure
by binding Listeners to a set of IP addresses.`,
  type: 'object',
  required: ['spec'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'Spec defines the desired state of Gateway.',
      type: 'object',
      required: ['gatewayClassName', 'listeners'],
      properties: {
        addresses: {
          description: `Addresses requested for this Gateway. This is optional and behavior can
depend on the implementation. If a value is set in the spec and the
requested address is invalid or unavailable, the implementation MUST
indicate this in the associated entry in GatewayStatus.Addresses.

The Addresses field represents a request for the address(es) on the
"outside of the Gateway", that traffic bound for this Gateway will use.
This could be the IP address or hostname of an external load balancer or
other networking infrastructure, or some other address that traffic will
be sent to.

If no Addresses are specified, the implementation MAY schedule the
Gateway in an implementation-specific manner, assigning an appropriate
set of Addresses.

The implementation MUST bind all Listeners to every GatewayAddress that
it assigns to the Gateway and add a corresponding entry in
GatewayStatus.Addresses.

Support: Extended

`,
          type: 'array',
          maxItems: 16,
          items: {
            description:
              'GatewayAddress describes an address that can be bound to a Gateway.',
            type: 'object',
            required: ['value'],
            oneOf: [
              {
                properties: {
                  type: {
                    enum: ['IPAddress'],
                  },
                  value: {
                    anyOf: [
                      {
                        format: 'ipv4',
                      },
                      {
                        format: 'ipv6',
                      },
                    ],
                  },
                },
              },
              {
                properties: {
                  type: {
                    not: {
                      enum: ['IPAddress'],
                    },
                  },
                },
              },
            ],
            properties: {
              type: {
                description: 'Type of the address.',
                type: 'string',
                default: 'IPAddress',
                maxLength: 253,
                minLength: 1,
                pattern:
                  "^Hostname|IPAddress|NamedAddress|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/[A-Za-z0-9\\/\\-._~%!$&'()*+,;=:]+$",
              },
              value: {
                description: `Value of the address. The validity of the values will depend
on the type and support by the controller.

Examples: \`1.2.3.4\`, \`128::1\`, \`my-ip-address\`.`,
                type: 'string',
                maxLength: 253,
                minLength: 1,
              },
            },
            'x-kubernetes-validations': [
              {
                rule: String.raw`self.type == 'Hostname' ? self.value.matches(r"^(\*\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"): true`,
                message: String.raw`Hostname value must only contain valid characters (matching ^(\*\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$)`,
              },
            ],
          },
          'x-kubernetes-validations': [
            {
              rule: "self.all(a1, a1.type == 'IPAddress' ? self.exists_one(a2, a2.type == a1.type && a2.value == a1.value) : true )",
              message: 'IPAddress values must be unique',
            },
            {
              rule: "self.all(a1, a1.type == 'Hostname' ? self.exists_one(a2, a2.type == a1.type && a2.value == a1.value) : true )",
              message: 'Hostname values must be unique',
            },
          ],
        },
        gatewayClassName: {
          description: `GatewayClassName used for this Gateway. This is the name of a
GatewayClass resource.`,
          type: 'string',
          maxLength: 253,
          minLength: 1,
        },
        infrastructure: {
          description: `Infrastructure defines infrastructure level attributes about this Gateway instance.

Support: Extended`,
          type: 'object',
          properties: {
            annotations: {
              description: `Annotations that SHOULD be applied to any resources created in response to this Gateway.

For implementations creating other Kubernetes objects, this should be the \`metadata.annotations\` field on resources.
For other implementations, this refers to any relevant (implementation specific) "annotations" concepts.

An implementation may chose to add additional implementation-specific annotations as they see fit.

Support: Extended`,
              type: 'object',
              maxProperties: 8,
              additionalProperties: {
                description: `AnnotationValue is the value of an annotation in Gateway API. This is used
for validation of maps such as TLS options. This roughly matches Kubernetes
annotation validation, although the length validation in that case is based
on the entire size of the annotations struct.`,
                type: 'string',
                maxLength: 4096,
                minLength: 0,
              },
              'x-kubernetes-validations': [
                {
                  rule: 'self.all(key, key.matches(r"""^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?([A-Za-z0-9][-A-Za-z0-9_.]{0,61})?[A-Za-z0-9]$"""))',
                  message:
                    'Annotation keys must be in the form of an optional DNS subdomain prefix followed by a required name segment of up to 63 characters.',
                },
                {
                  rule: 'self.all(key, key.split("/")[0].size() < 253)',
                  message:
                    "If specified, the annotation key's prefix must be a DNS subdomain not longer than 253 characters in total.",
                },
              ],
            },
            labels: {
              description: `Labels that SHOULD be applied to any resources created in response to this Gateway.

For implementations creating other Kubernetes objects, this should be the \`metadata.labels\` field on resources.
For other implementations, this refers to any relevant (implementation specific) "labels" concepts.

An implementation may chose to add additional implementation-specific labels as they see fit.

If an implementation maps these labels to Pods, or any other resource that would need to be recreated when labels
change, it SHOULD clearly warn about this behavior in documentation.

Support: Extended`,
              type: 'object',
              maxProperties: 8,
              additionalProperties: {
                description: `LabelValue is the value of a label in the Gateway API. This is used for validation
of maps such as Gateway infrastructure labels. This matches the Kubernetes
label validation rules:
* must be 63 characters or less (can be empty),
* unless empty, must begin and end with an alphanumeric character ([a-z0-9A-Z]),
* could contain dashes (-), underscores (_), dots (.), and alphanumerics between.

Valid values include:

* MyValue
* my.name
* 123-my-value`,
                type: 'string',
                maxLength: 63,
                minLength: 0,
                pattern: '^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$',
              },
              'x-kubernetes-validations': [
                {
                  rule: 'self.all(key, key.matches(r"""^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?([A-Za-z0-9][-A-Za-z0-9_.]{0,61})?[A-Za-z0-9]$"""))',
                  message:
                    'Label keys must be in the form of an optional DNS subdomain prefix followed by a required name segment of up to 63 characters.',
                },
                {
                  rule: 'self.all(key, key.split("/")[0].size() < 253)',
                  message:
                    "If specified, the label key's prefix must be a DNS subdomain not longer than 253 characters in total.",
                },
              ],
            },
            parametersRef: {
              description: `ParametersRef is a reference to a resource that contains the configuration
parameters corresponding to the Gateway. This is optional if the
controller does not require any additional configuration.

This follows the same semantics as GatewayClass's \`parametersRef\`, but on a per-Gateway basis

The Gateway's GatewayClass may provide its own \`parametersRef\`. When both are specified,
the merging behavior is implementation specific.
It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.

Support: Implementation-specific`,
              type: 'object',
              required: ['group', 'kind', 'name'],
              properties: {
                group: {
                  description: 'Group is the group of the referent.',
                  type: 'string',
                  maxLength: 253,
                  pattern:
                    '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                },
                kind: {
                  description: 'Kind is kind of the referent.',
                  type: 'string',
                  maxLength: 63,
                  minLength: 1,
                  pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                },
                name: {
                  description: 'Name is the name of the referent.',
                  type: 'string',
                  maxLength: 253,
                  minLength: 1,
                },
              },
            },
          },
        },
        listeners: {
          description: `Listeners associated with this Gateway. Listeners define
logical endpoints that are bound on this Gateway's addresses.
At least one Listener MUST be specified.

Each Listener in a set of Listeners (for example, in a single Gateway)
MUST be _distinct_, in that a traffic flow MUST be able to be assigned to
exactly one listener. (This section uses "set of Listeners" rather than
"Listeners in a single Gateway" because implementations MAY merge configuration
from multiple Gateways onto a single data plane, and these rules _also_
apply in that case).

Practically, this means that each listener in a set MUST have a unique
combination of Port, Protocol, and, if supported by the protocol, Hostname.

Some combinations of port, protocol, and TLS settings are considered
Core support and MUST be supported by implementations based on their
targeted conformance profile:

HTTP Profile

1. HTTPRoute, Port: 80, Protocol: HTTP
2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided

TLS Profile

1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough

"Distinct" Listeners have the following property:

The implementation can match inbound requests to a single distinct
Listener. When multiple Listeners share values for fields (for
example, two Listeners with the same Port value), the implementation
can match requests to only one of the Listeners using other
Listener fields.

For example, the following Listener scenarios are distinct:

1. Multiple Listeners with the same Port that all use the "HTTP"
   Protocol that all have unique Hostname values.
2. Multiple Listeners with the same Port that use either the "HTTPS" or
   "TLS" Protocol that all have unique Hostname values.
3. A mixture of "TCP" and "UDP" Protocol Listeners, where no Listener
   with the same Protocol has the same Port value.

Some fields in the Listener struct have possible values that affect
whether the Listener is distinct. Hostname is particularly relevant
for HTTP or HTTPS protocols.

When using the Hostname value to select between same-Port, same-Protocol
Listeners, the Hostname value must be different on each Listener for the
Listener to be distinct.

When the Listeners are distinct based on Hostname, inbound request
hostnames MUST match from the most specific to least specific Hostname
values to choose the correct Listener and its associated set of Routes.

Exact matches must be processed before wildcard matches, and wildcard
matches must be processed before fallback (empty Hostname value)
matches. For example, \`"foo.example.com"\` takes precedence over
\`"*.example.com"\`, and \`"*.example.com"\` takes precedence over \`""\`.

Additionally, if there are multiple wildcard entries, more specific
wildcard entries must be processed before less specific wildcard entries.
For example, \`"*.foo.example.com"\` takes precedence over \`"*.example.com"\`.
The precise definition here is that the higher the number of dots in the
hostname to the right of the wildcard character, the higher the precedence.

The wildcard character will match any number of characters _and dots_ to
the left, however, so \`"*.example.com"\` will match both
\`"foo.bar.example.com"\` _and_ \`"bar.example.com"\`.

If a set of Listeners contains Listeners that are not distinct, then those
Listeners are Conflicted, and the implementation MUST set the "Conflicted"
condition in the Listener Status to "True".

Implementations MAY choose to accept a Gateway with some Conflicted
Listeners only if they only accept the partial Listener set that contains
no Conflicted Listeners. To put this another way, implementations may
accept a partial Listener set only if they throw out *all* the conflicting
Listeners. No picking one of the conflicting listeners as the winner.
This also means that the Gateway must have at least one non-conflicting
Listener in this case, otherwise it violates the requirement that at
least one Listener must be present.

The implementation MUST set a "ListenersNotValid" condition on the
Gateway Status when the Gateway contains Conflicted Listeners whether or
not they accept the Gateway. That Condition SHOULD clearly
indicate in the Message which Listeners are conflicted, and which are
Accepted. Additionally, the Listener status for those listeners SHOULD
indicate which Listeners are conflicted and not Accepted.

A Gateway's Listeners are considered "compatible" if:

1. They are distinct.
2. The implementation can serve them in compliance with the Addresses
   requirement that all Listeners are available on all assigned
   addresses.

Compatible combinations in Extended support are expected to vary across
implementations. A combination that is compatible for one implementation
may not be compatible for another.

For example, an implementation that cannot serve both TCP and UDP listeners
on the same address, or cannot mix HTTPS and generic TLS listens on the same port
would not consider those cases compatible, even though they are distinct.

Note that requests SHOULD match at most one Listener. For example, if
Listeners are defined for "foo.example.com" and "*.example.com", a
request to "foo.example.com" SHOULD only be routed using routes attached
to the "foo.example.com" Listener (and not the "*.example.com" Listener).
This concept is known as "Listener Isolation". Implementations that do
not support Listener Isolation MUST clearly document this.

Implementations MAY merge separate Gateways onto a single set of
Addresses if all Listeners across all Gateways are compatible.

Support: Core`,
          type: 'array',
          maxItems: 64,
          minItems: 1,
          items: {
            description: `Listener embodies the concept of a logical endpoint where a Gateway accepts
network connections.`,
            type: 'object',
            required: ['name', 'port', 'protocol'],
            properties: {
              allowedRoutes: {
                description: `AllowedRoutes defines the types of routes that MAY be attached to a
Listener and the trusted namespaces where those Route resources MAY be
present.

Although a client request may match multiple route rules, only one rule
may ultimately receive the request. Matching precedence MUST be
determined in order of the following criteria:

* The most specific match as defined by the Route type.
* The oldest Route based on creation timestamp. For example, a Route with
  a creation timestamp of "2020-09-08 01:02:03" is given precedence over
  a Route with a creation timestamp of "2020-09-08 01:02:04".
* If everything else is equivalent, the Route appearing first in
  alphabetical order (namespace/name) should be given precedence. For
  example, foo/bar is given precedence over foo/baz.

All valid rules within a Route attached to this Listener should be
implemented. Invalid Route rules can be ignored (sometimes that will mean
the full Route). If a Route rule transitions from valid to invalid,
support for that Route rule should be dropped to ensure consistency. For
example, even if a filter specified by a Route rule is invalid, the rest
of the rules within that Route should still be supported.

Support: Core`,
                type: 'object',
                default: {
                  namespaces: {
                    from: 'Same',
                  },
                },
                properties: {
                  kinds: {
                    description: `Kinds specifies the groups and kinds of Routes that are allowed to bind
to this Gateway Listener. When unspecified or empty, the kinds of Routes
selected are determined using the Listener protocol.

A RouteGroupKind MUST correspond to kinds of Routes that are compatible
with the application protocol specified in the Listener's Protocol field.
If an implementation does not support or recognize this resource type, it
MUST set the "ResolvedRefs" condition to False for this Listener with the
"InvalidRouteKinds" reason.

Support: Core`,
                    type: 'array',
                    maxItems: 8,
                    items: {
                      description:
                        'RouteGroupKind indicates the group and kind of a Route resource.',
                      type: 'object',
                      required: ['kind'],
                      properties: {
                        group: {
                          description: 'Group is the group of the Route.',
                          type: 'string',
                          default: 'gateway.networking.k8s.io',
                          maxLength: 253,
                          pattern:
                            '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                        },
                        kind: {
                          description: 'Kind is the kind of the Route.',
                          type: 'string',
                          maxLength: 63,
                          minLength: 1,
                          pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                        },
                      },
                    },
                  },
                  namespaces: {
                    description: `Namespaces indicates namespaces from which Routes may be attached to this
Listener. This is restricted to the namespace of this Gateway by default.

Support: Core`,
                    type: 'object',
                    default: {
                      from: 'Same',
                    },
                    properties: {
                      from: {
                        description: `From indicates where Routes will be selected for this Gateway. Possible
values are:

* All: Routes in all namespaces may be used by this Gateway.
* Selector: Routes in namespaces selected by the selector may be used by
  this Gateway.
* Same: Only Routes in the same namespace may be used by this Gateway.

Support: Core`,
                        type: 'string',
                        default: 'Same',
                        enum: ['All', 'Selector', 'Same'],
                      },
                      selector: {
                        description: `Selector must be specified when From is set to "Selector". In that case,
only Routes in Namespaces matching this Selector will be selected by this
Gateway. This field is ignored for other values of "From".

Support: Core`,
                        type: 'object',
                        properties: {
                          matchExpressions: {
                            description:
                              'matchExpressions is a list of label selector requirements. The requirements are ANDed.',
                            type: 'array',
                            items: {
                              description: `A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.`,
                              type: 'object',
                              required: ['key', 'operator'],
                              properties: {
                                key: {
                                  description:
                                    'key is the label key that the selector applies to.',
                                  type: 'string',
                                },
                                operator: {
                                  description: `operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists and DoesNotExist.`,
                                  type: 'string',
                                },
                                values: {
                                  description: `values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. This array is replaced during a strategic
merge patch.`,
                                  type: 'array',
                                  items: {
                                    type: 'string',
                                  },
                                  'x-kubernetes-list-type': 'atomic',
                                },
                              },
                            },
                            'x-kubernetes-list-type': 'atomic',
                          },
                          matchLabels: {
                            description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
map is equivalent to an element of matchExpressions, whose key field is "key", the
operator is "In", and the values array contains only "value". The requirements are ANDed.`,
                            type: 'object',
                            additionalProperties: {
                              type: 'string',
                            },
                          },
                        },
                        'x-kubernetes-map-type': 'atomic',
                      },
                    },
                  },
                },
              },
              hostname: {
                description: `Hostname specifies the virtual hostname to match for protocol types that
define this concept. When unspecified, all hostnames are matched. This
field is ignored for protocols that don't require hostname based
matching.

Implementations MUST apply Hostname matching appropriately for each of
the following protocols:

* TLS: The Listener Hostname MUST match the SNI.
* HTTP: The Listener Hostname MUST match the Host header of the request.
* HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP
  protocol layers as described above. If an implementation does not
  ensure that both the SNI and Host header match the Listener hostname,
  it MUST clearly document that.

For HTTPRoute and TLSRoute resources, there is an interaction with the
\`spec.hostnames\` array. When both listener and route specify hostnames,
there MUST be an intersection between the values for a Route to be
accepted. For more information, refer to the Route specific Hostnames
documentation.

Hostnames that are prefixed with a wildcard label (\`*.\`) are interpreted
as a suffix match. That means that a match for \`*.example.com\` would match
both \`test.example.com\`, and \`foo.test.example.com\`, but not \`example.com\`.

Support: Core`,
                type: 'string',
                maxLength: 253,
                minLength: 1,
                pattern:
                  '^(\\*\\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
              },
              name: {
                description: `Name is the name of the Listener. This name MUST be unique within a
Gateway.

Support: Core`,
                type: 'string',
                maxLength: 253,
                minLength: 1,
                pattern:
                  '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
              },
              port: {
                description: `Port is the network port. Multiple listeners may use the
same port, subject to the Listener compatibility rules.

Support: Core`,
                type: 'integer',
                format: 'int32',
                maximum: 65535,
                minimum: 1,
              },
              protocol: {
                description: `Protocol specifies the network protocol this listener expects to receive.

Support: Core`,
                type: 'string',
                maxLength: 255,
                minLength: 1,
                pattern:
                  '^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/[A-Za-z0-9]+$',
              },
              tls: {
                description: `TLS is the TLS configuration for the Listener. This field is required if
the Protocol field is "HTTPS" or "TLS". It is invalid to set this field
if the Protocol field is "HTTP", "TCP", or "UDP".

The association of SNIs to Certificate defined in GatewayTLSConfig is
defined based on the Hostname field for this listener.

The GatewayClass MUST use the longest matching SNI out of all
available certificates for any TLS handshake.

Support: Core`,
                type: 'object',
                properties: {
                  certificateRefs: {
                    description: `CertificateRefs contains a series of references to Kubernetes objects that
contains TLS certificates and private keys. These certificates are used to
establish a TLS handshake for requests that match the hostname of the
associated listener.

A single CertificateRef to a Kubernetes Secret has "Core" support.
Implementations MAY choose to support attaching multiple certificates to
a Listener, but this behavior is implementation-specific.

References to a resource in different namespace are invalid UNLESS there
is a ReferenceGrant in the target namespace that allows the certificate
to be attached. If a ReferenceGrant does not allow this reference, the
"ResolvedRefs" condition MUST be set to False for this listener with the
"RefNotPermitted" reason.

This field is required to have at least one element when the mode is set
to "Terminate" (default) and is optional otherwise.

CertificateRefs can reference to standard Kubernetes resources, i.e.
Secret, or implementation-specific custom resources.

Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls

Support: Implementation-specific (More than one reference or other resource types)`,
                    type: 'array',
                    maxItems: 64,
                    items: {
                      description: `SecretObjectReference identifies an API object including its namespace,
defaulting to Secret.

The API object must be valid in the cluster; the Group and Kind must
be registered in the cluster for this reference to be valid.

References to objects with invalid Group and Kind are not valid, and must
be rejected by the implementation, with appropriate Conditions set
on the containing object.`,
                      type: 'object',
                      required: ['name'],
                      properties: {
                        group: {
                          description: `Group is the group of the referent. For example, "gateway.networking.k8s.io".
When unspecified or empty string, core API group is inferred.`,
                          type: 'string',
                          default: '',
                          maxLength: 253,
                          pattern:
                            '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                        },
                        kind: {
                          description:
                            'Kind is kind of the referent. For example "Secret".',
                          type: 'string',
                          default: 'Secret',
                          maxLength: 63,
                          minLength: 1,
                          pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                        },
                        name: {
                          description: 'Name is the name of the referent.',
                          type: 'string',
                          maxLength: 253,
                          minLength: 1,
                        },
                        namespace: {
                          description: `Namespace is the namespace of the referenced object. When unspecified, the local
namespace is inferred.

Note that when a namespace different than the local namespace is specified,
a ReferenceGrant object is required in the referent namespace to allow that
namespace's owner to accept the reference. See the ReferenceGrant
documentation for details.

Support: Core`,
                          type: 'string',
                          maxLength: 63,
                          minLength: 1,
                          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$',
                        },
                      },
                    },
                  },
                  mode: {
                    description: `Mode defines the TLS behavior for the TLS session initiated by the client.
There are two possible modes:

- Terminate: The TLS session between the downstream client and the
  Gateway is terminated at the Gateway. This mode requires certificates
  to be specified in some way, such as populating the certificateRefs
  field.
- Passthrough: The TLS session is NOT terminated by the Gateway. This
  implies that the Gateway can't decipher the TLS stream except for
  the ClientHello message of the TLS protocol. The certificateRefs field
  is ignored in this mode.

Support: Core`,
                    type: 'string',
                    default: 'Terminate',
                    enum: ['Terminate', 'Passthrough'],
                  },
                  options: {
                    description: `Options are a list of key/value pairs to enable extended TLS
configuration for each implementation. For example, configuring the
minimum TLS version or supported cipher suites.

A set of common keys MAY be defined by the API in the future. To avoid
any ambiguity, implementation-specific definitions MUST use
domain-prefixed names, such as \`example.com/my-custom-option\`.
Un-prefixed names are reserved for key names defined by Gateway API.

Support: Implementation-specific`,
                    type: 'object',
                    maxProperties: 16,
                    additionalProperties: {
                      description: `AnnotationValue is the value of an annotation in Gateway API. This is used
for validation of maps such as TLS options. This roughly matches Kubernetes
annotation validation, although the length validation in that case is based
on the entire size of the annotations struct.`,
                      type: 'string',
                      maxLength: 4096,
                      minLength: 0,
                    },
                  },
                },
                'x-kubernetes-validations': [
                  {
                    rule: "self.mode == 'Terminate' ? size(self.certificateRefs) > 0 || size(self.options) > 0 : true",
                    message:
                      'certificateRefs or options must be specified when mode is Terminate',
                  },
                ],
              },
            },
          },
          'x-kubernetes-list-map-keys': ['name'],
          'x-kubernetes-list-type': 'map',
          'x-kubernetes-validations': [
            {
              rule: "self.all(l, l.protocol in ['HTTP', 'TCP', 'UDP'] ? !has(l.tls) : true)",
              message: "tls must not be specified for protocols ['HTTP', 'TCP', 'UDP']",
            },
            {
              rule: "self.all(l, (l.protocol == 'HTTPS' && has(l.tls)) ? (l.tls.mode == '' || l.tls.mode == 'Terminate') : true)",
              message: 'tls mode must be Terminate for protocol HTTPS',
            },
            {
              rule: "self.all(l, l.protocol in ['TCP', 'UDP']  ? (!has(l.hostname) || l.hostname == '') : true)",
              message: "hostname must not be specified for protocols ['TCP', 'UDP']",
            },
            {
              rule: 'self.all(l1, self.exists_one(l2, l1.name == l2.name))',
              message: 'Listener name must be unique within the Gateway',
            },
            {
              rule: 'self.all(l1, self.exists_one(l2, l1.port == l2.port && l1.protocol == l2.protocol && (has(l1.hostname) && has(l2.hostname) ? l1.hostname == l2.hostname : !has(l1.hostname) && !has(l2.hostname))))',
              message:
                'Combination of port, protocol and hostname must be unique for each listener',
            },
          ],
        },
      },
    },
    status: {
      description: 'Status defines the current state of Gateway.',
      type: 'object',
      default: {
        conditions: [
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Accepted',
          },
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Programmed',
          },
        ],
      },
      properties: {
        addresses: {
          description: `Addresses lists the network addresses that have been bound to the
Gateway.

This list may differ from the addresses provided in the spec under some
conditions:

  * no addresses are specified, all addresses are dynamically assigned
  * a combination of specified and dynamic addresses are assigned
  * a specified address was unusable (e.g. already in use)

`,
          type: 'array',
          maxItems: 16,
          items: {
            description:
              'GatewayStatusAddress describes a network address that is bound to a Gateway.',
            type: 'object',
            required: ['value'],
            oneOf: [
              {
                properties: {
                  type: {
                    enum: ['IPAddress'],
                  },
                  value: {
                    anyOf: [
                      {
                        format: 'ipv4',
                      },
                      {
                        format: 'ipv6',
                      },
                    ],
                  },
                },
              },
              {
                properties: {
                  type: {
                    not: {
                      enum: ['IPAddress'],
                    },
                  },
                },
              },
            ],
            properties: {
              type: {
                description: 'Type of the address.',
                type: 'string',
                default: 'IPAddress',
                maxLength: 253,
                minLength: 1,
                pattern:
                  "^Hostname|IPAddress|NamedAddress|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/[A-Za-z0-9\\/\\-._~%!$&'()*+,;=:]+$",
              },
              value: {
                description: `Value of the address. The validity of the values will depend
on the type and support by the controller.

Examples: \`1.2.3.4\`, \`128::1\`, \`my-ip-address\`.`,
                type: 'string',
                maxLength: 253,
                minLength: 1,
              },
            },
            'x-kubernetes-validations': [
              {
                rule: String.raw`self.type == 'Hostname' ? self.value.matches(r"^(\*\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"): true`,
                message: String.raw`Hostname value must only contain valid characters (matching ^(\*\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$)`,
              },
            ],
          },
        },
        conditions: {
          description: `Conditions describe the current conditions of the Gateway.

Implementations should prefer to express Gateway conditions
using the \`GatewayConditionType\` and \`GatewayConditionReason\`
constants so that operators and tools can converge on a common
vocabulary to describe Gateway state.

Known condition types are:

* "Accepted"
* "Programmed"
* "Ready"`,
          type: 'array',
          default: [
            {
              lastTransitionTime: '1970-01-01T00:00:00Z',
              message: 'Waiting for controller',
              reason: 'Pending',
              status: 'Unknown',
              type: 'Accepted',
            },
            {
              lastTransitionTime: '1970-01-01T00:00:00Z',
              message: 'Waiting for controller',
              reason: 'Pending',
              status: 'Unknown',
              type: 'Programmed',
            },
          ],
          maxItems: 8,
          items: {
            description:
              'Condition contains details for one aspect of the current state of this API Resource.',
            type: 'object',
            required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
            properties: {
              lastTransitionTime: {
                description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                type: 'string',
                format: 'date-time',
              },
              message: {
                description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                type: 'string',
                maxLength: 32768,
              },
              observedGeneration: {
                description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                type: 'integer',
                format: 'int64',
                minimum: 0,
              },
              reason: {
                description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                type: 'string',
                maxLength: 1024,
                minLength: 1,
                pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
              },
              status: {
                description: 'status of the condition, one of True, False, Unknown.',
                type: 'string',
                enum: ['True', 'False', 'Unknown'],
              },
              type: {
                description:
                  'type of condition in CamelCase or in foo.example.com/CamelCase.',
                type: 'string',
                maxLength: 316,
                pattern:
                  '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
              },
            },
          },
          'x-kubernetes-list-map-keys': ['type'],
          'x-kubernetes-list-type': 'map',
        },
        listeners: {
          description:
            'Listeners provide status for each unique listener port defined in the Spec.',
          type: 'array',
          maxItems: 64,
          items: {
            description: 'ListenerStatus is the status associated with a Listener.',
            type: 'object',
            required: ['attachedRoutes', 'conditions', 'name', 'supportedKinds'],
            properties: {
              attachedRoutes: {
                description: `AttachedRoutes represents the total number of Routes that have been
successfully attached to this Listener.

Successful attachment of a Route to a Listener is based solely on the
combination of the AllowedRoutes field on the corresponding Listener
and the Route's ParentRefs field. A Route is successfully attached to
a Listener when it is selected by the Listener's AllowedRoutes field
AND the Route has a valid ParentRef selecting the whole Gateway
resource or a specific Listener as a parent resource (more detail on
attachment semantics can be found in the documentation on the various
Route kinds ParentRefs fields). Listener or Route status does not impact
successful attachment, i.e. the AttachedRoutes field count MUST be set
for Listeners with condition Accepted: false and MUST count successfully
attached Routes that may themselves have Accepted: false conditions.

Uses for this field include troubleshooting Route attachment and
measuring blast radius/impact of changes to a Listener.`,
                type: 'integer',
                format: 'int32',
              },
              conditions: {
                description:
                  'Conditions describe the current condition of this listener.',
                type: 'array',
                maxItems: 8,
                items: {
                  description:
                    'Condition contains details for one aspect of the current state of this API Resource.',
                  type: 'object',
                  required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
                  properties: {
                    lastTransitionTime: {
                      description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                      type: 'string',
                      format: 'date-time',
                    },
                    message: {
                      description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                      type: 'string',
                      maxLength: 32768,
                    },
                    observedGeneration: {
                      description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                      type: 'integer',
                      format: 'int64',
                      minimum: 0,
                    },
                    reason: {
                      description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                      type: 'string',
                      maxLength: 1024,
                      minLength: 1,
                      pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
                    },
                    status: {
                      description:
                        'status of the condition, one of True, False, Unknown.',
                      type: 'string',
                      enum: ['True', 'False', 'Unknown'],
                    },
                    type: {
                      description:
                        'type of condition in CamelCase or in foo.example.com/CamelCase.',
                      type: 'string',
                      maxLength: 316,
                      pattern:
                        '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
                    },
                  },
                },
                'x-kubernetes-list-map-keys': ['type'],
                'x-kubernetes-list-type': 'map',
              },
              name: {
                description:
                  'Name is the name of the Listener that this status corresponds to.',
                type: 'string',
                maxLength: 253,
                minLength: 1,
                pattern:
                  '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
              },
              supportedKinds: {
                description: `SupportedKinds is the list indicating the Kinds supported by this
listener. This MUST represent the kinds an implementation supports for
that Listener configuration.

If kinds are specified in Spec that are not supported, they MUST NOT
appear in this list and an implementation MUST set the "ResolvedRefs"
condition to "False" with the "InvalidRouteKinds" reason. If both valid
and invalid Route kinds are specified, the implementation MUST
reference the valid Route kinds that have been specified.`,
                type: 'array',
                maxItems: 8,
                items: {
                  description:
                    'RouteGroupKind indicates the group and kind of a Route resource.',
                  type: 'object',
                  required: ['kind'],
                  properties: {
                    group: {
                      description: 'Group is the group of the Route.',
                      type: 'string',
                      default: 'gateway.networking.k8s.io',
                      maxLength: 253,
                      pattern:
                        '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                    },
                    kind: {
                      description: 'Kind is the kind of the Route.',
                      type: 'string',
                      maxLength: 63,
                      minLength: 1,
                      pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                    },
                  },
                },
              },
            },
          },
          'x-kubernetes-list-map-keys': ['name'],
          'x-kubernetes-list-type': 'map',
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'gateway.networking.k8s.io',
      kind: 'Gateway',
      version: 'v1',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const

export const io_k8s_networking_gateway_v1_GatewayClassSchema = {
  description: `GatewayClass describes a class of Gateways available to the user for creating
Gateway resources.

It is recommended that this resource be used as a template for Gateways. This
means that a Gateway is based on the state of the GatewayClass at the time it
was created and changes to the GatewayClass or associated parameters are not
propagated down to existing Gateways. This recommendation is intended to
limit the blast radius of changes to GatewayClass or associated parameters.
If implementations choose to propagate GatewayClass changes to existing
Gateways, that MUST be clearly documented by the implementation.

Whenever one or more Gateways are using a GatewayClass, implementations SHOULD
add the \`gateway-exists-finalizer.gateway.networking.k8s.io\` finalizer on the
associated GatewayClass. This ensures that a GatewayClass associated with a
Gateway is not deleted while in use.

GatewayClass is a Cluster level resource.`,
  type: 'object',
  required: ['spec'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'Spec defines the desired state of GatewayClass.',
      type: 'object',
      required: ['controllerName'],
      properties: {
        controllerName: {
          description: `ControllerName is the name of the controller that is managing Gateways of
this class. The value of this field MUST be a domain prefixed path.

Example: "example.net/gateway-controller".

This field is not mutable and cannot be empty.

Support: Core`,
          type: 'string',
          maxLength: 253,
          minLength: 1,
          pattern:
            "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/[A-Za-z0-9\\/\\-._~%!$&'()*+,;=:]+$",
          'x-kubernetes-validations': [
            {
              rule: 'self == oldSelf',
              message: 'Value is immutable',
            },
          ],
        },
        description: {
          description: 'Description helps describe a GatewayClass with more details.',
          type: 'string',
          maxLength: 64,
        },
        parametersRef: {
          description: `ParametersRef is a reference to a resource that contains the configuration
parameters corresponding to the GatewayClass. This is optional if the
controller does not require any additional configuration.

ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap,
or an implementation-specific custom resource. The resource can be
cluster-scoped or namespace-scoped.

If the referent cannot be found, refers to an unsupported kind, or when
the data within that resource is malformed, the GatewayClass SHOULD be
rejected with the "Accepted" status condition set to "False" and an
"InvalidParameters" reason.

A Gateway for this GatewayClass may provide its own \`parametersRef\`. When both are specified,
the merging behavior is implementation specific.
It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.

Support: Implementation-specific`,
          type: 'object',
          required: ['group', 'kind', 'name'],
          properties: {
            group: {
              description: 'Group is the group of the referent.',
              type: 'string',
              maxLength: 253,
              pattern:
                '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
            },
            kind: {
              description: 'Kind is kind of the referent.',
              type: 'string',
              maxLength: 63,
              minLength: 1,
              pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
            },
            name: {
              description: 'Name is the name of the referent.',
              type: 'string',
              maxLength: 253,
              minLength: 1,
            },
            namespace: {
              description: `Namespace is the namespace of the referent.
This field is required when referring to a Namespace-scoped resource and
MUST be unset when referring to a Cluster-scoped resource.`,
              type: 'string',
              maxLength: 63,
              minLength: 1,
              pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$',
            },
          },
        },
      },
    },
    status: {
      description: `Status defines the current state of GatewayClass.

Implementations MUST populate status on all GatewayClass resources which
specify their controller name.`,
      type: 'object',
      default: {
        conditions: [
          {
            lastTransitionTime: '1970-01-01T00:00:00Z',
            message: 'Waiting for controller',
            reason: 'Pending',
            status: 'Unknown',
            type: 'Accepted',
          },
        ],
      },
      properties: {
        conditions: {
          description: `Conditions is the current status from the controller for
this GatewayClass.

Controllers should prefer to publish conditions using values
of GatewayClassConditionType for the type of each Condition.`,
          type: 'array',
          default: [
            {
              lastTransitionTime: '1970-01-01T00:00:00Z',
              message: 'Waiting for controller',
              reason: 'Pending',
              status: 'Unknown',
              type: 'Accepted',
            },
          ],
          maxItems: 8,
          items: {
            description:
              'Condition contains details for one aspect of the current state of this API Resource.',
            type: 'object',
            required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
            properties: {
              lastTransitionTime: {
                description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                type: 'string',
                format: 'date-time',
              },
              message: {
                description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                type: 'string',
                maxLength: 32768,
              },
              observedGeneration: {
                description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                type: 'integer',
                format: 'int64',
                minimum: 0,
              },
              reason: {
                description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                type: 'string',
                maxLength: 1024,
                minLength: 1,
                pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
              },
              status: {
                description: 'status of the condition, one of True, False, Unknown.',
                type: 'string',
                enum: ['True', 'False', 'Unknown'],
              },
              type: {
                description:
                  'type of condition in CamelCase or in foo.example.com/CamelCase.',
                type: 'string',
                maxLength: 316,
                pattern:
                  '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
              },
            },
          },
          'x-kubernetes-list-map-keys': ['type'],
          'x-kubernetes-list-type': 'map',
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'gateway.networking.k8s.io',
      kind: 'GatewayClass',
      version: 'v1',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const

export const io_k8s_networking_gateway_v1_GatewayClassListSchema = {
  description: 'GatewayClassList is a list of GatewayClass',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of gatewayclasses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/io.k8s.networking.gateway.v1.GatewayClass',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'gateway.networking.k8s.io',
      kind: 'GatewayClassList',
      version: 'v1',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const

export const io_k8s_networking_gateway_v1_GatewayListSchema = {
  description: 'GatewayList is a list of Gateway',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of gateways. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/io.k8s.networking.gateway.v1.Gateway',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'gateway.networking.k8s.io',
      kind: 'GatewayList',
      version: 'v1',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const

export const io_k8s_networking_gateway_v1_HTTPRouteSchema = {
  description: `HTTPRoute provides a way to route HTTP requests. This includes the capability
to match requests by hostname, path, header, or query param. Filters can be
used to specify additional processing steps. Backends specify where matching
requests should be routed.`,
  type: 'object',
  required: ['spec'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'Spec defines the desired state of HTTPRoute.',
      type: 'object',
      properties: {
        hostnames: {
          description: `Hostnames defines a set of hostnames that should match against the HTTP Host
header to select a HTTPRoute used to process the request. Implementations
MUST ignore any port value specified in the HTTP Host header while
performing a match and (absent of any applicable header modification
configuration) MUST forward this header unmodified to the backend.

Valid values for Hostnames are determined by RFC 1123 definition of a
hostname with 2 notable exceptions:

1. IPs are not allowed.
2. A hostname may be prefixed with a wildcard label (\`*.\`). The wildcard
   label must appear by itself as the first label.

If a hostname is specified by both the Listener and HTTPRoute, there
must be at least one intersecting hostname for the HTTPRoute to be
attached to the Listener. For example:

* A Listener with \`test.example.com\` as the hostname matches HTTPRoutes
  that have either not specified any hostnames, or have specified at
  least one of \`test.example.com\` or \`*.example.com\`.
* A Listener with \`*.example.com\` as the hostname matches HTTPRoutes
  that have either not specified any hostnames or have specified at least
  one hostname that matches the Listener hostname. For example,
  \`*.example.com\`, \`test.example.com\`, and \`foo.test.example.com\` would
  all match. On the other hand, \`example.com\` and \`test.example.net\` would
  not match.

Hostnames that are prefixed with a wildcard label (\`*.\`) are interpreted
as a suffix match. That means that a match for \`*.example.com\` would match
both \`test.example.com\`, and \`foo.test.example.com\`, but not \`example.com\`.

If both the Listener and HTTPRoute have specified hostnames, any
HTTPRoute hostnames that do not match the Listener hostname MUST be
ignored. For example, if a Listener specified \`*.example.com\`, and the
HTTPRoute specified \`test.example.com\` and \`test.example.net\`,
\`test.example.net\` must not be considered for a match.

If both the Listener and HTTPRoute have specified hostnames, and none
match with the criteria above, then the HTTPRoute is not accepted. The
implementation must raise an 'Accepted' Condition with a status of
\`False\` in the corresponding RouteParentStatus.

In the event that multiple HTTPRoutes specify intersecting hostnames (e.g.
overlapping wildcard matching and exact matching hostnames), precedence must
be given to rules from the HTTPRoute with the largest number of:

* Characters in a matching non-wildcard hostname.
* Characters in a matching hostname.

If ties exist across multiple Routes, the matching precedence rules for
HTTPRouteMatches takes over.

Support: Core`,
          type: 'array',
          maxItems: 16,
          items: {
            description: `Hostname is the fully qualified domain name of a network host. This matches
the RFC 1123 definition of a hostname with 2 notable exceptions:

 1. IPs are not allowed.
 2. A hostname may be prefixed with a wildcard label (\`*.\`). The wildcard
    label must appear by itself as the first label.

Hostname can be "precise" which is a domain name without the terminating
dot of a network host (e.g. "foo.example.com") or "wildcard", which is a
domain name prefixed with a single wildcard label (e.g. \`*.example.com\`).

Note that as per RFC1035 and RFC1123, a *label* must consist of lower case
alphanumeric characters or '-', and must start and end with an alphanumeric
character. No other punctuation is allowed.`,
            type: 'string',
            maxLength: 253,
            minLength: 1,
            pattern:
              '^(\\*\\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
          },
        },
        parentRefs: {
          description: `ParentRefs references the resources (usually Gateways) that a Route wants
to be attached to. Note that the referenced parent resource needs to
allow this for the attachment to be complete. For Gateways, that means
the Gateway needs to allow attachment from Routes of this kind and
namespace. For Services, that means the Service must either be in the same
namespace for a "producer" route, or the mesh implementation must support
and allow "consumer" routes for the referenced Service. ReferenceGrant is
not applicable for governing ParentRefs to Services - it is not possible to
create a "producer" route for a Service in a different namespace from the
Route.

There are two kinds of parent resources with "Core" support:

* Gateway (Gateway conformance profile)
* Service (Mesh conformance profile, ClusterIP Services only)

This API may be extended in the future to support additional kinds of parent
resources.

ParentRefs must be _distinct_. This means either that:

* They select different objects.  If this is the case, then parentRef
  entries are distinct. In terms of fields, this means that the
  multi-part key defined by \`group\`, \`kind\`, \`namespace\`, and \`name\` must
  be unique across all parentRef entries in the Route.
* They do not select different objects, but for each optional field used,
  each ParentRef that selects the same object must set the same set of
  optional fields to different values. If one ParentRef sets a
  combination of optional fields, all must set the same combination.

Some examples:

* If one ParentRef sets \`sectionName\`, all ParentRefs referencing the
  same object must also set \`sectionName\`.
* If one ParentRef sets \`port\`, all ParentRefs referencing the same
  object must also set \`port\`.
* If one ParentRef sets \`sectionName\` and \`port\`, all ParentRefs
  referencing the same object must also set \`sectionName\` and \`port\`.

It is possible to separately reference multiple distinct objects that may
be collapsed by an implementation. For example, some implementations may
choose to merge compatible Gateway Listeners together. If that is the
case, the list of routes attached to those resources should also be
merged.

Note that for ParentRefs that cross namespace boundaries, there are specific
rules. Cross-namespace references are only valid if they are explicitly
allowed by something in the namespace they are referring to. For example,
Gateway has the AllowedRoutes field, and ReferenceGrant provides a
generic way to enable other kinds of cross-namespace reference.






`,
          type: 'array',
          maxItems: 32,
          items: {
            description: `ParentReference identifies an API object (usually a Gateway) that can be considered
a parent of this resource (usually a route). There are two kinds of parent resources
with "Core" support:

* Gateway (Gateway conformance profile)
* Service (Mesh conformance profile, ClusterIP Services only)

This API may be extended in the future to support additional kinds of parent
resources.

The API object must be valid in the cluster; the Group and Kind must
be registered in the cluster for this reference to be valid.`,
            type: 'object',
            required: ['name'],
            properties: {
              group: {
                description: `Group is the group of the referent.
When unspecified, "gateway.networking.k8s.io" is inferred.
To set the core API group (such as for a "Service" kind referent),
Group must be explicitly set to "" (empty string).

Support: Core`,
                type: 'string',
                default: 'gateway.networking.k8s.io',
                maxLength: 253,
                pattern:
                  '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
              },
              kind: {
                description: `Kind is kind of the referent.

There are two kinds of parent resources with "Core" support:

* Gateway (Gateway conformance profile)
* Service (Mesh conformance profile, ClusterIP Services only)

Support for other resources is Implementation-Specific.`,
                type: 'string',
                default: 'Gateway',
                maxLength: 63,
                minLength: 1,
                pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
              },
              name: {
                description: `Name is the name of the referent.

Support: Core`,
                type: 'string',
                maxLength: 253,
                minLength: 1,
              },
              namespace: {
                description: `Namespace is the namespace of the referent. When unspecified, this refers
to the local namespace of the Route.

Note that there are specific rules for ParentRefs which cross namespace
boundaries. Cross-namespace references are only valid if they are explicitly
allowed by something in the namespace they are referring to. For example:
Gateway has the AllowedRoutes field, and ReferenceGrant provides a
generic way to enable any other kind of cross-namespace reference.



Support: Core`,
                type: 'string',
                maxLength: 63,
                minLength: 1,
                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$',
              },
              port: {
                description: `Port is the network port this Route targets. It can be interpreted
differently based on the type of parent resource.

When the parent resource is a Gateway, this targets all listeners
listening on the specified port that also support this kind of Route(and
select this Route). It's not recommended to set \`Port\` unless the
networking behaviors specified in a Route must apply to a specific port
as opposed to a listener(s) whose port(s) may be changed. When both Port
and SectionName are specified, the name and port of the selected listener
must match both specified values.



Implementations MAY choose to support other parent resources.
Implementations supporting other types of parent resources MUST clearly
document how/if Port is interpreted.

For the purpose of status, an attachment is considered successful as
long as the parent resource accepts it partially. For example, Gateway
listeners can restrict which Routes can attach to them by Route kind,
namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
from the referencing Route, the Route MUST be considered successfully
attached. If no Gateway listeners accept attachment from this Route,
the Route MUST be considered detached from the Gateway.

Support: Extended`,
                type: 'integer',
                format: 'int32',
                maximum: 65535,
                minimum: 1,
              },
              sectionName: {
                description: `SectionName is the name of a section within the target resource. In the
following resources, SectionName is interpreted as the following:

* Gateway: Listener name. When both Port (experimental) and SectionName
are specified, the name and port of the selected listener must match
both specified values.
* Service: Port name. When both Port (experimental) and SectionName
are specified, the name and port of the selected listener must match
both specified values.

Implementations MAY choose to support attaching Routes to other resources.
If that is the case, they MUST clearly document how SectionName is
interpreted.

When unspecified (empty string), this will reference the entire resource.
For the purpose of status, an attachment is considered successful if at
least one section in the parent resource accepts it. For example, Gateway
listeners can restrict which Routes can attach to them by Route kind,
namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
the referencing Route, the Route MUST be considered successfully
attached. If no Gateway listeners accept attachment from this Route, the
Route MUST be considered detached from the Gateway.

Support: Core`,
                type: 'string',
                maxLength: 253,
                minLength: 1,
                pattern:
                  '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
              },
            },
          },
          'x-kubernetes-validations': [
            {
              rule: "self.all(p1, self.all(p2, p1.group == p2.group && p1.kind == p2.kind && p1.name == p2.name && (((!has(p1.__namespace__) || p1.__namespace__ == '') && (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) && has(p2.__namespace__) && p1.__namespace__ == p2.__namespace__ )) ? ((!has(p1.sectionName) || p1.sectionName == '') == (!has(p2.sectionName) || p2.sectionName == '')) : true))",
              message:
                'sectionName must be specified when parentRefs includes 2 or more references to the same parent',
            },
            {
              rule: "self.all(p1, self.exists_one(p2, p1.group == p2.group && p1.kind == p2.kind && p1.name == p2.name && (((!has(p1.__namespace__) || p1.__namespace__ == '') && (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) && has(p2.__namespace__) && p1.__namespace__ == p2.__namespace__ )) && (((!has(p1.sectionName) || p1.sectionName == '') && (!has(p2.sectionName) || p2.sectionName == '')) || (has(p1.sectionName) && has(p2.sectionName) && p1.sectionName == p2.sectionName))))",
              message:
                'sectionName must be unique when parentRefs includes 2 or more references to the same parent',
            },
          ],
        },
        rules: {
          description: `Rules are a list of HTTP matchers, filters and actions.

`,
          type: 'array',
          default: [
            {
              matches: [
                {
                  path: {
                    type: 'PathPrefix',
                    value: '/',
                  },
                },
              ],
            },
          ],
          maxItems: 16,
          items: {
            description: `HTTPRouteRule defines semantics for matching an HTTP request based on
conditions (matches), processing it (filters), and forwarding the request to
an API object (backendRefs).`,
            type: 'object',
            properties: {
              backendRefs: {
                description: `BackendRefs defines the backend(s) where matching requests should be
sent.

Failure behavior here depends on how many BackendRefs are specified and
how many are invalid.

If *all* entries in BackendRefs are invalid, and there are also no filters
specified in this route rule, *all* traffic which matches this rule MUST
receive a 500 status code.

See the HTTPBackendRef definition for the rules about what makes a single
HTTPBackendRef invalid.

When a HTTPBackendRef is invalid, 500 status codes MUST be returned for
requests that would have otherwise been routed to an invalid backend. If
multiple backends are specified, and some are invalid, the proportion of
requests that would otherwise have been routed to an invalid backend
MUST receive a 500 status code.

For example, if two backends are specified with equal weights, and one is
invalid, 50 percent of traffic must receive a 500. Implementations may
choose how that 50 percent is determined.

When a HTTPBackendRef refers to a Service that has no ready endpoints,
implementations SHOULD return a 503 for requests to that backend instead.
If an implementation chooses to do this, all of the above rules for 500 responses
MUST also apply for responses that return a 503.

Support: Core for Kubernetes Service

Support: Extended for Kubernetes ServiceImport

Support: Implementation-specific for any other resource

Support for weight: Core`,
                type: 'array',
                maxItems: 16,
                items: {
                  description: `HTTPBackendRef defines how a HTTPRoute forwards a HTTP request.

Note that when a namespace different than the local namespace is specified, a
ReferenceGrant object is required in the referent namespace to allow that
namespace's owner to accept the reference. See the ReferenceGrant
documentation for details.

<gateway:experimental:description>

When the BackendRef points to a Kubernetes Service, implementations SHOULD
honor the appProtocol field if it is set for the target Service Port.

Implementations supporting appProtocol SHOULD recognize the Kubernetes
Standard Application Protocols defined in KEP-3726.

If a Service appProtocol isn't specified, an implementation MAY infer the
backend protocol through its own means. Implementations MAY infer the
protocol from the Route type referring to the backend Service.

If a Route is not able to send traffic to the backend using the specified
protocol then the backend is considered invalid. Implementations MUST set the
"ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.

</gateway:experimental:description>`,
                  type: 'object',
                  required: ['name'],
                  properties: {
                    filters: {
                      description: `Filters defined at this level should be executed if and only if the
request is being forwarded to the backend defined here.

Support: Implementation-specific (For broader support of filters, use the
Filters field in HTTPRouteRule.)`,
                      type: 'array',
                      maxItems: 16,
                      items: {
                        description: `HTTPRouteFilter defines processing steps that must be completed during the
request or response lifecycle. HTTPRouteFilters are meant as an extension
point to express processing that may be done in Gateway implementations. Some
examples include request or response modification, implementing
authentication strategies, rate-limiting, and traffic shaping. API
guarantee/conformance is defined based on the type of the filter.`,
                        type: 'object',
                        required: ['type'],
                        properties: {
                          extensionRef: {
                            description: `ExtensionRef is an optional, implementation-specific extension to the
"filter" behavior.  For example, resource "myroutefilter" in group
"networking.example.net"). ExtensionRef MUST NOT be used for core and
extended filters.

This filter can be used multiple times within the same rule.

Support: Implementation-specific`,
                            type: 'object',
                            required: ['group', 'kind', 'name'],
                            properties: {
                              group: {
                                description: `Group is the group of the referent. For example, "gateway.networking.k8s.io".
When unspecified or empty string, core API group is inferred.`,
                                type: 'string',
                                maxLength: 253,
                                pattern:
                                  '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                              },
                              kind: {
                                description:
                                  'Kind is kind of the referent. For example "HTTPRoute" or "Service".',
                                type: 'string',
                                maxLength: 63,
                                minLength: 1,
                                pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                              },
                              name: {
                                description: 'Name is the name of the referent.',
                                type: 'string',
                                maxLength: 253,
                                minLength: 1,
                              },
                            },
                          },
                          requestHeaderModifier: {
                            description: `RequestHeaderModifier defines a schema for a filter that modifies request
headers.

Support: Core`,
                            type: 'object',
                            properties: {
                              add: {
                                description: `Add adds the given header(s) (name, value) to the request
before the action. It appends to any existing values associated
with the header name.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  add:
  - name: "my-header"
    value: "bar,baz"

Output:
  GET /foo HTTP/1.1
  my-header: foo,bar,baz`,
                                type: 'array',
                                maxItems: 16,
                                items: {
                                  description:
                                    'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                                  type: 'object',
                                  required: ['name', 'value'],
                                  properties: {
                                    name: {
                                      description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                      type: 'string',
                                      maxLength: 256,
                                      minLength: 1,
                                      pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                                    },
                                    value: {
                                      description:
                                        'Value is the value of HTTP Header to be matched.',
                                      type: 'string',
                                      maxLength: 4096,
                                      minLength: 1,
                                    },
                                  },
                                },
                                'x-kubernetes-list-map-keys': ['name'],
                                'x-kubernetes-list-type': 'map',
                              },
                              remove: {
                                description: `Remove the given header(s) from the HTTP request before the action. The
value of Remove is a list of HTTP header names. Note that the header
names are case-insensitive (see
https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).

Input:
  GET /foo HTTP/1.1
  my-header1: foo
  my-header2: bar
  my-header3: baz

Config:
  remove: ["my-header1", "my-header3"]

Output:
  GET /foo HTTP/1.1
  my-header2: bar`,
                                type: 'array',
                                maxItems: 16,
                                items: {
                                  type: 'string',
                                },
                                'x-kubernetes-list-type': 'set',
                              },
                              set: {
                                description: `Set overwrites the request with the given header (name, value)
before the action.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  set:
  - name: "my-header"
    value: "bar"

Output:
  GET /foo HTTP/1.1
  my-header: bar`,
                                type: 'array',
                                maxItems: 16,
                                items: {
                                  description:
                                    'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                                  type: 'object',
                                  required: ['name', 'value'],
                                  properties: {
                                    name: {
                                      description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                      type: 'string',
                                      maxLength: 256,
                                      minLength: 1,
                                      pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                                    },
                                    value: {
                                      description:
                                        'Value is the value of HTTP Header to be matched.',
                                      type: 'string',
                                      maxLength: 4096,
                                      minLength: 1,
                                    },
                                  },
                                },
                                'x-kubernetes-list-map-keys': ['name'],
                                'x-kubernetes-list-type': 'map',
                              },
                            },
                          },
                          requestMirror: {
                            description: `RequestMirror defines a schema for a filter that mirrors requests.
Requests are sent to the specified destination, but responses from
that destination are ignored.

This filter can be used multiple times within the same rule. Note that
not all implementations will be able to support mirroring to multiple
backends.

Support: Extended

`,
                            type: 'object',
                            required: ['backendRef'],
                            properties: {
                              backendRef: {
                                description: `BackendRef references a resource where mirrored requests are sent.

Mirrored requests must be sent only to a single destination endpoint
within this BackendRef, irrespective of how many endpoints are present
within this BackendRef.

If the referent cannot be found, this BackendRef is invalid and must be
dropped from the Gateway. The controller must ensure the "ResolvedRefs"
condition on the Route status is set to \`status: False\` and not configure
this backend in the underlying implementation.

If there is a cross-namespace reference to an *existing* object
that is not allowed by a ReferenceGrant, the controller must ensure the
"ResolvedRefs"  condition on the Route is set to \`status: False\`,
with the "RefNotPermitted" reason and not configure this backend in the
underlying implementation.

In either error case, the Message of the \`ResolvedRefs\` Condition
should be used to provide more detail about the problem.

Support: Extended for Kubernetes Service

Support: Implementation-specific for any other resource`,
                                type: 'object',
                                required: ['name'],
                                properties: {
                                  group: {
                                    description: `Group is the group of the referent. For example, "gateway.networking.k8s.io".
When unspecified or empty string, core API group is inferred.`,
                                    type: 'string',
                                    default: '',
                                    maxLength: 253,
                                    pattern:
                                      '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                                  },
                                  kind: {
                                    description: `Kind is the Kubernetes resource kind of the referent. For example
"Service".

Defaults to "Service" when not specified.

ExternalName services can refer to CNAME DNS records that may live
outside of the cluster and as such are difficult to reason about in
terms of conformance. They also may not be safe to forward to (see
CVE-2021-25740 for more information). Implementations SHOULD NOT
support ExternalName Services.

Support: Core (Services with a type other than ExternalName)

Support: Implementation-specific (Services with type ExternalName)`,
                                    type: 'string',
                                    default: 'Service',
                                    maxLength: 63,
                                    minLength: 1,
                                    pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                                  },
                                  name: {
                                    description: 'Name is the name of the referent.',
                                    type: 'string',
                                    maxLength: 253,
                                    minLength: 1,
                                  },
                                  namespace: {
                                    description: `Namespace is the namespace of the backend. When unspecified, the local
namespace is inferred.

Note that when a namespace different than the local namespace is specified,
a ReferenceGrant object is required in the referent namespace to allow that
namespace's owner to accept the reference. See the ReferenceGrant
documentation for details.

Support: Core`,
                                    type: 'string',
                                    maxLength: 63,
                                    minLength: 1,
                                    pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$',
                                  },
                                  port: {
                                    description: `Port specifies the destination port number to use for this resource.
Port is required when the referent is a Kubernetes Service. In this
case, the port number is the service port number, not the target port.
For other resources, destination port might be derived from the referent
resource or this field.`,
                                    type: 'integer',
                                    format: 'int32',
                                    maximum: 65535,
                                    minimum: 1,
                                  },
                                },
                                'x-kubernetes-validations': [
                                  {
                                    rule: "(size(self.group) == 0 && self.kind == 'Service') ? has(self.port) : true",
                                    message: 'Must have port for Service reference',
                                  },
                                ],
                              },
                            },
                          },
                          requestRedirect: {
                            description: `RequestRedirect defines a schema for a filter that responds to the
request with an HTTP redirection.

Support: Core`,
                            type: 'object',
                            properties: {
                              hostname: {
                                description: `Hostname is the hostname to be used in the value of the \`Location\`
header in the response.
When empty, the hostname in the \`Host\` header of the request is used.

Support: Core`,
                                type: 'string',
                                maxLength: 253,
                                minLength: 1,
                                pattern:
                                  '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                              },
                              path: {
                                description: `Path defines parameters used to modify the path of the incoming request.
The modified path is then used to construct the \`Location\` header. When
empty, the request path is used as-is.

Support: Extended`,
                                type: 'object',
                                required: ['type'],
                                properties: {
                                  replaceFullPath: {
                                    description: `ReplaceFullPath specifies the value with which to replace the full path
of a request during a rewrite or redirect.`,
                                    type: 'string',
                                    maxLength: 1024,
                                  },
                                  replacePrefixMatch: {
                                    description: `ReplacePrefixMatch specifies the value with which to replace the prefix
match of a request during a rewrite or redirect. For example, a request
to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
of "/xyz" would be modified to "/xyz/bar".

Note that this matches the behavior of the PathPrefix match type. This
matches full path elements. A path element refers to the list of labels
in the path split by the \`/\` separator. When specified, a trailing \`/\` is
ignored. For example, the paths \`/abc\`, \`/abc/\`, and \`/abc/def\` would all
match the prefix \`/abc\`, but the path \`/abcd\` would not.

ReplacePrefixMatch is only compatible with a \`PathPrefix\` HTTPRouteMatch.
Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
the implementation setting the Accepted Condition for the Route to \`status: False\`.

Request Path | Prefix Match | Replace Prefix | Modified Path`,
                                    type: 'string',
                                    maxLength: 1024,
                                  },
                                  type: {
                                    description: `Type defines the type of path modifier. Additional types may be
added in a future release of the API.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.`,
                                    type: 'string',
                                    enum: ['ReplaceFullPath', 'ReplacePrefixMatch'],
                                  },
                                },
                                'x-kubernetes-validations': [
                                  {
                                    rule: "self.type == 'ReplaceFullPath' ? has(self.replaceFullPath) : true",
                                    message:
                                      "replaceFullPath must be specified when type is set to 'ReplaceFullPath'",
                                  },
                                  {
                                    rule: "has(self.replaceFullPath) ? self.type == 'ReplaceFullPath' : true",
                                    message:
                                      "type must be 'ReplaceFullPath' when replaceFullPath is set",
                                  },
                                  {
                                    rule: "self.type == 'ReplacePrefixMatch' ? has(self.replacePrefixMatch) : true",
                                    message:
                                      "replacePrefixMatch must be specified when type is set to 'ReplacePrefixMatch'",
                                  },
                                  {
                                    rule: "has(self.replacePrefixMatch) ? self.type == 'ReplacePrefixMatch' : true",
                                    message:
                                      "type must be 'ReplacePrefixMatch' when replacePrefixMatch is set",
                                  },
                                ],
                              },
                              port: {
                                description: `Port is the port to be used in the value of the \`Location\`
header in the response.

If no port is specified, the redirect port MUST be derived using the
following rules:

* If redirect scheme is not-empty, the redirect port MUST be the well-known
  port associated with the redirect scheme. Specifically "http" to port 80
  and "https" to port 443. If the redirect scheme does not have a
  well-known port, the listener port of the Gateway SHOULD be used.
* If redirect scheme is empty, the redirect port MUST be the Gateway
  Listener port.

Implementations SHOULD NOT add the port number in the 'Location'
header in the following cases:

* A Location header that will use HTTP (whether that is determined via
  the Listener protocol or the Scheme field) _and_ use port 80.
* A Location header that will use HTTPS (whether that is determined via
  the Listener protocol or the Scheme field) _and_ use port 443.

Support: Extended`,
                                type: 'integer',
                                format: 'int32',
                                maximum: 65535,
                                minimum: 1,
                              },
                              scheme: {
                                description: `Scheme is the scheme to be used in the value of the \`Location\` header in
the response. When empty, the scheme of the request is used.

Scheme redirects can affect the port of the redirect, for more information,
refer to the documentation for the port field of this filter.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.

Support: Extended`,
                                type: 'string',
                                enum: ['http', 'https'],
                              },
                              statusCode: {
                                description: `StatusCode is the HTTP status code to be used in response.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.

Support: Core`,
                                type: 'integer',
                                default: 302,
                                enum: [301, 302],
                              },
                            },
                          },
                          responseHeaderModifier: {
                            description: `ResponseHeaderModifier defines a schema for a filter that modifies response
headers.

Support: Extended`,
                            type: 'object',
                            properties: {
                              add: {
                                description: `Add adds the given header(s) (name, value) to the request
before the action. It appends to any existing values associated
with the header name.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  add:
  - name: "my-header"
    value: "bar,baz"

Output:
  GET /foo HTTP/1.1
  my-header: foo,bar,baz`,
                                type: 'array',
                                maxItems: 16,
                                items: {
                                  description:
                                    'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                                  type: 'object',
                                  required: ['name', 'value'],
                                  properties: {
                                    name: {
                                      description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                      type: 'string',
                                      maxLength: 256,
                                      minLength: 1,
                                      pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                                    },
                                    value: {
                                      description:
                                        'Value is the value of HTTP Header to be matched.',
                                      type: 'string',
                                      maxLength: 4096,
                                      minLength: 1,
                                    },
                                  },
                                },
                                'x-kubernetes-list-map-keys': ['name'],
                                'x-kubernetes-list-type': 'map',
                              },
                              remove: {
                                description: `Remove the given header(s) from the HTTP request before the action. The
value of Remove is a list of HTTP header names. Note that the header
names are case-insensitive (see
https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).

Input:
  GET /foo HTTP/1.1
  my-header1: foo
  my-header2: bar
  my-header3: baz

Config:
  remove: ["my-header1", "my-header3"]

Output:
  GET /foo HTTP/1.1
  my-header2: bar`,
                                type: 'array',
                                maxItems: 16,
                                items: {
                                  type: 'string',
                                },
                                'x-kubernetes-list-type': 'set',
                              },
                              set: {
                                description: `Set overwrites the request with the given header (name, value)
before the action.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  set:
  - name: "my-header"
    value: "bar"

Output:
  GET /foo HTTP/1.1
  my-header: bar`,
                                type: 'array',
                                maxItems: 16,
                                items: {
                                  description:
                                    'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                                  type: 'object',
                                  required: ['name', 'value'],
                                  properties: {
                                    name: {
                                      description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                      type: 'string',
                                      maxLength: 256,
                                      minLength: 1,
                                      pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                                    },
                                    value: {
                                      description:
                                        'Value is the value of HTTP Header to be matched.',
                                      type: 'string',
                                      maxLength: 4096,
                                      minLength: 1,
                                    },
                                  },
                                },
                                'x-kubernetes-list-map-keys': ['name'],
                                'x-kubernetes-list-type': 'map',
                              },
                            },
                          },
                          type: {
                            description: `Type identifies the type of filter to apply. As with other API fields,
types are classified into three conformance levels:

- Core: Filter types and their corresponding configuration defined by
  "Support: Core" in this package, e.g. "RequestHeaderModifier". All
  implementations must support core filters.

- Extended: Filter types and their corresponding configuration defined by
  "Support: Extended" in this package, e.g. "RequestMirror". Implementers
  are encouraged to support extended filters.

- Implementation-specific: Filters that are defined and supported by
  specific vendors.
  In the future, filters showing convergence in behavior across multiple
  implementations will be considered for inclusion in extended or core
  conformance levels. Filter-specific configuration for such filters
  is specified using the ExtensionRef field. \`Type\` should be set to
  "ExtensionRef" for custom filters.

Implementers are encouraged to define custom implementation types to
extend the core API with implementation-specific behavior.

If a reference to a custom filter type cannot be resolved, the filter
MUST NOT be skipped. Instead, requests that would have been processed by
that filter MUST receive a HTTP error response.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.`,
                            type: 'string',
                            enum: [
                              'RequestHeaderModifier',
                              'ResponseHeaderModifier',
                              'RequestMirror',
                              'RequestRedirect',
                              'URLRewrite',
                              'ExtensionRef',
                            ],
                          },
                          urlRewrite: {
                            description: `URLRewrite defines a schema for a filter that modifies a request during forwarding.

Support: Extended`,
                            type: 'object',
                            properties: {
                              hostname: {
                                description: `Hostname is the value to be used to replace the Host header value during
forwarding.

Support: Extended`,
                                type: 'string',
                                maxLength: 253,
                                minLength: 1,
                                pattern:
                                  '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                              },
                              path: {
                                description: `Path defines a path rewrite.

Support: Extended`,
                                type: 'object',
                                required: ['type'],
                                properties: {
                                  replaceFullPath: {
                                    description: `ReplaceFullPath specifies the value with which to replace the full path
of a request during a rewrite or redirect.`,
                                    type: 'string',
                                    maxLength: 1024,
                                  },
                                  replacePrefixMatch: {
                                    description: `ReplacePrefixMatch specifies the value with which to replace the prefix
match of a request during a rewrite or redirect. For example, a request
to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
of "/xyz" would be modified to "/xyz/bar".

Note that this matches the behavior of the PathPrefix match type. This
matches full path elements. A path element refers to the list of labels
in the path split by the \`/\` separator. When specified, a trailing \`/\` is
ignored. For example, the paths \`/abc\`, \`/abc/\`, and \`/abc/def\` would all
match the prefix \`/abc\`, but the path \`/abcd\` would not.

ReplacePrefixMatch is only compatible with a \`PathPrefix\` HTTPRouteMatch.
Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
the implementation setting the Accepted Condition for the Route to \`status: False\`.

Request Path | Prefix Match | Replace Prefix | Modified Path`,
                                    type: 'string',
                                    maxLength: 1024,
                                  },
                                  type: {
                                    description: `Type defines the type of path modifier. Additional types may be
added in a future release of the API.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.`,
                                    type: 'string',
                                    enum: ['ReplaceFullPath', 'ReplacePrefixMatch'],
                                  },
                                },
                                'x-kubernetes-validations': [
                                  {
                                    rule: "self.type == 'ReplaceFullPath' ? has(self.replaceFullPath) : true",
                                    message:
                                      "replaceFullPath must be specified when type is set to 'ReplaceFullPath'",
                                  },
                                  {
                                    rule: "has(self.replaceFullPath) ? self.type == 'ReplaceFullPath' : true",
                                    message:
                                      "type must be 'ReplaceFullPath' when replaceFullPath is set",
                                  },
                                  {
                                    rule: "self.type == 'ReplacePrefixMatch' ? has(self.replacePrefixMatch) : true",
                                    message:
                                      "replacePrefixMatch must be specified when type is set to 'ReplacePrefixMatch'",
                                  },
                                  {
                                    rule: "has(self.replacePrefixMatch) ? self.type == 'ReplacePrefixMatch' : true",
                                    message:
                                      "type must be 'ReplacePrefixMatch' when replacePrefixMatch is set",
                                  },
                                ],
                              },
                            },
                          },
                        },
                        'x-kubernetes-validations': [
                          {
                            rule: "!(has(self.requestHeaderModifier) && self.type != 'RequestHeaderModifier')",
                            message:
                              'filter.requestHeaderModifier must be nil if the filter.type is not RequestHeaderModifier',
                          },
                          {
                            rule: "!(!has(self.requestHeaderModifier) && self.type == 'RequestHeaderModifier')",
                            message:
                              'filter.requestHeaderModifier must be specified for RequestHeaderModifier filter.type',
                          },
                          {
                            rule: "!(has(self.responseHeaderModifier) && self.type != 'ResponseHeaderModifier')",
                            message:
                              'filter.responseHeaderModifier must be nil if the filter.type is not ResponseHeaderModifier',
                          },
                          {
                            rule: "!(!has(self.responseHeaderModifier) && self.type == 'ResponseHeaderModifier')",
                            message:
                              'filter.responseHeaderModifier must be specified for ResponseHeaderModifier filter.type',
                          },
                          {
                            rule: "!(has(self.requestMirror) && self.type != 'RequestMirror')",
                            message:
                              'filter.requestMirror must be nil if the filter.type is not RequestMirror',
                          },
                          {
                            rule: "!(!has(self.requestMirror) && self.type == 'RequestMirror')",
                            message:
                              'filter.requestMirror must be specified for RequestMirror filter.type',
                          },
                          {
                            rule: "!(has(self.requestRedirect) && self.type != 'RequestRedirect')",
                            message:
                              'filter.requestRedirect must be nil if the filter.type is not RequestRedirect',
                          },
                          {
                            rule: "!(!has(self.requestRedirect) && self.type == 'RequestRedirect')",
                            message:
                              'filter.requestRedirect must be specified for RequestRedirect filter.type',
                          },
                          {
                            rule: "!(has(self.urlRewrite) && self.type != 'URLRewrite')",
                            message:
                              'filter.urlRewrite must be nil if the filter.type is not URLRewrite',
                          },
                          {
                            rule: "!(!has(self.urlRewrite) && self.type == 'URLRewrite')",
                            message:
                              'filter.urlRewrite must be specified for URLRewrite filter.type',
                          },
                          {
                            rule: "!(has(self.extensionRef) && self.type != 'ExtensionRef')",
                            message:
                              'filter.extensionRef must be nil if the filter.type is not ExtensionRef',
                          },
                          {
                            rule: "!(!has(self.extensionRef) && self.type == 'ExtensionRef')",
                            message:
                              'filter.extensionRef must be specified for ExtensionRef filter.type',
                          },
                        ],
                      },
                      'x-kubernetes-validations': [
                        {
                          rule: "!(self.exists(f, f.type == 'RequestRedirect') && self.exists(f, f.type == 'URLRewrite'))",
                          message:
                            'May specify either httpRouteFilterRequestRedirect or httpRouteFilterRequestRewrite, but not both',
                        },
                        {
                          rule: "!(self.exists(f, f.type == 'RequestRedirect') && self.exists(f, f.type == 'URLRewrite'))",
                          message:
                            'May specify either httpRouteFilterRequestRedirect or httpRouteFilterRequestRewrite, but not both',
                        },
                        {
                          rule: "self.filter(f, f.type == 'RequestHeaderModifier').size() <= 1",
                          message: 'RequestHeaderModifier filter cannot be repeated',
                        },
                        {
                          rule: "self.filter(f, f.type == 'ResponseHeaderModifier').size() <= 1",
                          message: 'ResponseHeaderModifier filter cannot be repeated',
                        },
                        {
                          rule: "self.filter(f, f.type == 'RequestRedirect').size() <= 1",
                          message: 'RequestRedirect filter cannot be repeated',
                        },
                        {
                          rule: "self.filter(f, f.type == 'URLRewrite').size() <= 1",
                          message: 'URLRewrite filter cannot be repeated',
                        },
                      ],
                    },
                    group: {
                      description: `Group is the group of the referent. For example, "gateway.networking.k8s.io".
When unspecified or empty string, core API group is inferred.`,
                      type: 'string',
                      default: '',
                      maxLength: 253,
                      pattern:
                        '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                    },
                    kind: {
                      description: `Kind is the Kubernetes resource kind of the referent. For example
"Service".

Defaults to "Service" when not specified.

ExternalName services can refer to CNAME DNS records that may live
outside of the cluster and as such are difficult to reason about in
terms of conformance. They also may not be safe to forward to (see
CVE-2021-25740 for more information). Implementations SHOULD NOT
support ExternalName Services.

Support: Core (Services with a type other than ExternalName)

Support: Implementation-specific (Services with type ExternalName)`,
                      type: 'string',
                      default: 'Service',
                      maxLength: 63,
                      minLength: 1,
                      pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                    },
                    name: {
                      description: 'Name is the name of the referent.',
                      type: 'string',
                      maxLength: 253,
                      minLength: 1,
                    },
                    namespace: {
                      description: `Namespace is the namespace of the backend. When unspecified, the local
namespace is inferred.

Note that when a namespace different than the local namespace is specified,
a ReferenceGrant object is required in the referent namespace to allow that
namespace's owner to accept the reference. See the ReferenceGrant
documentation for details.

Support: Core`,
                      type: 'string',
                      maxLength: 63,
                      minLength: 1,
                      pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$',
                    },
                    port: {
                      description: `Port specifies the destination port number to use for this resource.
Port is required when the referent is a Kubernetes Service. In this
case, the port number is the service port number, not the target port.
For other resources, destination port might be derived from the referent
resource or this field.`,
                      type: 'integer',
                      format: 'int32',
                      maximum: 65535,
                      minimum: 1,
                    },
                    weight: {
                      description: `Weight specifies the proportion of requests forwarded to the referenced
backend. This is computed as weight/(sum of all weights in this
BackendRefs list). For non-zero values, there may be some epsilon from
the exact proportion defined here depending on the precision an
implementation supports. Weight is not a percentage and the sum of
weights does not need to equal 100.

If only one backend is specified and it has a weight greater than 0, 100%
of the traffic is forwarded to that backend. If weight is set to 0, no
traffic should be forwarded for this entry. If unspecified, weight
defaults to 1.

Support for this field varies based on the context where used.`,
                      type: 'integer',
                      format: 'int32',
                      default: 1,
                      maximum: 1000000,
                      minimum: 0,
                    },
                  },
                  'x-kubernetes-validations': [
                    {
                      rule: "(size(self.group) == 0 && self.kind == 'Service') ? has(self.port) : true",
                      message: 'Must have port for Service reference',
                    },
                  ],
                },
              },
              filters: {
                description: `Filters define the filters that are applied to requests that match
this rule.

Wherever possible, implementations SHOULD implement filters in the order
they are specified.

Implementations MAY choose to implement this ordering strictly, rejecting
any combination or order of filters that can not be supported. If implementations
choose a strict interpretation of filter ordering, they MUST clearly document
that behavior.

To reject an invalid combination or order of filters, implementations SHOULD
consider the Route Rules with this configuration invalid. If all Route Rules
in a Route are invalid, the entire Route would be considered invalid. If only
a portion of Route Rules are invalid, implementations MUST set the
"PartiallyInvalid" condition for the Route.

Conformance-levels at this level are defined based on the type of filter:

- ALL core filters MUST be supported by all implementations.
- Implementers are encouraged to support extended filters.
- Implementation-specific custom filters have no API guarantees across
  implementations.

Specifying the same filter multiple times is not supported unless explicitly
indicated in the filter.

All filters are expected to be compatible with each other except for the
URLRewrite and RequestRedirect filters, which may not be combined. If an
implementation can not support other combinations of filters, they must clearly
document that limitation. In cases where incompatible or unsupported
filters are specified and cause the \`Accepted\` condition to be set to status
\`False\`, implementations may use the \`IncompatibleFilters\` reason to specify
this configuration error.

Support: Core`,
                type: 'array',
                maxItems: 16,
                items: {
                  description: `HTTPRouteFilter defines processing steps that must be completed during the
request or response lifecycle. HTTPRouteFilters are meant as an extension
point to express processing that may be done in Gateway implementations. Some
examples include request or response modification, implementing
authentication strategies, rate-limiting, and traffic shaping. API
guarantee/conformance is defined based on the type of the filter.`,
                  type: 'object',
                  required: ['type'],
                  properties: {
                    extensionRef: {
                      description: `ExtensionRef is an optional, implementation-specific extension to the
"filter" behavior.  For example, resource "myroutefilter" in group
"networking.example.net"). ExtensionRef MUST NOT be used for core and
extended filters.

This filter can be used multiple times within the same rule.

Support: Implementation-specific`,
                      type: 'object',
                      required: ['group', 'kind', 'name'],
                      properties: {
                        group: {
                          description: `Group is the group of the referent. For example, "gateway.networking.k8s.io".
When unspecified or empty string, core API group is inferred.`,
                          type: 'string',
                          maxLength: 253,
                          pattern:
                            '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                        },
                        kind: {
                          description:
                            'Kind is kind of the referent. For example "HTTPRoute" or "Service".',
                          type: 'string',
                          maxLength: 63,
                          minLength: 1,
                          pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                        },
                        name: {
                          description: 'Name is the name of the referent.',
                          type: 'string',
                          maxLength: 253,
                          minLength: 1,
                        },
                      },
                    },
                    requestHeaderModifier: {
                      description: `RequestHeaderModifier defines a schema for a filter that modifies request
headers.

Support: Core`,
                      type: 'object',
                      properties: {
                        add: {
                          description: `Add adds the given header(s) (name, value) to the request
before the action. It appends to any existing values associated
with the header name.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  add:
  - name: "my-header"
    value: "bar,baz"

Output:
  GET /foo HTTP/1.1
  my-header: foo,bar,baz`,
                          type: 'array',
                          maxItems: 16,
                          items: {
                            description:
                              'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                            type: 'object',
                            required: ['name', 'value'],
                            properties: {
                              name: {
                                description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                type: 'string',
                                maxLength: 256,
                                minLength: 1,
                                pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                              },
                              value: {
                                description:
                                  'Value is the value of HTTP Header to be matched.',
                                type: 'string',
                                maxLength: 4096,
                                minLength: 1,
                              },
                            },
                          },
                          'x-kubernetes-list-map-keys': ['name'],
                          'x-kubernetes-list-type': 'map',
                        },
                        remove: {
                          description: `Remove the given header(s) from the HTTP request before the action. The
value of Remove is a list of HTTP header names. Note that the header
names are case-insensitive (see
https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).

Input:
  GET /foo HTTP/1.1
  my-header1: foo
  my-header2: bar
  my-header3: baz

Config:
  remove: ["my-header1", "my-header3"]

Output:
  GET /foo HTTP/1.1
  my-header2: bar`,
                          type: 'array',
                          maxItems: 16,
                          items: {
                            type: 'string',
                          },
                          'x-kubernetes-list-type': 'set',
                        },
                        set: {
                          description: `Set overwrites the request with the given header (name, value)
before the action.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  set:
  - name: "my-header"
    value: "bar"

Output:
  GET /foo HTTP/1.1
  my-header: bar`,
                          type: 'array',
                          maxItems: 16,
                          items: {
                            description:
                              'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                            type: 'object',
                            required: ['name', 'value'],
                            properties: {
                              name: {
                                description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                type: 'string',
                                maxLength: 256,
                                minLength: 1,
                                pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                              },
                              value: {
                                description:
                                  'Value is the value of HTTP Header to be matched.',
                                type: 'string',
                                maxLength: 4096,
                                minLength: 1,
                              },
                            },
                          },
                          'x-kubernetes-list-map-keys': ['name'],
                          'x-kubernetes-list-type': 'map',
                        },
                      },
                    },
                    requestMirror: {
                      description: `RequestMirror defines a schema for a filter that mirrors requests.
Requests are sent to the specified destination, but responses from
that destination are ignored.

This filter can be used multiple times within the same rule. Note that
not all implementations will be able to support mirroring to multiple
backends.

Support: Extended

`,
                      type: 'object',
                      required: ['backendRef'],
                      properties: {
                        backendRef: {
                          description: `BackendRef references a resource where mirrored requests are sent.

Mirrored requests must be sent only to a single destination endpoint
within this BackendRef, irrespective of how many endpoints are present
within this BackendRef.

If the referent cannot be found, this BackendRef is invalid and must be
dropped from the Gateway. The controller must ensure the "ResolvedRefs"
condition on the Route status is set to \`status: False\` and not configure
this backend in the underlying implementation.

If there is a cross-namespace reference to an *existing* object
that is not allowed by a ReferenceGrant, the controller must ensure the
"ResolvedRefs"  condition on the Route is set to \`status: False\`,
with the "RefNotPermitted" reason and not configure this backend in the
underlying implementation.

In either error case, the Message of the \`ResolvedRefs\` Condition
should be used to provide more detail about the problem.

Support: Extended for Kubernetes Service

Support: Implementation-specific for any other resource`,
                          type: 'object',
                          required: ['name'],
                          properties: {
                            group: {
                              description: `Group is the group of the referent. For example, "gateway.networking.k8s.io".
When unspecified or empty string, core API group is inferred.`,
                              type: 'string',
                              default: '',
                              maxLength: 253,
                              pattern:
                                '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                            },
                            kind: {
                              description: `Kind is the Kubernetes resource kind of the referent. For example
"Service".

Defaults to "Service" when not specified.

ExternalName services can refer to CNAME DNS records that may live
outside of the cluster and as such are difficult to reason about in
terms of conformance. They also may not be safe to forward to (see
CVE-2021-25740 for more information). Implementations SHOULD NOT
support ExternalName Services.

Support: Core (Services with a type other than ExternalName)

Support: Implementation-specific (Services with type ExternalName)`,
                              type: 'string',
                              default: 'Service',
                              maxLength: 63,
                              minLength: 1,
                              pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                            },
                            name: {
                              description: 'Name is the name of the referent.',
                              type: 'string',
                              maxLength: 253,
                              minLength: 1,
                            },
                            namespace: {
                              description: `Namespace is the namespace of the backend. When unspecified, the local
namespace is inferred.

Note that when a namespace different than the local namespace is specified,
a ReferenceGrant object is required in the referent namespace to allow that
namespace's owner to accept the reference. See the ReferenceGrant
documentation for details.

Support: Core`,
                              type: 'string',
                              maxLength: 63,
                              minLength: 1,
                              pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$',
                            },
                            port: {
                              description: `Port specifies the destination port number to use for this resource.
Port is required when the referent is a Kubernetes Service. In this
case, the port number is the service port number, not the target port.
For other resources, destination port might be derived from the referent
resource or this field.`,
                              type: 'integer',
                              format: 'int32',
                              maximum: 65535,
                              minimum: 1,
                            },
                          },
                          'x-kubernetes-validations': [
                            {
                              rule: "(size(self.group) == 0 && self.kind == 'Service') ? has(self.port) : true",
                              message: 'Must have port for Service reference',
                            },
                          ],
                        },
                      },
                    },
                    requestRedirect: {
                      description: `RequestRedirect defines a schema for a filter that responds to the
request with an HTTP redirection.

Support: Core`,
                      type: 'object',
                      properties: {
                        hostname: {
                          description: `Hostname is the hostname to be used in the value of the \`Location\`
header in the response.
When empty, the hostname in the \`Host\` header of the request is used.

Support: Core`,
                          type: 'string',
                          maxLength: 253,
                          minLength: 1,
                          pattern:
                            '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                        },
                        path: {
                          description: `Path defines parameters used to modify the path of the incoming request.
The modified path is then used to construct the \`Location\` header. When
empty, the request path is used as-is.

Support: Extended`,
                          type: 'object',
                          required: ['type'],
                          properties: {
                            replaceFullPath: {
                              description: `ReplaceFullPath specifies the value with which to replace the full path
of a request during a rewrite or redirect.`,
                              type: 'string',
                              maxLength: 1024,
                            },
                            replacePrefixMatch: {
                              description: `ReplacePrefixMatch specifies the value with which to replace the prefix
match of a request during a rewrite or redirect. For example, a request
to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
of "/xyz" would be modified to "/xyz/bar".

Note that this matches the behavior of the PathPrefix match type. This
matches full path elements. A path element refers to the list of labels
in the path split by the \`/\` separator. When specified, a trailing \`/\` is
ignored. For example, the paths \`/abc\`, \`/abc/\`, and \`/abc/def\` would all
match the prefix \`/abc\`, but the path \`/abcd\` would not.

ReplacePrefixMatch is only compatible with a \`PathPrefix\` HTTPRouteMatch.
Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
the implementation setting the Accepted Condition for the Route to \`status: False\`.

Request Path | Prefix Match | Replace Prefix | Modified Path`,
                              type: 'string',
                              maxLength: 1024,
                            },
                            type: {
                              description: `Type defines the type of path modifier. Additional types may be
added in a future release of the API.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.`,
                              type: 'string',
                              enum: ['ReplaceFullPath', 'ReplacePrefixMatch'],
                            },
                          },
                          'x-kubernetes-validations': [
                            {
                              rule: "self.type == 'ReplaceFullPath' ? has(self.replaceFullPath) : true",
                              message:
                                "replaceFullPath must be specified when type is set to 'ReplaceFullPath'",
                            },
                            {
                              rule: "has(self.replaceFullPath) ? self.type == 'ReplaceFullPath' : true",
                              message:
                                "type must be 'ReplaceFullPath' when replaceFullPath is set",
                            },
                            {
                              rule: "self.type == 'ReplacePrefixMatch' ? has(self.replacePrefixMatch) : true",
                              message:
                                "replacePrefixMatch must be specified when type is set to 'ReplacePrefixMatch'",
                            },
                            {
                              rule: "has(self.replacePrefixMatch) ? self.type == 'ReplacePrefixMatch' : true",
                              message:
                                "type must be 'ReplacePrefixMatch' when replacePrefixMatch is set",
                            },
                          ],
                        },
                        port: {
                          description: `Port is the port to be used in the value of the \`Location\`
header in the response.

If no port is specified, the redirect port MUST be derived using the
following rules:

* If redirect scheme is not-empty, the redirect port MUST be the well-known
  port associated with the redirect scheme. Specifically "http" to port 80
  and "https" to port 443. If the redirect scheme does not have a
  well-known port, the listener port of the Gateway SHOULD be used.
* If redirect scheme is empty, the redirect port MUST be the Gateway
  Listener port.

Implementations SHOULD NOT add the port number in the 'Location'
header in the following cases:

* A Location header that will use HTTP (whether that is determined via
  the Listener protocol or the Scheme field) _and_ use port 80.
* A Location header that will use HTTPS (whether that is determined via
  the Listener protocol or the Scheme field) _and_ use port 443.

Support: Extended`,
                          type: 'integer',
                          format: 'int32',
                          maximum: 65535,
                          minimum: 1,
                        },
                        scheme: {
                          description: `Scheme is the scheme to be used in the value of the \`Location\` header in
the response. When empty, the scheme of the request is used.

Scheme redirects can affect the port of the redirect, for more information,
refer to the documentation for the port field of this filter.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.

Support: Extended`,
                          type: 'string',
                          enum: ['http', 'https'],
                        },
                        statusCode: {
                          description: `StatusCode is the HTTP status code to be used in response.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.

Support: Core`,
                          type: 'integer',
                          default: 302,
                          enum: [301, 302],
                        },
                      },
                    },
                    responseHeaderModifier: {
                      description: `ResponseHeaderModifier defines a schema for a filter that modifies response
headers.

Support: Extended`,
                      type: 'object',
                      properties: {
                        add: {
                          description: `Add adds the given header(s) (name, value) to the request
before the action. It appends to any existing values associated
with the header name.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  add:
  - name: "my-header"
    value: "bar,baz"

Output:
  GET /foo HTTP/1.1
  my-header: foo,bar,baz`,
                          type: 'array',
                          maxItems: 16,
                          items: {
                            description:
                              'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                            type: 'object',
                            required: ['name', 'value'],
                            properties: {
                              name: {
                                description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                type: 'string',
                                maxLength: 256,
                                minLength: 1,
                                pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                              },
                              value: {
                                description:
                                  'Value is the value of HTTP Header to be matched.',
                                type: 'string',
                                maxLength: 4096,
                                minLength: 1,
                              },
                            },
                          },
                          'x-kubernetes-list-map-keys': ['name'],
                          'x-kubernetes-list-type': 'map',
                        },
                        remove: {
                          description: `Remove the given header(s) from the HTTP request before the action. The
value of Remove is a list of HTTP header names. Note that the header
names are case-insensitive (see
https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).

Input:
  GET /foo HTTP/1.1
  my-header1: foo
  my-header2: bar
  my-header3: baz

Config:
  remove: ["my-header1", "my-header3"]

Output:
  GET /foo HTTP/1.1
  my-header2: bar`,
                          type: 'array',
                          maxItems: 16,
                          items: {
                            type: 'string',
                          },
                          'x-kubernetes-list-type': 'set',
                        },
                        set: {
                          description: `Set overwrites the request with the given header (name, value)
before the action.

Input:
  GET /foo HTTP/1.1
  my-header: foo

Config:
  set:
  - name: "my-header"
    value: "bar"

Output:
  GET /foo HTTP/1.1
  my-header: bar`,
                          type: 'array',
                          maxItems: 16,
                          items: {
                            description:
                              'HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.',
                            type: 'object',
                            required: ['name', 'value'],
                            properties: {
                              name: {
                                description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, the first entry with
an equivalent name MUST be considered for a match. Subsequent entries
with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.`,
                                type: 'string',
                                maxLength: 256,
                                minLength: 1,
                                pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                              },
                              value: {
                                description:
                                  'Value is the value of HTTP Header to be matched.',
                                type: 'string',
                                maxLength: 4096,
                                minLength: 1,
                              },
                            },
                          },
                          'x-kubernetes-list-map-keys': ['name'],
                          'x-kubernetes-list-type': 'map',
                        },
                      },
                    },
                    type: {
                      description: `Type identifies the type of filter to apply. As with other API fields,
types are classified into three conformance levels:

- Core: Filter types and their corresponding configuration defined by
  "Support: Core" in this package, e.g. "RequestHeaderModifier". All
  implementations must support core filters.

- Extended: Filter types and their corresponding configuration defined by
  "Support: Extended" in this package, e.g. "RequestMirror". Implementers
  are encouraged to support extended filters.

- Implementation-specific: Filters that are defined and supported by
  specific vendors.
  In the future, filters showing convergence in behavior across multiple
  implementations will be considered for inclusion in extended or core
  conformance levels. Filter-specific configuration for such filters
  is specified using the ExtensionRef field. \`Type\` should be set to
  "ExtensionRef" for custom filters.

Implementers are encouraged to define custom implementation types to
extend the core API with implementation-specific behavior.

If a reference to a custom filter type cannot be resolved, the filter
MUST NOT be skipped. Instead, requests that would have been processed by
that filter MUST receive a HTTP error response.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.`,
                      type: 'string',
                      enum: [
                        'RequestHeaderModifier',
                        'ResponseHeaderModifier',
                        'RequestMirror',
                        'RequestRedirect',
                        'URLRewrite',
                        'ExtensionRef',
                      ],
                    },
                    urlRewrite: {
                      description: `URLRewrite defines a schema for a filter that modifies a request during forwarding.

Support: Extended`,
                      type: 'object',
                      properties: {
                        hostname: {
                          description: `Hostname is the value to be used to replace the Host header value during
forwarding.

Support: Extended`,
                          type: 'string',
                          maxLength: 253,
                          minLength: 1,
                          pattern:
                            '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                        },
                        path: {
                          description: `Path defines a path rewrite.

Support: Extended`,
                          type: 'object',
                          required: ['type'],
                          properties: {
                            replaceFullPath: {
                              description: `ReplaceFullPath specifies the value with which to replace the full path
of a request during a rewrite or redirect.`,
                              type: 'string',
                              maxLength: 1024,
                            },
                            replacePrefixMatch: {
                              description: `ReplacePrefixMatch specifies the value with which to replace the prefix
match of a request during a rewrite or redirect. For example, a request
to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
of "/xyz" would be modified to "/xyz/bar".

Note that this matches the behavior of the PathPrefix match type. This
matches full path elements. A path element refers to the list of labels
in the path split by the \`/\` separator. When specified, a trailing \`/\` is
ignored. For example, the paths \`/abc\`, \`/abc/\`, and \`/abc/def\` would all
match the prefix \`/abc\`, but the path \`/abcd\` would not.

ReplacePrefixMatch is only compatible with a \`PathPrefix\` HTTPRouteMatch.
Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
the implementation setting the Accepted Condition for the Route to \`status: False\`.

Request Path | Prefix Match | Replace Prefix | Modified Path`,
                              type: 'string',
                              maxLength: 1024,
                            },
                            type: {
                              description: `Type defines the type of path modifier. Additional types may be
added in a future release of the API.

Note that values may be added to this enum, implementations
must ensure that unknown values will not cause a crash.

Unknown values here must result in the implementation setting the
Accepted Condition for the Route to \`status: False\`, with a
Reason of \`UnsupportedValue\`.`,
                              type: 'string',
                              enum: ['ReplaceFullPath', 'ReplacePrefixMatch'],
                            },
                          },
                          'x-kubernetes-validations': [
                            {
                              rule: "self.type == 'ReplaceFullPath' ? has(self.replaceFullPath) : true",
                              message:
                                "replaceFullPath must be specified when type is set to 'ReplaceFullPath'",
                            },
                            {
                              rule: "has(self.replaceFullPath) ? self.type == 'ReplaceFullPath' : true",
                              message:
                                "type must be 'ReplaceFullPath' when replaceFullPath is set",
                            },
                            {
                              rule: "self.type == 'ReplacePrefixMatch' ? has(self.replacePrefixMatch) : true",
                              message:
                                "replacePrefixMatch must be specified when type is set to 'ReplacePrefixMatch'",
                            },
                            {
                              rule: "has(self.replacePrefixMatch) ? self.type == 'ReplacePrefixMatch' : true",
                              message:
                                "type must be 'ReplacePrefixMatch' when replacePrefixMatch is set",
                            },
                          ],
                        },
                      },
                    },
                  },
                  'x-kubernetes-validations': [
                    {
                      rule: "!(has(self.requestHeaderModifier) && self.type != 'RequestHeaderModifier')",
                      message:
                        'filter.requestHeaderModifier must be nil if the filter.type is not RequestHeaderModifier',
                    },
                    {
                      rule: "!(!has(self.requestHeaderModifier) && self.type == 'RequestHeaderModifier')",
                      message:
                        'filter.requestHeaderModifier must be specified for RequestHeaderModifier filter.type',
                    },
                    {
                      rule: "!(has(self.responseHeaderModifier) && self.type != 'ResponseHeaderModifier')",
                      message:
                        'filter.responseHeaderModifier must be nil if the filter.type is not ResponseHeaderModifier',
                    },
                    {
                      rule: "!(!has(self.responseHeaderModifier) && self.type == 'ResponseHeaderModifier')",
                      message:
                        'filter.responseHeaderModifier must be specified for ResponseHeaderModifier filter.type',
                    },
                    {
                      rule: "!(has(self.requestMirror) && self.type != 'RequestMirror')",
                      message:
                        'filter.requestMirror must be nil if the filter.type is not RequestMirror',
                    },
                    {
                      rule: "!(!has(self.requestMirror) && self.type == 'RequestMirror')",
                      message:
                        'filter.requestMirror must be specified for RequestMirror filter.type',
                    },
                    {
                      rule: "!(has(self.requestRedirect) && self.type != 'RequestRedirect')",
                      message:
                        'filter.requestRedirect must be nil if the filter.type is not RequestRedirect',
                    },
                    {
                      rule: "!(!has(self.requestRedirect) && self.type == 'RequestRedirect')",
                      message:
                        'filter.requestRedirect must be specified for RequestRedirect filter.type',
                    },
                    {
                      rule: "!(has(self.urlRewrite) && self.type != 'URLRewrite')",
                      message:
                        'filter.urlRewrite must be nil if the filter.type is not URLRewrite',
                    },
                    {
                      rule: "!(!has(self.urlRewrite) && self.type == 'URLRewrite')",
                      message:
                        'filter.urlRewrite must be specified for URLRewrite filter.type',
                    },
                    {
                      rule: "!(has(self.extensionRef) && self.type != 'ExtensionRef')",
                      message:
                        'filter.extensionRef must be nil if the filter.type is not ExtensionRef',
                    },
                    {
                      rule: "!(!has(self.extensionRef) && self.type == 'ExtensionRef')",
                      message:
                        'filter.extensionRef must be specified for ExtensionRef filter.type',
                    },
                  ],
                },
                'x-kubernetes-validations': [
                  {
                    rule: "!(self.exists(f, f.type == 'RequestRedirect') && self.exists(f, f.type == 'URLRewrite'))",
                    message:
                      'May specify either httpRouteFilterRequestRedirect or httpRouteFilterRequestRewrite, but not both',
                  },
                  {
                    rule: "self.filter(f, f.type == 'RequestHeaderModifier').size() <= 1",
                    message: 'RequestHeaderModifier filter cannot be repeated',
                  },
                  {
                    rule: "self.filter(f, f.type == 'ResponseHeaderModifier').size() <= 1",
                    message: 'ResponseHeaderModifier filter cannot be repeated',
                  },
                  {
                    rule: "self.filter(f, f.type == 'RequestRedirect').size() <= 1",
                    message: 'RequestRedirect filter cannot be repeated',
                  },
                  {
                    rule: "self.filter(f, f.type == 'URLRewrite').size() <= 1",
                    message: 'URLRewrite filter cannot be repeated',
                  },
                ],
              },
              matches: {
                description: `Matches define conditions used for matching the rule against incoming
HTTP requests. Each match is independent, i.e. this rule will be matched
if **any** one of the matches is satisfied.

For example, take the following matches configuration:

\`\`\`
matches:
- path:
    value: "/foo"
  headers:
  - name: "version"
    value: "v2"
- path:
    value: "/v2/foo"
\`\`\`

For a request to match against this rule, a request must satisfy
EITHER of the two conditions:

- path prefixed with \`/foo\` AND contains the header \`version: v2\`
- path prefix of \`/v2/foo\`

See the documentation for HTTPRouteMatch on how to specify multiple
match conditions that should be ANDed together.

If no matches are specified, the default is a prefix
path match on "/", which has the effect of matching every
HTTP request.

Proxy or Load Balancer routing configuration generated from HTTPRoutes
MUST prioritize matches based on the following criteria, continuing on
ties. Across all rules specified on applicable Routes, precedence must be
given to the match having:

* "Exact" path match.
* "Prefix" path match with largest number of characters.
* Method match.
* Largest number of header matches.
* Largest number of query param matches.

Note: The precedence of RegularExpression path matches are implementation-specific.

If ties still exist across multiple Routes, matching precedence MUST be
determined in order of the following criteria, continuing on ties:

* The oldest Route based on creation timestamp.
* The Route appearing first in alphabetical order by
  "{namespace}/{name}".

If ties still exist within an HTTPRoute, matching precedence MUST be granted
to the FIRST matching rule (in list order) with a match meeting the above
criteria.

When no rules matching a request have been successfully attached to the
parent a request is coming from, a HTTP 404 status code MUST be returned.`,
                type: 'array',
                default: [
                  {
                    path: {
                      type: 'PathPrefix',
                      value: '/',
                    },
                  },
                ],
                maxItems: 64,
                items: {
                  description: `HTTPRouteMatch defines the predicate used to match requests to a given
action. Multiple match types are ANDed together, i.e. the match will
evaluate to true only if all conditions are satisfied.

For example, the match below will match a HTTP request only if its path
starts with \`/foo\` AND it contains the \`version: v1\` header:

\`\`\`
match:

	path:
	  value: "/foo"
	headers:
	- name: "version"
	  value "v1"

\`\`\``,
                  type: 'object',
                  properties: {
                    headers: {
                      description: `Headers specifies HTTP request header matchers. Multiple match values are
ANDed together, meaning, a request must match all the specified headers
to select the route.`,
                      type: 'array',
                      maxItems: 16,
                      items: {
                        description: `HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request
headers.`,
                        type: 'object',
                        required: ['name', 'value'],
                        properties: {
                          name: {
                            description: `Name is the name of the HTTP Header to be matched. Name matching MUST be
case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

If multiple entries specify equivalent header names, only the first
entry with an equivalent name MUST be considered for a match. Subsequent
entries with an equivalent header name MUST be ignored. Due to the
case-insensitivity of header names, "foo" and "Foo" are considered
equivalent.

When a header is repeated in an HTTP request, it is
implementation-specific behavior as to how this is represented.
Generally, proxies should follow the guidance from the RFC:
https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
processing a repeated header, with special handling for "Set-Cookie".`,
                            type: 'string',
                            maxLength: 256,
                            minLength: 1,
                            pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                          },
                          type: {
                            description: `Type specifies how to match against the value of the header.

Support: Core (Exact)

Support: Implementation-specific (RegularExpression)

Since RegularExpression HeaderMatchType has implementation-specific
conformance, implementations can support POSIX, PCRE or any other dialects
of regular expressions. Please read the implementation's documentation to
determine the supported dialect.`,
                            type: 'string',
                            default: 'Exact',
                            enum: ['Exact', 'RegularExpression'],
                          },
                          value: {
                            description:
                              'Value is the value of HTTP Header to be matched.',
                            type: 'string',
                            maxLength: 4096,
                            minLength: 1,
                          },
                        },
                      },
                      'x-kubernetes-list-map-keys': ['name'],
                      'x-kubernetes-list-type': 'map',
                    },
                    method: {
                      description: `Method specifies HTTP method matcher.
When specified, this route will be matched only if the request has the
specified method.

Support: Extended`,
                      type: 'string',
                      enum: [
                        'GET',
                        'HEAD',
                        'POST',
                        'PUT',
                        'DELETE',
                        'CONNECT',
                        'OPTIONS',
                        'TRACE',
                        'PATCH',
                      ],
                    },
                    path: {
                      description: `Path specifies a HTTP request path matcher. If this field is not
specified, a default prefix match on the "/" path is provided.`,
                      type: 'object',
                      default: {
                        type: 'PathPrefix',
                        value: '/',
                      },
                      properties: {
                        type: {
                          description: `Type specifies how to match against the path Value.

Support: Core (Exact, PathPrefix)

Support: Implementation-specific (RegularExpression)`,
                          type: 'string',
                          default: 'PathPrefix',
                          enum: ['Exact', 'PathPrefix', 'RegularExpression'],
                        },
                        value: {
                          description: 'Value of the HTTP path to match against.',
                          type: 'string',
                          default: '/',
                          maxLength: 1024,
                        },
                      },
                      'x-kubernetes-validations': [
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? self.value.startsWith('/') : true",
                          message:
                            "value must be an absolute path and start with '/' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('//') : true",
                          message:
                            "must not contain '//' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('/./') : true",
                          message:
                            "must not contain '/./' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('/../') : true",
                          message:
                            "must not contain '/../' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('%2f') : true",
                          message:
                            "must not contain '%2f' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('%2F') : true",
                          message:
                            "must not contain '%2F' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('#') : true",
                          message:
                            "must not contain '#' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.endsWith('/..') : true",
                          message:
                            "must not end with '/..' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "(self.type in ['Exact','PathPrefix']) ? !self.value.endsWith('/.') : true",
                          message:
                            "must not end with '/.' when type one of ['Exact', 'PathPrefix']",
                        },
                        {
                          rule: "self.type in ['Exact','PathPrefix'] || self.type == 'RegularExpression'",
                          message:
                            "type must be one of ['Exact', 'PathPrefix', 'RegularExpression']",
                        },
                        {
                          rule: `(self.type in ['Exact','PathPrefix']) ? self.value.matches(r"""^(?:[-A-Za-z0-9/._~!$&'()*+,;=:@]|[%][0-9a-fA-F]{2})+$""") : true`,
                          message:
                            "must only contain valid characters (matching ^(?:[-A-Za-z0-9/._~!$&'()*+,;=:@]|[%][0-9a-fA-F]{2})+$) for types ['Exact', 'PathPrefix']",
                        },
                      ],
                    },
                    queryParams: {
                      description: `QueryParams specifies HTTP query parameter matchers. Multiple match
values are ANDed together, meaning, a request must match all the
specified query parameters to select the route.

Support: Extended`,
                      type: 'array',
                      maxItems: 16,
                      items: {
                        description: `HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP
query parameters.`,
                        type: 'object',
                        required: ['name', 'value'],
                        properties: {
                          name: {
                            description: `Name is the name of the HTTP query param to be matched. This must be an
exact string match. (See
https://tools.ietf.org/html/rfc7230#section-2.7.3).

If multiple entries specify equivalent query param names, only the first
entry with an equivalent name MUST be considered for a match. Subsequent
entries with an equivalent query param name MUST be ignored.

If a query param is repeated in an HTTP request, the behavior is
purposely left undefined, since different data planes have different
capabilities. However, it is *recommended* that implementations should
match against the first value of the param if the data plane supports it,
as this behavior is expected in other load balancing contexts outside of
the Gateway API.

Users SHOULD NOT route traffic based on repeated query params to guard
themselves against potential differences in the implementations.`,
                            type: 'string',
                            maxLength: 256,
                            minLength: 1,
                            pattern: "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                          },
                          type: {
                            description: `Type specifies how to match against the value of the query parameter.

Support: Extended (Exact)

Support: Implementation-specific (RegularExpression)

Since RegularExpression QueryParamMatchType has Implementation-specific
conformance, implementations can support POSIX, PCRE or any other
dialects of regular expressions. Please read the implementation's
documentation to determine the supported dialect.`,
                            type: 'string',
                            default: 'Exact',
                            enum: ['Exact', 'RegularExpression'],
                          },
                          value: {
                            description:
                              'Value is the value of HTTP query param to be matched.',
                            type: 'string',
                            maxLength: 1024,
                            minLength: 1,
                          },
                        },
                      },
                      'x-kubernetes-list-map-keys': ['name'],
                      'x-kubernetes-list-type': 'map',
                    },
                  },
                },
              },
              timeouts: {
                description: `Timeouts defines the timeouts that can be configured for an HTTP request.

Support: Extended`,
                type: 'object',
                properties: {
                  backendRequest: {
                    description: `BackendRequest specifies a timeout for an individual request from the gateway
to a backend. This covers the time from when the request first starts being
sent from the gateway to when the full response has been received from the backend.

Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
completely. Implementations that cannot completely disable the timeout MUST
instead interpret the zero duration as the longest possible value to which
the timeout can be set.

An entire client HTTP transaction with a gateway, covered by the Request timeout,
may result in more than one call from the gateway to the destination backend,
for example, if automatic retries are supported.

The value of BackendRequest must be a Gateway API Duration string as defined by
GEP-2257.  When this field is unspecified, its behavior is implementation-specific;
when specified, the value of BackendRequest must be no more than the value of the
Request timeout (since the Request timeout encompasses the BackendRequest timeout).

Support: Extended`,
                    type: 'string',
                    pattern: '^([0-9]{1,5}(h|m|s|ms)){1,4}$',
                  },
                  request: {
                    description: `Request specifies the maximum duration for a gateway to respond to an HTTP request.
If the gateway has not been able to respond before this deadline is met, the gateway
MUST return a timeout error.

For example, setting the \`rules.timeouts.request\` field to the value \`10s\` in an
\`HTTPRoute\` will cause a timeout if a client request is taking longer than 10 seconds
to complete.

Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
completely. Implementations that cannot completely disable the timeout MUST
instead interpret the zero duration as the longest possible value to which
the timeout can be set.

This timeout is intended to cover as close to the whole request-response transaction
as possible although an implementation MAY choose to start the timeout after the entire
request stream has been received instead of immediately after the transaction is
initiated by the client.

The value of Request is a Gateway API Duration string as defined by GEP-2257. When this
field is unspecified, request timeout behavior is implementation-specific.

Support: Extended`,
                    type: 'string',
                    pattern: '^([0-9]{1,5}(h|m|s|ms)){1,4}$',
                  },
                },
                'x-kubernetes-validations': [
                  {
                    rule: "!(has(self.request) && has(self.backendRequest) && duration(self.request) != duration('0s') && duration(self.backendRequest) > duration(self.request))",
                    message:
                      'backendRequest timeout cannot be longer than request timeout',
                  },
                ],
              },
            },
            'x-kubernetes-validations': [
              {
                rule: '(has(self.backendRefs) && size(self.backendRefs) > 0) ? (!has(self.filters) || self.filters.all(f, !has(f.requestRedirect))): true',
                message:
                  'RequestRedirect filter must not be used together with backendRefs',
              },
              {
                rule: "(has(self.filters) && self.filters.exists_one(f, has(f.requestRedirect) && has(f.requestRedirect.path) && f.requestRedirect.path.type == 'ReplacePrefixMatch' && has(f.requestRedirect.path.replacePrefixMatch))) ? ((size(self.matches) != 1 || !has(self.matches[0].path) || self.matches[0].path.type != 'PathPrefix') ? false : true) : true",
                message:
                  'When using RequestRedirect filter with path.replacePrefixMatch, exactly one PathPrefix match must be specified',
              },
              {
                rule: "(has(self.filters) && self.filters.exists_one(f, has(f.urlRewrite) && has(f.urlRewrite.path) && f.urlRewrite.path.type == 'ReplacePrefixMatch' && has(f.urlRewrite.path.replacePrefixMatch))) ? ((size(self.matches) != 1 || !has(self.matches[0].path) || self.matches[0].path.type != 'PathPrefix') ? false : true) : true",
                message:
                  'When using URLRewrite filter with path.replacePrefixMatch, exactly one PathPrefix match must be specified',
              },
              {
                rule: "(has(self.backendRefs) && self.backendRefs.exists_one(b, (has(b.filters) && b.filters.exists_one(f, has(f.requestRedirect) && has(f.requestRedirect.path) && f.requestRedirect.path.type == 'ReplacePrefixMatch' && has(f.requestRedirect.path.replacePrefixMatch))) )) ? ((size(self.matches) != 1 || !has(self.matches[0].path) || self.matches[0].path.type != 'PathPrefix') ? false : true) : true",
                message:
                  'Within backendRefs, when using RequestRedirect filter with path.replacePrefixMatch, exactly one PathPrefix match must be specified',
              },
              {
                rule: "(has(self.backendRefs) && self.backendRefs.exists_one(b, (has(b.filters) && b.filters.exists_one(f, has(f.urlRewrite) && has(f.urlRewrite.path) && f.urlRewrite.path.type == 'ReplacePrefixMatch' && has(f.urlRewrite.path.replacePrefixMatch))) )) ? ((size(self.matches) != 1 || !has(self.matches[0].path) || self.matches[0].path.type != 'PathPrefix') ? false : true) : true",
                message:
                  'Within backendRefs, When using URLRewrite filter with path.replacePrefixMatch, exactly one PathPrefix match must be specified',
              },
            ],
          },
          'x-kubernetes-validations': [
            {
              rule: '(self.size() > 0 ? self[0].matches.size() : 0) + (self.size() > 1 ? self[1].matches.size() : 0) + (self.size() > 2 ? self[2].matches.size() : 0) + (self.size() > 3 ? self[3].matches.size() : 0) + (self.size() > 4 ? self[4].matches.size() : 0) + (self.size() > 5 ? self[5].matches.size() : 0) + (self.size() > 6 ? self[6].matches.size() : 0) + (self.size() > 7 ? self[7].matches.size() : 0) + (self.size() > 8 ? self[8].matches.size() : 0) + (self.size() > 9 ? self[9].matches.size() : 0) + (self.size() > 10 ? self[10].matches.size() : 0) + (self.size() > 11 ? self[11].matches.size() : 0) + (self.size() > 12 ? self[12].matches.size() : 0) + (self.size() > 13 ? self[13].matches.size() : 0) + (self.size() > 14 ? self[14].matches.size() : 0) + (self.size() > 15 ? self[15].matches.size() : 0) <= 128',
              message:
                'While 16 rules and 64 matches per rule are allowed, the total number of matches across all rules in a route must be less than 128',
            },
          ],
        },
      },
    },
    status: {
      description: 'Status defines the current state of HTTPRoute.',
      type: 'object',
      required: ['parents'],
      properties: {
        parents: {
          description: `Parents is a list of parent resources (usually Gateways) that are
associated with the route, and the status of the route with respect to
each parent. When this route attaches to a parent, the controller that
manages the parent must add an entry to this list when the controller
first sees the route and should update the entry as appropriate when the
route or gateway is modified.

Note that parent references that cannot be resolved by an implementation
of this API will not be added to this list. Implementations of this API
can only populate Route status for the Gateways/parent resources they are
responsible for.

A maximum of 32 Gateways will be represented in this list. An empty list
means the route has not been attached to any Gateway.`,
          type: 'array',
          maxItems: 32,
          items: {
            description: `RouteParentStatus describes the status of a route with respect to an
associated Parent.`,
            type: 'object',
            required: ['controllerName', 'parentRef'],
            properties: {
              conditions: {
                description: `Conditions describes the status of the route with respect to the Gateway.
Note that the route's availability is also subject to the Gateway's own
status conditions and listener status.

If the Route's ParentRef specifies an existing Gateway that supports
Routes of this kind AND that Gateway's controller has sufficient access,
then that Gateway's controller MUST set the "Accepted" condition on the
Route, to indicate whether the route has been accepted or rejected by the
Gateway, and why.

A Route MUST be considered "Accepted" if at least one of the Route's
rules is implemented by the Gateway.

There are a number of cases where the "Accepted" condition may not be set
due to lack of controller visibility, that includes when:

* The Route refers to a non-existent parent.
* The Route is of a type that the controller does not support.
* The Route is in a namespace the controller does not have access to.`,
                type: 'array',
                maxItems: 8,
                minItems: 1,
                items: {
                  description:
                    'Condition contains details for one aspect of the current state of this API Resource.',
                  type: 'object',
                  required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
                  properties: {
                    lastTransitionTime: {
                      description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                      type: 'string',
                      format: 'date-time',
                    },
                    message: {
                      description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                      type: 'string',
                      maxLength: 32768,
                    },
                    observedGeneration: {
                      description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                      type: 'integer',
                      format: 'int64',
                      minimum: 0,
                    },
                    reason: {
                      description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                      type: 'string',
                      maxLength: 1024,
                      minLength: 1,
                      pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
                    },
                    status: {
                      description:
                        'status of the condition, one of True, False, Unknown.',
                      type: 'string',
                      enum: ['True', 'False', 'Unknown'],
                    },
                    type: {
                      description:
                        'type of condition in CamelCase or in foo.example.com/CamelCase.',
                      type: 'string',
                      maxLength: 316,
                      pattern:
                        '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
                    },
                  },
                },
                'x-kubernetes-list-map-keys': ['type'],
                'x-kubernetes-list-type': 'map',
              },
              controllerName: {
                description: `ControllerName is a domain/path string that indicates the name of the
controller that wrote this status. This corresponds with the
controllerName field on GatewayClass.

Example: "example.net/gateway-controller".

The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
valid Kubernetes names
(https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).

Controllers MUST populate this field when writing status. Controllers should ensure that
entries to status populated with their ControllerName are cleaned up when they are no
longer necessary.`,
                type: 'string',
                maxLength: 253,
                minLength: 1,
                pattern:
                  "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/[A-Za-z0-9\\/\\-._~%!$&'()*+,;=:]+$",
              },
              parentRef: {
                description: `ParentRef corresponds with a ParentRef in the spec that this
RouteParentStatus struct describes the status of.`,
                type: 'object',
                required: ['name'],
                properties: {
                  group: {
                    description: `Group is the group of the referent.
When unspecified, "gateway.networking.k8s.io" is inferred.
To set the core API group (such as for a "Service" kind referent),
Group must be explicitly set to "" (empty string).

Support: Core`,
                    type: 'string',
                    default: 'gateway.networking.k8s.io',
                    maxLength: 253,
                    pattern:
                      '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                  },
                  kind: {
                    description: `Kind is kind of the referent.

There are two kinds of parent resources with "Core" support:

* Gateway (Gateway conformance profile)
* Service (Mesh conformance profile, ClusterIP Services only)

Support for other resources is Implementation-Specific.`,
                    type: 'string',
                    default: 'Gateway',
                    maxLength: 63,
                    minLength: 1,
                    pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                  },
                  name: {
                    description: `Name is the name of the referent.

Support: Core`,
                    type: 'string',
                    maxLength: 253,
                    minLength: 1,
                  },
                  namespace: {
                    description: `Namespace is the namespace of the referent. When unspecified, this refers
to the local namespace of the Route.

Note that there are specific rules for ParentRefs which cross namespace
boundaries. Cross-namespace references are only valid if they are explicitly
allowed by something in the namespace they are referring to. For example:
Gateway has the AllowedRoutes field, and ReferenceGrant provides a
generic way to enable any other kind of cross-namespace reference.



Support: Core`,
                    type: 'string',
                    maxLength: 63,
                    minLength: 1,
                    pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$',
                  },
                  port: {
                    description: `Port is the network port this Route targets. It can be interpreted
differently based on the type of parent resource.

When the parent resource is a Gateway, this targets all listeners
listening on the specified port that also support this kind of Route(and
select this Route). It's not recommended to set \`Port\` unless the
networking behaviors specified in a Route must apply to a specific port
as opposed to a listener(s) whose port(s) may be changed. When both Port
and SectionName are specified, the name and port of the selected listener
must match both specified values.



Implementations MAY choose to support other parent resources.
Implementations supporting other types of parent resources MUST clearly
document how/if Port is interpreted.

For the purpose of status, an attachment is considered successful as
long as the parent resource accepts it partially. For example, Gateway
listeners can restrict which Routes can attach to them by Route kind,
namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
from the referencing Route, the Route MUST be considered successfully
attached. If no Gateway listeners accept attachment from this Route,
the Route MUST be considered detached from the Gateway.

Support: Extended`,
                    type: 'integer',
                    format: 'int32',
                    maximum: 65535,
                    minimum: 1,
                  },
                  sectionName: {
                    description: `SectionName is the name of a section within the target resource. In the
following resources, SectionName is interpreted as the following:

* Gateway: Listener name. When both Port (experimental) and SectionName
are specified, the name and port of the selected listener must match
both specified values.
* Service: Port name. When both Port (experimental) and SectionName
are specified, the name and port of the selected listener must match
both specified values.

Implementations MAY choose to support attaching Routes to other resources.
If that is the case, they MUST clearly document how SectionName is
interpreted.

When unspecified (empty string), this will reference the entire resource.
For the purpose of status, an attachment is considered successful if at
least one section in the parent resource accepts it. For example, Gateway
listeners can restrict which Routes can attach to them by Route kind,
namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
the referencing Route, the Route MUST be considered successfully
attached. If no Gateway listeners accept attachment from this Route, the
Route MUST be considered detached from the Gateway.

Support: Core`,
                    type: 'string',
                    maxLength: 253,
                    minLength: 1,
                    pattern:
                      '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                  },
                },
              },
            },
          },
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'gateway.networking.k8s.io',
      kind: 'HTTPRoute',
      version: 'v1',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const

export const io_k8s_networking_gateway_v1_HTTPRouteListSchema = {
  description: 'HTTPRouteList is a list of HTTPRoute',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of httproutes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/io.k8s.networking.gateway.v1.HTTPRoute',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'gateway.networking.k8s.io',
      kind: 'HTTPRouteList',
      version: 'v1',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const
