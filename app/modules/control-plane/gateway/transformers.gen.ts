/* eslint-disable @typescript-eslint/no-explicit-any */
// This file is auto-generated by @hey-api/openapi-ts
import type {
  DeleteGatewayNetworkingV1CollectionGatewayClassResponse,
  ListGatewayNetworkingV1GatewayClassResponse,
  CreateGatewayNetworkingV1GatewayClassResponse,
  DeleteGatewayNetworkingV1GatewayClassResponse,
  ReadGatewayNetworkingV1GatewayClassResponse,
  PatchGatewayNetworkingV1GatewayClassResponse,
  ReplaceGatewayNetworkingV1GatewayClassResponse,
  ReadGatewayNetworkingV1GatewayClassStatusResponse,
  PatchGatewayNetworkingV1GatewayClassStatusResponse,
  ReplaceGatewayNetworkingV1GatewayClassStatusResponse,
  ListGatewayNetworkingV1GatewayForAllNamespacesResponse,
  ListGatewayNetworkingV1HttpRouteForAllNamespacesResponse,
  DeleteGatewayNetworkingV1CollectionNamespacedGatewayResponse,
  ListGatewayNetworkingV1NamespacedGatewayResponse,
  CreateGatewayNetworkingV1NamespacedGatewayResponse,
  DeleteGatewayNetworkingV1NamespacedGatewayResponse,
  ReadGatewayNetworkingV1NamespacedGatewayResponse,
  PatchGatewayNetworkingV1NamespacedGatewayResponse,
  ReplaceGatewayNetworkingV1NamespacedGatewayResponse,
  ReadGatewayNetworkingV1NamespacedGatewayStatusResponse,
  PatchGatewayNetworkingV1NamespacedGatewayStatusResponse,
  ReplaceGatewayNetworkingV1NamespacedGatewayStatusResponse,
  DeleteGatewayNetworkingV1CollectionNamespacedHttpRouteResponse,
  ListGatewayNetworkingV1NamespacedHttpRouteResponse,
  CreateGatewayNetworkingV1NamespacedHttpRouteResponse,
  DeleteGatewayNetworkingV1NamespacedHttpRouteResponse,
  ReadGatewayNetworkingV1NamespacedHttpRouteResponse,
  PatchGatewayNetworkingV1NamespacedHttpRouteResponse,
  ReplaceGatewayNetworkingV1NamespacedHttpRouteResponse,
  ReadGatewayNetworkingV1NamespacedHttpRouteStatusResponse,
  PatchGatewayNetworkingV1NamespacedHttpRouteStatusResponse,
  ReplaceGatewayNetworkingV1NamespacedHttpRouteStatusResponse,
} from './types.gen'

const ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer = (data: any) => {
  if (data.remainingItemCount) {
    data.remainingItemCount = BigInt(data.remainingItemCount.toString())
  }
  return data
}

const ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(
      data.metadata,
    )
  }
  return data
}

export const deleteGatewayNetworkingV1CollectionGatewayClassResponseTransformer = async (
  data: any,
): Promise<DeleteGatewayNetworkingV1CollectionGatewayClassResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data)
  return data
}

const ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer = (data: any) => {
  data = new Date(data)
  return data
}

const ioK8sApimachineryPkgApisMetaV1ManagedFieldsEntrySchemaResponseTransformer = (
  data: any,
) => {
  if (data.time) {
    data.time = ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer(data.time)
  }
  return data
}

const ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer = (data: any) => {
  if (data.creationTimestamp) {
    data.creationTimestamp = ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer(
      data.creationTimestamp,
    )
  }
  if (data.deletionGracePeriodSeconds) {
    data.deletionGracePeriodSeconds = BigInt(data.deletionGracePeriodSeconds.toString())
  }
  if (data.deletionTimestamp) {
    data.deletionTimestamp = ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer(
      data.deletionTimestamp,
    )
  }
  if (data.generation) {
    data.generation = BigInt(data.generation.toString())
  }
  if (data.managedFields) {
    data.managedFields = data.managedFields.map((item: any) => {
      return ioK8sApimachineryPkgApisMetaV1ManagedFieldsEntrySchemaResponseTransformer(
        item,
      )
    })
  }
  return data
}

const ioK8sNetworkingGatewayV1GatewayClassSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata,
    )
  }
  if (data.status) {
    if (data.status.conditions) {
      data.status.conditions = data.status.conditions.map((item: any) => {
        item.lastTransitionTime = new Date(item.lastTransitionTime)
        if (item.observedGeneration) {
          item.observedGeneration = BigInt(item.observedGeneration.toString())
        }
        return item
      })
    }
  }
  return data
}

const ioK8sNetworkingGatewayV1GatewayClassListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return ioK8sNetworkingGatewayV1GatewayClassSchemaResponseTransformer(item)
  })
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(
      data.metadata,
    )
  }
  return data
}

export const listGatewayNetworkingV1GatewayClassResponseTransformer = async (
  data: any,
): Promise<ListGatewayNetworkingV1GatewayClassResponse> => {
  data = ioK8sNetworkingGatewayV1GatewayClassListSchemaResponseTransformer(data)
  return data
}

export const createGatewayNetworkingV1GatewayClassResponseTransformer = async (
  data: any,
): Promise<CreateGatewayNetworkingV1GatewayClassResponse> => {
  data = ioK8sNetworkingGatewayV1GatewayClassSchemaResponseTransformer(data)
  return data
}

export const deleteGatewayNetworkingV1GatewayClassResponseTransformer = async (
  data: any,
): Promise<DeleteGatewayNetworkingV1GatewayClassResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data)
  return data
}

export const readGatewayNetworkingV1GatewayClassResponseTransformer = async (
  data: any,
): Promise<ReadGatewayNetworkingV1GatewayClassResponse> => {
  data = ioK8sNetworkingGatewayV1GatewayClassSchemaResponseTransformer(data)
  return data
}

export const patchGatewayNetworkingV1GatewayClassResponseTransformer = async (
  data: any,
): Promise<PatchGatewayNetworkingV1GatewayClassResponse> => {
  data = ioK8sNetworkingGatewayV1GatewayClassSchemaResponseTransformer(data)
  return data
}

export const replaceGatewayNetworkingV1GatewayClassResponseTransformer = async (
  data: any,
): Promise<ReplaceGatewayNetworkingV1GatewayClassResponse> => {
  data = ioK8sNetworkingGatewayV1GatewayClassSchemaResponseTransformer(data)
  return data
}

export const readGatewayNetworkingV1GatewayClassStatusResponseTransformer = async (
  data: any,
): Promise<ReadGatewayNetworkingV1GatewayClassStatusResponse> => {
  data = ioK8sNetworkingGatewayV1GatewayClassSchemaResponseTransformer(data)
  return data
}

export const patchGatewayNetworkingV1GatewayClassStatusResponseTransformer = async (
  data: any,
): Promise<PatchGatewayNetworkingV1GatewayClassStatusResponse> => {
  data = ioK8sNetworkingGatewayV1GatewayClassSchemaResponseTransformer(data)
  return data
}

export const replaceGatewayNetworkingV1GatewayClassStatusResponseTransformer = async (
  data: any,
): Promise<ReplaceGatewayNetworkingV1GatewayClassStatusResponse> => {
  data = ioK8sNetworkingGatewayV1GatewayClassSchemaResponseTransformer(data)
  return data
}

const ioK8sNetworkingGatewayV1GatewaySchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata,
    )
  }
  if (data.status) {
    if (data.status.conditions) {
      data.status.conditions = data.status.conditions.map((item: any) => {
        item.lastTransitionTime = new Date(item.lastTransitionTime)
        if (item.observedGeneration) {
          item.observedGeneration = BigInt(item.observedGeneration.toString())
        }
        return item
      })
    }
    if (data.status.listeners) {
      data.status.listeners = data.status.listeners.map((item: any) => {
        item.conditions = item.conditions.map((item: any) => {
          item.lastTransitionTime = new Date(item.lastTransitionTime)
          if (item.observedGeneration) {
            item.observedGeneration = BigInt(item.observedGeneration.toString())
          }
          return item
        })
        return item
      })
    }
  }
  return data
}

const ioK8sNetworkingGatewayV1GatewayListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return ioK8sNetworkingGatewayV1GatewaySchemaResponseTransformer(item)
  })
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(
      data.metadata,
    )
  }
  return data
}

export const listGatewayNetworkingV1GatewayForAllNamespacesResponseTransformer = async (
  data: any,
): Promise<ListGatewayNetworkingV1GatewayForAllNamespacesResponse> => {
  data = ioK8sNetworkingGatewayV1GatewayListSchemaResponseTransformer(data)
  return data
}

const ioK8sNetworkingGatewayV1HttpRouteSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata,
    )
  }
  if (data.status) {
    data.status.parents = data.status.parents.map((item: any) => {
      if (item.conditions) {
        item.conditions = item.conditions.map((item: any) => {
          item.lastTransitionTime = new Date(item.lastTransitionTime)
          if (item.observedGeneration) {
            item.observedGeneration = BigInt(item.observedGeneration.toString())
          }
          return item
        })
      }
      return item
    })
  }
  return data
}

const ioK8sNetworkingGatewayV1HttpRouteListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return ioK8sNetworkingGatewayV1HttpRouteSchemaResponseTransformer(item)
  })
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(
      data.metadata,
    )
  }
  return data
}

export const listGatewayNetworkingV1HttpRouteForAllNamespacesResponseTransformer = async (
  data: any,
): Promise<ListGatewayNetworkingV1HttpRouteForAllNamespacesResponse> => {
  data = ioK8sNetworkingGatewayV1HttpRouteListSchemaResponseTransformer(data)
  return data
}

export const deleteGatewayNetworkingV1CollectionNamespacedGatewayResponseTransformer =
  async (
    data: any,
  ): Promise<DeleteGatewayNetworkingV1CollectionNamespacedGatewayResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data)
    return data
  }

export const listGatewayNetworkingV1NamespacedGatewayResponseTransformer = async (
  data: any,
): Promise<ListGatewayNetworkingV1NamespacedGatewayResponse> => {
  data = ioK8sNetworkingGatewayV1GatewayListSchemaResponseTransformer(data)
  return data
}

export const createGatewayNetworkingV1NamespacedGatewayResponseTransformer = async (
  data: any,
): Promise<CreateGatewayNetworkingV1NamespacedGatewayResponse> => {
  data = ioK8sNetworkingGatewayV1GatewaySchemaResponseTransformer(data)
  return data
}

export const deleteGatewayNetworkingV1NamespacedGatewayResponseTransformer = async (
  data: any,
): Promise<DeleteGatewayNetworkingV1NamespacedGatewayResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data)
  return data
}

export const readGatewayNetworkingV1NamespacedGatewayResponseTransformer = async (
  data: any,
): Promise<ReadGatewayNetworkingV1NamespacedGatewayResponse> => {
  data = ioK8sNetworkingGatewayV1GatewaySchemaResponseTransformer(data)
  return data
}

export const patchGatewayNetworkingV1NamespacedGatewayResponseTransformer = async (
  data: any,
): Promise<PatchGatewayNetworkingV1NamespacedGatewayResponse> => {
  data = ioK8sNetworkingGatewayV1GatewaySchemaResponseTransformer(data)
  return data
}

export const replaceGatewayNetworkingV1NamespacedGatewayResponseTransformer = async (
  data: any,
): Promise<ReplaceGatewayNetworkingV1NamespacedGatewayResponse> => {
  data = ioK8sNetworkingGatewayV1GatewaySchemaResponseTransformer(data)
  return data
}

export const readGatewayNetworkingV1NamespacedGatewayStatusResponseTransformer = async (
  data: any,
): Promise<ReadGatewayNetworkingV1NamespacedGatewayStatusResponse> => {
  data = ioK8sNetworkingGatewayV1GatewaySchemaResponseTransformer(data)
  return data
}

export const patchGatewayNetworkingV1NamespacedGatewayStatusResponseTransformer = async (
  data: any,
): Promise<PatchGatewayNetworkingV1NamespacedGatewayStatusResponse> => {
  data = ioK8sNetworkingGatewayV1GatewaySchemaResponseTransformer(data)
  return data
}

export const replaceGatewayNetworkingV1NamespacedGatewayStatusResponseTransformer =
  async (
    data: any,
  ): Promise<ReplaceGatewayNetworkingV1NamespacedGatewayStatusResponse> => {
    data = ioK8sNetworkingGatewayV1GatewaySchemaResponseTransformer(data)
    return data
  }

export const deleteGatewayNetworkingV1CollectionNamespacedHttpRouteResponseTransformer =
  async (
    data: any,
  ): Promise<DeleteGatewayNetworkingV1CollectionNamespacedHttpRouteResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data)
    return data
  }

export const listGatewayNetworkingV1NamespacedHttpRouteResponseTransformer = async (
  data: any,
): Promise<ListGatewayNetworkingV1NamespacedHttpRouteResponse> => {
  data = ioK8sNetworkingGatewayV1HttpRouteListSchemaResponseTransformer(data)
  return data
}

export const createGatewayNetworkingV1NamespacedHttpRouteResponseTransformer = async (
  data: any,
): Promise<CreateGatewayNetworkingV1NamespacedHttpRouteResponse> => {
  data = ioK8sNetworkingGatewayV1HttpRouteSchemaResponseTransformer(data)
  return data
}

export const deleteGatewayNetworkingV1NamespacedHttpRouteResponseTransformer = async (
  data: any,
): Promise<DeleteGatewayNetworkingV1NamespacedHttpRouteResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data)
  return data
}

export const readGatewayNetworkingV1NamespacedHttpRouteResponseTransformer = async (
  data: any,
): Promise<ReadGatewayNetworkingV1NamespacedHttpRouteResponse> => {
  data = ioK8sNetworkingGatewayV1HttpRouteSchemaResponseTransformer(data)
  return data
}

export const patchGatewayNetworkingV1NamespacedHttpRouteResponseTransformer = async (
  data: any,
): Promise<PatchGatewayNetworkingV1NamespacedHttpRouteResponse> => {
  data = ioK8sNetworkingGatewayV1HttpRouteSchemaResponseTransformer(data)
  return data
}

export const replaceGatewayNetworkingV1NamespacedHttpRouteResponseTransformer = async (
  data: any,
): Promise<ReplaceGatewayNetworkingV1NamespacedHttpRouteResponse> => {
  data = ioK8sNetworkingGatewayV1HttpRouteSchemaResponseTransformer(data)
  return data
}

export const readGatewayNetworkingV1NamespacedHttpRouteStatusResponseTransformer = async (
  data: any,
): Promise<ReadGatewayNetworkingV1NamespacedHttpRouteStatusResponse> => {
  data = ioK8sNetworkingGatewayV1HttpRouteSchemaResponseTransformer(data)
  return data
}

export const patchGatewayNetworkingV1NamespacedHttpRouteStatusResponseTransformer =
  async (
    data: any,
  ): Promise<PatchGatewayNetworkingV1NamespacedHttpRouteStatusResponse> => {
    data = ioK8sNetworkingGatewayV1HttpRouteSchemaResponseTransformer(data)
    return data
  }

export const replaceGatewayNetworkingV1NamespacedHttpRouteStatusResponseTransformer =
  async (
    data: any,
  ): Promise<ReplaceGatewayNetworkingV1NamespacedHttpRouteStatusResponse> => {
    data = ioK8sNetworkingGatewayV1HttpRouteSchemaResponseTransformer(data)
    return data
  }
