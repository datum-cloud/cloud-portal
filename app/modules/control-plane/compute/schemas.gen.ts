/* eslint-disable no-useless-escape */
// This file is auto-generated by @hey-api/openapi-ts

export const com_datumapis_compute_v1alpha_InstanceSchema = {
  description: 'Instance is the Schema for the instances API',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'InstanceSpec defines the desired state of Instance',
      type: 'object',
      required: ['networkInterfaces', 'runtime'],
      properties: {
        networkInterfaces: {
          description: 'Network interface configuration.',
          type: 'array',
          minItems: 1,
          items: {
            type: 'object',
            required: ['network'],
            properties: {
              network: {
                description: 'The network to attach the network interface to.',
                type: 'object',
                required: ['name'],
                properties: {
                  name: {
                    description: 'The network name',
                    type: 'string',
                  },
                  namespace: {
                    description: `The network namespace.

Defaults to the namespace for the type the reference is embedded in.`,
                    type: 'string',
                  },
                },
              },
              networkPolicy: {
                description: `Interface specific network policy.

If provided, this will result in a platform managed network policy being
created that targets the specfiic instance interface. This network policy
will be of the lowest priority, and can effectively be prohibited from
influencing network connectivity.`,
                type: 'object',
                properties: {
                  ingress: {
                    type: 'array',
                    items: {
                      description: 'See k8s network policy types for inspiration here',
                      type: 'object',
                      properties: {
                        from: {
                          description: `from is a list of sources which should be able to access the instances selected for this rule.
Items in this list are combined using a logical OR operation. If this field is
empty or missing, this rule matches all sources (traffic not restricted by
source). If this field is present and contains at least one item, this rule
allows traffic only if the traffic matches at least one item in the from list.`,
                          type: 'array',
                          items: {
                            description: `NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of
fields are allowed`,
                            type: 'object',
                            properties: {
                              ipBlock: {
                                description: `ipBlock defines policy on a particular IPBlock. If this field is set then
neither of the other fields can be.`,
                                type: 'object',
                                required: ['cidr'],
                                properties: {
                                  cidr: {
                                    description: `cidr is a string representing the IPBlock
Valid examples are "192.168.1.0/24" or "2001:db8::/64"`,
                                    type: 'string',
                                  },
                                  except: {
                                    description: `except is a slice of CIDRs that should not be included within an IPBlock
Valid examples are "192.168.1.0/24" or "2001:db8::/64"
Except values will be rejected if they are outside the cidr range`,
                                    type: 'array',
                                    items: {
                                      type: 'string',
                                    },
                                    'x-kubernetes-list-type': 'atomic',
                                  },
                                },
                              },
                            },
                          },
                          'x-kubernetes-list-type': 'atomic',
                        },
                        ports: {
                          description: `ports is a list of ports which should be made accessible on the instances selected for
this rule. Each item in this list is combined using a logical OR. If this field is
empty or missing, this rule matches all ports (traffic not restricted by port).
If this field is present and contains at least one item, then this rule allows
traffic only if the traffic matches at least one port in the list.`,
                          type: 'array',
                          items: {
                            description:
                              'NetworkPolicyPort describes a port to allow traffic on',
                            type: 'object',
                            properties: {
                              endPort: {
                                description: `endPort indicates that the range of ports from port to endPort if set, inclusive,
should be allowed by the policy. This field cannot be defined if the port field
is not defined or if the port field is defined as a named (string) port.
The endPort must be equal or greater than port.`,
                                type: 'integer',
                                format: 'int32',
                              },
                              port: {
                                description: `port represents the port on the given protocol. This can either be a numerical or named
port on an instance. If this field is not provided, this matches all port names and
numbers.
If present, only traffic on the specified protocol AND port will be matched.`,
                                anyOf: [
                                  {
                                    type: 'integer',
                                  },
                                  {
                                    type: 'string',
                                  },
                                ],
                                'x-kubernetes-int-or-string': true,
                              },
                              protocol: {
                                description: `protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
If not specified, this field defaults to TCP.`,
                                type: 'string',
                              },
                            },
                          },
                          'x-kubernetes-list-type': 'atomic',
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
        runtime: {
          description:
            'The runtime type of the instance, such as a container sandbox or a VM.',
          type: 'object',
          required: ['resources'],
          properties: {
            resources: {
              description: `Resources each instance must be allocated.

A sandbox runtime's containers may specify resource requests and
limits. When limits are defined on all containers, they MUST consume
the entire amount of resources defined here. Some resources, such
as a GPU, MUST have at least one container request them so that the
device can be presented appropriately.

A virtual machine runtime will be provided all requested resources.`,
              type: 'object',
              required: ['instanceType'],
              properties: {
                instanceType: {
                  description: `Full or partial URL of the instance type resource to use for this instance.

For example: \`datumcloud/d1-standard-2\`

May be combined with \`resources\` to allow for custom instance types for
instance families that support customization. Instance types which support
customization will appear in the form \`<project>/<instanceFamily>-custom\`.`,
                  type: 'string',
                },
                requests: {
                  description:
                    'Describes adjustments to the resources defined by the instance type.',
                  type: 'object',
                  additionalProperties: {
                    pattern:
                      '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                    anyOf: [
                      {
                        type: 'integer',
                      },
                      {
                        type: 'string',
                      },
                    ],
                    'x-kubernetes-int-or-string': true,
                  },
                },
              },
            },
            sandbox: {
              description:
                'A sandbox is a managed isolated environment capable of running containers.',
              type: 'object',
              required: ['containers'],
              properties: {
                containers: {
                  description: 'A list of containers to run within the sandbox.',
                  type: 'array',
                  minItems: 1,
                  items: {
                    type: 'object',
                    required: ['image', 'name'],
                    properties: {
                      env: {
                        description: `List of environment variables to set in the container.

so replicate the structure here too.`,
                        type: 'array',
                        items: {
                          description:
                            'EnvVar represents an environment variable present in a Container.',
                          type: 'object',
                          required: ['name'],
                          properties: {
                            name: {
                              description:
                                'Name of the environment variable. Must be a C_IDENTIFIER.',
                              type: 'string',
                            },
                            value: {
                              description: `Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".`,
                              type: 'string',
                            },
                            valueFrom: {
                              description:
                                "Source for the environment variable's value. Cannot be used if value is not empty.",
                              type: 'object',
                              properties: {
                                configMapKeyRef: {
                                  description: 'Selects a key of a ConfigMap.',
                                  type: 'object',
                                  required: ['key'],
                                  properties: {
                                    key: {
                                      description: 'The key to select.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: `Name of the referent.
This field is effectively required, but due to backwards compatibility is
allowed to be empty. Instances of this type with an empty value here are
almost certainly wrong.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names`,
                                      type: 'string',
                                      default: '',
                                    },
                                    optional: {
                                      description:
                                        'Specify whether the ConfigMap or its key must be defined',
                                      type: 'boolean',
                                    },
                                  },
                                  'x-kubernetes-map-type': 'atomic',
                                },
                                fieldRef: {
                                  description: `Selects a field of the pod: supports metadata.name, metadata.namespace, \`metadata.labels['<KEY>']\`, \`metadata.annotations['<KEY>']\`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.`,
                                  type: 'object',
                                  required: ['fieldPath'],
                                  properties: {
                                    apiVersion: {
                                      description:
                                        'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                      type: 'string',
                                    },
                                    fieldPath: {
                                      description:
                                        'Path of the field to select in the specified API version.',
                                      type: 'string',
                                    },
                                  },
                                  'x-kubernetes-map-type': 'atomic',
                                },
                                resourceFieldRef: {
                                  description: `Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.`,
                                  type: 'object',
                                  required: ['resource'],
                                  properties: {
                                    containerName: {
                                      description:
                                        'Container name: required for volumes, optional for env vars',
                                      type: 'string',
                                    },
                                    divisor: {
                                      description:
                                        'Specifies the output format of the exposed resources, defaults to "1"',
                                      pattern:
                                        '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                                      anyOf: [
                                        {
                                          type: 'integer',
                                        },
                                        {
                                          type: 'string',
                                        },
                                      ],
                                      'x-kubernetes-int-or-string': true,
                                    },
                                    resource: {
                                      description: 'Required: resource to select',
                                      type: 'string',
                                    },
                                  },
                                  'x-kubernetes-map-type': 'atomic',
                                },
                                secretKeyRef: {
                                  description:
                                    "Selects a key of a secret in the pod's namespace",
                                  type: 'object',
                                  required: ['key'],
                                  properties: {
                                    key: {
                                      description:
                                        'The key of the secret to select from.  Must be a valid secret key.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: `Name of the referent.
This field is effectively required, but due to backwards compatibility is
allowed to be empty. Instances of this type with an empty value here are
almost certainly wrong.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names`,
                                      type: 'string',
                                      default: '',
                                    },
                                    optional: {
                                      description:
                                        'Specify whether the Secret or its key must be defined',
                                      type: 'boolean',
                                    },
                                  },
                                  'x-kubernetes-map-type': 'atomic',
                                },
                              },
                            },
                          },
                        },
                        'x-kubernetes-list-map-keys': ['name'],
                        'x-kubernetes-list-type': 'map',
                      },
                      image: {
                        description: 'The fully qualified container image name.',
                        type: 'string',
                      },
                      name: {
                        description: 'The name of the container.',
                        type: 'string',
                      },
                      ports: {
                        description: 'A list of named ports for the container.',
                        type: 'array',
                        items: {
                          type: 'object',
                          required: ['name', 'port'],
                          properties: {
                            name: {
                              description:
                                'The name of the port that can be referenced by other platform features.',
                              type: 'string',
                            },
                            port: {
                              description:
                                'The port number, which can be a value between 1 and 65535.',
                              type: 'integer',
                              format: 'int32',
                              maximum: 65535,
                              minimum: 1,
                            },
                            protocol: {
                              description: `protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
If not specified, this field defaults to TCP.`,
                              type: 'string',
                            },
                          },
                        },
                        'x-kubernetes-list-map-keys': ['name'],
                        'x-kubernetes-list-type': 'map',
                      },
                      resources: {
                        description:
                          'The resource requirements for the container, such as CPU, memory, and GPUs.',
                        type: 'object',
                        properties: {
                          limits: {
                            description:
                              'Limits describes the maximum amount of compute resources allowed.',
                            type: 'object',
                            additionalProperties: {
                              pattern:
                                '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                              anyOf: [
                                {
                                  type: 'integer',
                                },
                                {
                                  type: 'string',
                                },
                              ],
                              'x-kubernetes-int-or-string': true,
                            },
                          },
                          requests: {
                            description:
                              'Requests describes the minimum amount of compute resources required.',
                            type: 'object',
                            additionalProperties: {
                              pattern:
                                '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                              anyOf: [
                                {
                                  type: 'integer',
                                },
                                {
                                  type: 'string',
                                },
                              ],
                              'x-kubernetes-int-or-string': true,
                            },
                          },
                        },
                      },
                      volumeAttachments: {
                        description: 'A list of volumes to attach to the container.',
                        type: 'array',
                        items: {
                          type: 'object',
                          required: ['name'],
                          properties: {
                            mountPath: {
                              description: `The path to mount the volume inside the guest OS.

The referenced volume must be populated with a filesystem to use this
feature.

For VM based instances, this functionality requires certain capabilities
to be annotated on the boot image, such as cloud-init.`,
                              type: 'string',
                            },
                            name: {
                              description:
                                'The name of the volume to attach as defined in InstanceSpec.Volumes.',
                              type: 'string',
                            },
                          },
                        },
                      },
                    },
                  },
                  'x-kubernetes-list-map-keys': ['name'],
                  'x-kubernetes-list-type': 'map',
                },
                imagePullSecrets: {
                  description: `An optional list of secrets in the same namespace to use for pulling images
used by the instance.`,
                  type: 'array',
                  items: {
                    description: `References a secret in the same namespace as the entity defining the
reference.`,
                    type: 'object',
                    required: ['name'],
                    properties: {
                      name: {
                        description: 'The name of the secret',
                        type: 'string',
                      },
                    },
                  },
                },
              },
            },
            virtualMachine: {
              description:
                'A virtual machine is a classical VM environment, booting a full OS provided by the user via an image.',
              type: 'object',
              required: ['volumeAttachments'],
              properties: {
                ports: {
                  description: 'A list of named ports for the virtual machine.',
                  type: 'array',
                  items: {
                    type: 'object',
                    required: ['name', 'port'],
                    properties: {
                      name: {
                        description:
                          'The name of the port that can be referenced by other platform features.',
                        type: 'string',
                      },
                      port: {
                        description:
                          'The port number, which can be a value between 1 and 65535.',
                        type: 'integer',
                        format: 'int32',
                        maximum: 65535,
                        minimum: 1,
                      },
                      protocol: {
                        description: `protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
If not specified, this field defaults to TCP.`,
                        type: 'string',
                      },
                    },
                  },
                  'x-kubernetes-list-map-keys': ['name'],
                  'x-kubernetes-list-type': 'map',
                },
                volumeAttachments: {
                  description: 'A list of volumes to attach to the VM.',
                  type: 'array',
                  minItems: 1,
                  items: {
                    type: 'object',
                    required: ['name'],
                    properties: {
                      mountPath: {
                        description: `The path to mount the volume inside the guest OS.

The referenced volume must be populated with a filesystem to use this
feature.

For VM based instances, this functionality requires certain capabilities
to be annotated on the boot image, such as cloud-init.`,
                        type: 'string',
                      },
                      name: {
                        description:
                          'The name of the volume to attach as defined in InstanceSpec.Volumes.',
                        type: 'string',
                      },
                    },
                  },
                },
              },
            },
          },
        },
        volumes: {
          type: 'array',
          items: {
            type: 'object',
            required: ['name'],
            properties: {
              configMap: {
                description: 'A configMap that should populate this volume',
                type: 'object',
                properties: {
                  defaultMode: {
                    description: `defaultMode is optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.`,
                    type: 'integer',
                    format: 'int32',
                  },
                  items: {
                    description: `items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.`,
                    type: 'array',
                    items: {
                      description: 'Maps a string key to a path within a volume.',
                      type: 'object',
                      required: ['key', 'path'],
                      properties: {
                        key: {
                          description: 'key is the key to project.',
                          type: 'string',
                        },
                        mode: {
                          description: `mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.`,
                          type: 'integer',
                          format: 'int32',
                        },
                        path: {
                          description: `path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.`,
                          type: 'string',
                        },
                      },
                    },
                    'x-kubernetes-list-type': 'atomic',
                  },
                  name: {
                    description: `Name of the referent.
This field is effectively required, but due to backwards compatibility is
allowed to be empty. Instances of this type with an empty value here are
almost certainly wrong.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names`,
                    type: 'string',
                    default: '',
                  },
                  optional: {
                    description:
                      'optional specify whether the ConfigMap or its keys must be defined',
                    type: 'boolean',
                  },
                },
                'x-kubernetes-map-type': 'atomic',
              },
              disk: {
                description: 'A persistent disk backed volume.',
                type: 'object',
                required: ['template'],
                properties: {
                  deviceName: {
                    description: `Specifies a unique device name that is reflected into the
\`/dev/disk/by-id/datumcloud-*\` tree of a Linux operating system
running within the instance. This name can be used to reference
the device for mounting, resizing, and so on, from within the
instance.

If not specified, the server chooses a default device name to
apply to this disk, in the form persistent-disk-x, where x is a
number assigned by Datum Cloud.`,
                    type: 'string',
                  },
                  template: {
                    description: 'Settings to create a new disk for an attached disk',
                    type: 'object',
                    required: ['spec'],
                    properties: {
                      metadata: {
                        description: 'Metadata of the disks created from this template',
                        type: 'object',
                        properties: {
                          annotations: {
                            type: 'object',
                            additionalProperties: {
                              type: 'string',
                            },
                          },
                          finalizers: {
                            type: 'array',
                            items: {
                              type: 'string',
                            },
                          },
                          labels: {
                            type: 'object',
                            additionalProperties: {
                              type: 'string',
                            },
                          },
                          name: {
                            type: 'string',
                          },
                          namespace: {
                            type: 'string',
                          },
                        },
                      },
                      spec: {
                        description: 'Describes the desired configuration of a disk',
                        type: 'object',
                        properties: {
                          populator: {
                            description: 'Populator to use while initializing the disk.',
                            type: 'object',
                            properties: {
                              filesystem: {
                                description: 'Populate the disk with a filesystem',
                                type: 'object',
                                required: ['type'],
                                properties: {
                                  type: {
                                    description:
                                      'The type of filesystem to populate the disk with.',
                                    type: 'string',
                                    enum: ['ext4'],
                                  },
                                },
                              },
                              image: {
                                description: 'Populate the disk from an image',
                                type: 'object',
                                required: ['name'],
                                properties: {
                                  name: {
                                    description: `The name of the image to populate the disk with.

	in \`populator.image.imageRef.name\` though.`,
                                    type: 'string',
                                  },
                                },
                              },
                            },
                          },
                          resources: {
                            description: 'The resource requirements for the disk.',
                            type: 'object',
                            properties: {
                              requests: {
                                description:
                                  'Requests describes the minimum amount of storage resources required.',
                                type: 'object',
                                additionalProperties: {
                                  pattern:
                                    '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                                  anyOf: [
                                    {
                                      type: 'integer',
                                    },
                                    {
                                      type: 'string',
                                    },
                                  ],
                                  'x-kubernetes-int-or-string': true,
                                },
                              },
                            },
                          },
                          type: {
                            description: 'The type the disk, such as `pd-standard`.',
                            type: 'string',
                            default: 'pd-standard',
                          },
                        },
                      },
                    },
                  },
                },
              },
              name: {
                description: `Name is used to reference the volume in \`volumeAttachments\` for
containers and VMs, and will be used to derive the platform resource
name when required by prefixing this name with the instance name upon
creation.`,
                type: 'string',
              },
              secret: {
                description: 'A secret that should populate this volume',
                type: 'object',
                properties: {
                  defaultMode: {
                    description: `defaultMode is Optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values
for mode bits. Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.`,
                    type: 'integer',
                    format: 'int32',
                  },
                  items: {
                    description: `items If unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.`,
                    type: 'array',
                    items: {
                      description: 'Maps a string key to a path within a volume.',
                      type: 'object',
                      required: ['key', 'path'],
                      properties: {
                        key: {
                          description: 'key is the key to project.',
                          type: 'string',
                        },
                        mode: {
                          description: `mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.`,
                          type: 'integer',
                          format: 'int32',
                        },
                        path: {
                          description: `path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.`,
                          type: 'string',
                        },
                      },
                    },
                    'x-kubernetes-list-type': 'atomic',
                  },
                  optional: {
                    description:
                      'optional field specify whether the Secret or its keys must be defined',
                    type: 'boolean',
                  },
                  secretName: {
                    description: `secretName is the name of the secret in the pod's namespace to use.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret`,
                    type: 'string',
                  },
                },
              },
            },
          },
          'x-kubernetes-list-map-keys': ['name'],
          'x-kubernetes-list-type': 'map',
        },
      },
    },
    status: {
      description: 'InstanceStatus defines the observed state of Instance',
      type: 'object',
      properties: {
        conditions: {
          description: `Represents the observations of an instance's current state.
Known condition types are: "Available", "Progressing"`,
          type: 'array',
          items: {
            description:
              'Condition contains details for one aspect of the current state of this API Resource.',
            type: 'object',
            required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
            properties: {
              lastTransitionTime: {
                description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                type: 'string',
                format: 'date-time',
              },
              message: {
                description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                type: 'string',
                maxLength: 32768,
              },
              observedGeneration: {
                description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                type: 'integer',
                format: 'int64',
                minimum: 0,
              },
              reason: {
                description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                type: 'string',
                maxLength: 1024,
                minLength: 1,
                pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
              },
              status: {
                description: 'status of the condition, one of True, False, Unknown.',
                type: 'string',
                enum: ['True', 'False', 'Unknown'],
              },
              type: {
                description:
                  'type of condition in CamelCase or in foo.example.com/CamelCase.',
                type: 'string',
                maxLength: 316,
                pattern:
                  '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
              },
            },
          },
        },
        networkInterfaces: {
          description: 'Network interface information',
          type: 'array',
          items: {
            type: 'object',
            properties: {
              assignments: {
                type: 'object',
                properties: {
                  externalIP: {
                    description: `The external IP address used for the interface. A one to one NAT will be
performed for this address with the interface's network IP.`,
                    type: 'string',
                  },
                  networkIP: {
                    description:
                      'The IP address assigned as the primary IP from the attached network.',
                    type: 'string',
                  },
                },
              },
            },
          },
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'compute.datumapis.com',
      kind: 'Instance',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const

export const com_datumapis_compute_v1alpha_InstanceListSchema = {
  description: 'InstanceList is a list of Instance',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of instances. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/com.datumapis.compute.v1alpha.Instance',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'compute.datumapis.com',
      kind: 'InstanceList',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const

export const com_datumapis_compute_v1alpha_WorkloadSchema = {
  description: 'Workload is the Schema for the workloads API',
  type: 'object',
  required: ['spec'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'WorkloadSpec defines the desired state of Workload',
      type: 'object',
      required: ['placements', 'template'],
      properties: {
        placements: {
          description: `Defines where instances should be deployed, and at what scope a deployment
will live in, such as in a city, or region.`,
          type: 'array',
          minItems: 1,
          items: {
            type: 'object',
            required: ['cityCodes', 'name', 'scaleSettings'],
            properties: {
              cityCodes: {
                description:
                  'A list of city codes that define where the instances should be deployed.',
                type: 'array',
                items: {
                  type: 'string',
                },
              },
              name: {
                description: 'The name of the placement',
                type: 'string',
              },
              scaleSettings: {
                description: 'Scale settings such as minimum and maximum replica counts.',
                type: 'object',
                required: ['minReplicas'],
                properties: {
                  maxReplicas: {
                    description: 'The maximum number of replicas.',
                    type: 'integer',
                    format: 'int32',
                  },
                  metrics: {
                    description:
                      'A list of metrics that determine scaling behavior, such as external metrics.',
                    type: 'array',
                    items: {
                      type: 'object',
                      properties: {
                        resource: {
                          description: 'Resource metrics known to Datum.',
                          type: 'object',
                          required: ['name', 'target'],
                          properties: {
                            name: {
                              description: 'The name of the resource in question.',
                              type: 'string',
                            },
                            target: {
                              description: 'The target value for the given metric',
                              type: 'object',
                              properties: {
                                averageUtilization: {
                                  description: `The target value of the average of the
resource metric across all relevant instances, represented as a percentage of
the requested value of the resource for the instances.`,
                                  type: 'integer',
                                  format: 'int32',
                                },
                                averageValue: {
                                  description: `The target value of the average of the metric across all relevant instances
(as a quantity)`,
                                  pattern:
                                    '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                                  anyOf: [
                                    {
                                      type: 'integer',
                                    },
                                    {
                                      type: 'string',
                                    },
                                  ],
                                  'x-kubernetes-int-or-string': true,
                                },
                                value: {
                                  description:
                                    'The target value of the metric (as a quantity).',
                                  pattern:
                                    '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                                  anyOf: [
                                    {
                                      type: 'integer',
                                    },
                                    {
                                      type: 'string',
                                    },
                                  ],
                                  'x-kubernetes-int-or-string': true,
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                  minReplicas: {
                    description: 'The minimum number of replicas.',
                    type: 'integer',
                    format: 'int32',
                  },
                },
              },
            },
          },
        },
        template: {
          description: 'Defines settings for each instance.',
          type: 'object',
          required: ['spec'],
          properties: {
            metadata: {
              description: 'Metadata of the instances created from this template',
              type: 'object',
              properties: {
                annotations: {
                  type: 'object',
                  additionalProperties: {
                    type: 'string',
                  },
                },
                finalizers: {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
                labels: {
                  type: 'object',
                  additionalProperties: {
                    type: 'string',
                  },
                },
                name: {
                  type: 'string',
                },
                namespace: {
                  type: 'string',
                },
              },
            },
            spec: {
              description: 'Describes the desired configuration of an instance',
              type: 'object',
              required: ['networkInterfaces', 'runtime'],
              properties: {
                networkInterfaces: {
                  description: 'Network interface configuration.',
                  type: 'array',
                  minItems: 1,
                  items: {
                    type: 'object',
                    required: ['network'],
                    properties: {
                      network: {
                        description: 'The network to attach the network interface to.',
                        type: 'object',
                        required: ['name'],
                        properties: {
                          name: {
                            description: 'The network name',
                            type: 'string',
                          },
                          namespace: {
                            description: `The network namespace.

Defaults to the namespace for the type the reference is embedded in.`,
                            type: 'string',
                          },
                        },
                      },
                      networkPolicy: {
                        description: `Interface specific network policy.

If provided, this will result in a platform managed network policy being
created that targets the specfiic instance interface. This network policy
will be of the lowest priority, and can effectively be prohibited from
influencing network connectivity.`,
                        type: 'object',
                        properties: {
                          ingress: {
                            type: 'array',
                            items: {
                              description:
                                'See k8s network policy types for inspiration here',
                              type: 'object',
                              properties: {
                                from: {
                                  description: `from is a list of sources which should be able to access the instances selected for this rule.
Items in this list are combined using a logical OR operation. If this field is
empty or missing, this rule matches all sources (traffic not restricted by
source). If this field is present and contains at least one item, this rule
allows traffic only if the traffic matches at least one item in the from list.`,
                                  type: 'array',
                                  items: {
                                    description: `NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of
fields are allowed`,
                                    type: 'object',
                                    properties: {
                                      ipBlock: {
                                        description: `ipBlock defines policy on a particular IPBlock. If this field is set then
neither of the other fields can be.`,
                                        type: 'object',
                                        required: ['cidr'],
                                        properties: {
                                          cidr: {
                                            description: `cidr is a string representing the IPBlock
Valid examples are "192.168.1.0/24" or "2001:db8::/64"`,
                                            type: 'string',
                                          },
                                          except: {
                                            description: `except is a slice of CIDRs that should not be included within an IPBlock
Valid examples are "192.168.1.0/24" or "2001:db8::/64"
Except values will be rejected if they are outside the cidr range`,
                                            type: 'array',
                                            items: {
                                              type: 'string',
                                            },
                                            'x-kubernetes-list-type': 'atomic',
                                          },
                                        },
                                      },
                                    },
                                  },
                                  'x-kubernetes-list-type': 'atomic',
                                },
                                ports: {
                                  description: `ports is a list of ports which should be made accessible on the instances selected for
this rule. Each item in this list is combined using a logical OR. If this field is
empty or missing, this rule matches all ports (traffic not restricted by port).
If this field is present and contains at least one item, then this rule allows
traffic only if the traffic matches at least one port in the list.`,
                                  type: 'array',
                                  items: {
                                    description:
                                      'NetworkPolicyPort describes a port to allow traffic on',
                                    type: 'object',
                                    properties: {
                                      endPort: {
                                        description: `endPort indicates that the range of ports from port to endPort if set, inclusive,
should be allowed by the policy. This field cannot be defined if the port field
is not defined or if the port field is defined as a named (string) port.
The endPort must be equal or greater than port.`,
                                        type: 'integer',
                                        format: 'int32',
                                      },
                                      port: {
                                        description: `port represents the port on the given protocol. This can either be a numerical or named
port on an instance. If this field is not provided, this matches all port names and
numbers.
If present, only traffic on the specified protocol AND port will be matched.`,
                                        anyOf: [
                                          {
                                            type: 'integer',
                                          },
                                          {
                                            type: 'string',
                                          },
                                        ],
                                        'x-kubernetes-int-or-string': true,
                                      },
                                      protocol: {
                                        description: `protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
If not specified, this field defaults to TCP.`,
                                        type: 'string',
                                      },
                                    },
                                  },
                                  'x-kubernetes-list-type': 'atomic',
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                runtime: {
                  description:
                    'The runtime type of the instance, such as a container sandbox or a VM.',
                  type: 'object',
                  required: ['resources'],
                  properties: {
                    resources: {
                      description: `Resources each instance must be allocated.

A sandbox runtime's containers may specify resource requests and
limits. When limits are defined on all containers, they MUST consume
the entire amount of resources defined here. Some resources, such
as a GPU, MUST have at least one container request them so that the
device can be presented appropriately.

A virtual machine runtime will be provided all requested resources.`,
                      type: 'object',
                      required: ['instanceType'],
                      properties: {
                        instanceType: {
                          description: `Full or partial URL of the instance type resource to use for this instance.

For example: \`datumcloud/d1-standard-2\`

May be combined with \`resources\` to allow for custom instance types for
instance families that support customization. Instance types which support
customization will appear in the form \`<project>/<instanceFamily>-custom\`.`,
                          type: 'string',
                        },
                        requests: {
                          description:
                            'Describes adjustments to the resources defined by the instance type.',
                          type: 'object',
                          additionalProperties: {
                            pattern:
                              '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                            anyOf: [
                              {
                                type: 'integer',
                              },
                              {
                                type: 'string',
                              },
                            ],
                            'x-kubernetes-int-or-string': true,
                          },
                        },
                      },
                    },
                    sandbox: {
                      description:
                        'A sandbox is a managed isolated environment capable of running containers.',
                      type: 'object',
                      required: ['containers'],
                      properties: {
                        containers: {
                          description: 'A list of containers to run within the sandbox.',
                          type: 'array',
                          minItems: 1,
                          items: {
                            type: 'object',
                            required: ['image', 'name'],
                            properties: {
                              env: {
                                description: `List of environment variables to set in the container.

so replicate the structure here too.`,
                                type: 'array',
                                items: {
                                  description:
                                    'EnvVar represents an environment variable present in a Container.',
                                  type: 'object',
                                  required: ['name'],
                                  properties: {
                                    name: {
                                      description:
                                        'Name of the environment variable. Must be a C_IDENTIFIER.',
                                      type: 'string',
                                    },
                                    value: {
                                      description: `Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".`,
                                      type: 'string',
                                    },
                                    valueFrom: {
                                      description:
                                        "Source for the environment variable's value. Cannot be used if value is not empty.",
                                      type: 'object',
                                      properties: {
                                        configMapKeyRef: {
                                          description: 'Selects a key of a ConfigMap.',
                                          type: 'object',
                                          required: ['key'],
                                          properties: {
                                            key: {
                                              description: 'The key to select.',
                                              type: 'string',
                                            },
                                            name: {
                                              description: `Name of the referent.
This field is effectively required, but due to backwards compatibility is
allowed to be empty. Instances of this type with an empty value here are
almost certainly wrong.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names`,
                                              type: 'string',
                                              default: '',
                                            },
                                            optional: {
                                              description:
                                                'Specify whether the ConfigMap or its key must be defined',
                                              type: 'boolean',
                                            },
                                          },
                                          'x-kubernetes-map-type': 'atomic',
                                        },
                                        fieldRef: {
                                          description: `Selects a field of the pod: supports metadata.name, metadata.namespace, \`metadata.labels['<KEY>']\`, \`metadata.annotations['<KEY>']\`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.`,
                                          type: 'object',
                                          required: ['fieldPath'],
                                          properties: {
                                            apiVersion: {
                                              description:
                                                'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                              type: 'string',
                                            },
                                            fieldPath: {
                                              description:
                                                'Path of the field to select in the specified API version.',
                                              type: 'string',
                                            },
                                          },
                                          'x-kubernetes-map-type': 'atomic',
                                        },
                                        resourceFieldRef: {
                                          description: `Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.`,
                                          type: 'object',
                                          required: ['resource'],
                                          properties: {
                                            containerName: {
                                              description:
                                                'Container name: required for volumes, optional for env vars',
                                              type: 'string',
                                            },
                                            divisor: {
                                              description:
                                                'Specifies the output format of the exposed resources, defaults to "1"',
                                              pattern:
                                                '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                                              anyOf: [
                                                {
                                                  type: 'integer',
                                                },
                                                {
                                                  type: 'string',
                                                },
                                              ],
                                              'x-kubernetes-int-or-string': true,
                                            },
                                            resource: {
                                              description: 'Required: resource to select',
                                              type: 'string',
                                            },
                                          },
                                          'x-kubernetes-map-type': 'atomic',
                                        },
                                        secretKeyRef: {
                                          description:
                                            "Selects a key of a secret in the pod's namespace",
                                          type: 'object',
                                          required: ['key'],
                                          properties: {
                                            key: {
                                              description:
                                                'The key of the secret to select from.  Must be a valid secret key.',
                                              type: 'string',
                                            },
                                            name: {
                                              description: `Name of the referent.
This field is effectively required, but due to backwards compatibility is
allowed to be empty. Instances of this type with an empty value here are
almost certainly wrong.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names`,
                                              type: 'string',
                                              default: '',
                                            },
                                            optional: {
                                              description:
                                                'Specify whether the Secret or its key must be defined',
                                              type: 'boolean',
                                            },
                                          },
                                          'x-kubernetes-map-type': 'atomic',
                                        },
                                      },
                                    },
                                  },
                                },
                                'x-kubernetes-list-map-keys': ['name'],
                                'x-kubernetes-list-type': 'map',
                              },
                              image: {
                                description: 'The fully qualified container image name.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the container.',
                                type: 'string',
                              },
                              ports: {
                                description: 'A list of named ports for the container.',
                                type: 'array',
                                items: {
                                  type: 'object',
                                  required: ['name', 'port'],
                                  properties: {
                                    name: {
                                      description:
                                        'The name of the port that can be referenced by other platform features.',
                                      type: 'string',
                                    },
                                    port: {
                                      description:
                                        'The port number, which can be a value between 1 and 65535.',
                                      type: 'integer',
                                      format: 'int32',
                                      maximum: 65535,
                                      minimum: 1,
                                    },
                                    protocol: {
                                      description: `protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
If not specified, this field defaults to TCP.`,
                                      type: 'string',
                                    },
                                  },
                                },
                                'x-kubernetes-list-map-keys': ['name'],
                                'x-kubernetes-list-type': 'map',
                              },
                              resources: {
                                description:
                                  'The resource requirements for the container, such as CPU, memory, and GPUs.',
                                type: 'object',
                                properties: {
                                  limits: {
                                    description:
                                      'Limits describes the maximum amount of compute resources allowed.',
                                    type: 'object',
                                    additionalProperties: {
                                      pattern:
                                        '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                                      anyOf: [
                                        {
                                          type: 'integer',
                                        },
                                        {
                                          type: 'string',
                                        },
                                      ],
                                      'x-kubernetes-int-or-string': true,
                                    },
                                  },
                                  requests: {
                                    description:
                                      'Requests describes the minimum amount of compute resources required.',
                                    type: 'object',
                                    additionalProperties: {
                                      pattern:
                                        '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                                      anyOf: [
                                        {
                                          type: 'integer',
                                        },
                                        {
                                          type: 'string',
                                        },
                                      ],
                                      'x-kubernetes-int-or-string': true,
                                    },
                                  },
                                },
                              },
                              volumeAttachments: {
                                description:
                                  'A list of volumes to attach to the container.',
                                type: 'array',
                                items: {
                                  type: 'object',
                                  required: ['name'],
                                  properties: {
                                    mountPath: {
                                      description: `The path to mount the volume inside the guest OS.

The referenced volume must be populated with a filesystem to use this
feature.

For VM based instances, this functionality requires certain capabilities
to be annotated on the boot image, such as cloud-init.`,
                                      type: 'string',
                                    },
                                    name: {
                                      description:
                                        'The name of the volume to attach as defined in InstanceSpec.Volumes.',
                                      type: 'string',
                                    },
                                  },
                                },
                              },
                            },
                          },
                          'x-kubernetes-list-map-keys': ['name'],
                          'x-kubernetes-list-type': 'map',
                        },
                        imagePullSecrets: {
                          description: `An optional list of secrets in the same namespace to use for pulling images
used by the instance.`,
                          type: 'array',
                          items: {
                            description: `References a secret in the same namespace as the entity defining the
reference.`,
                            type: 'object',
                            required: ['name'],
                            properties: {
                              name: {
                                description: 'The name of the secret',
                                type: 'string',
                              },
                            },
                          },
                        },
                      },
                    },
                    virtualMachine: {
                      description:
                        'A virtual machine is a classical VM environment, booting a full OS provided by the user via an image.',
                      type: 'object',
                      required: ['volumeAttachments'],
                      properties: {
                        ports: {
                          description: 'A list of named ports for the virtual machine.',
                          type: 'array',
                          items: {
                            type: 'object',
                            required: ['name', 'port'],
                            properties: {
                              name: {
                                description:
                                  'The name of the port that can be referenced by other platform features.',
                                type: 'string',
                              },
                              port: {
                                description:
                                  'The port number, which can be a value between 1 and 65535.',
                                type: 'integer',
                                format: 'int32',
                                maximum: 65535,
                                minimum: 1,
                              },
                              protocol: {
                                description: `protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
If not specified, this field defaults to TCP.`,
                                type: 'string',
                              },
                            },
                          },
                          'x-kubernetes-list-map-keys': ['name'],
                          'x-kubernetes-list-type': 'map',
                        },
                        volumeAttachments: {
                          description: 'A list of volumes to attach to the VM.',
                          type: 'array',
                          minItems: 1,
                          items: {
                            type: 'object',
                            required: ['name'],
                            properties: {
                              mountPath: {
                                description: `The path to mount the volume inside the guest OS.

The referenced volume must be populated with a filesystem to use this
feature.

For VM based instances, this functionality requires certain capabilities
to be annotated on the boot image, such as cloud-init.`,
                                type: 'string',
                              },
                              name: {
                                description:
                                  'The name of the volume to attach as defined in InstanceSpec.Volumes.',
                                type: 'string',
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                volumes: {
                  type: 'array',
                  items: {
                    type: 'object',
                    required: ['name'],
                    properties: {
                      configMap: {
                        description: 'A configMap that should populate this volume',
                        type: 'object',
                        properties: {
                          defaultMode: {
                            description: `defaultMode is optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.`,
                            type: 'integer',
                            format: 'int32',
                          },
                          items: {
                            description: `items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.`,
                            type: 'array',
                            items: {
                              description: 'Maps a string key to a path within a volume.',
                              type: 'object',
                              required: ['key', 'path'],
                              properties: {
                                key: {
                                  description: 'key is the key to project.',
                                  type: 'string',
                                },
                                mode: {
                                  description: `mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.`,
                                  type: 'integer',
                                  format: 'int32',
                                },
                                path: {
                                  description: `path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.`,
                                  type: 'string',
                                },
                              },
                            },
                            'x-kubernetes-list-type': 'atomic',
                          },
                          name: {
                            description: `Name of the referent.
This field is effectively required, but due to backwards compatibility is
allowed to be empty. Instances of this type with an empty value here are
almost certainly wrong.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names`,
                            type: 'string',
                            default: '',
                          },
                          optional: {
                            description:
                              'optional specify whether the ConfigMap or its keys must be defined',
                            type: 'boolean',
                          },
                        },
                        'x-kubernetes-map-type': 'atomic',
                      },
                      disk: {
                        description: 'A persistent disk backed volume.',
                        type: 'object',
                        required: ['template'],
                        properties: {
                          deviceName: {
                            description: `Specifies a unique device name that is reflected into the
\`/dev/disk/by-id/datumcloud-*\` tree of a Linux operating system
running within the instance. This name can be used to reference
the device for mounting, resizing, and so on, from within the
instance.

If not specified, the server chooses a default device name to
apply to this disk, in the form persistent-disk-x, where x is a
number assigned by Datum Cloud.`,
                            type: 'string',
                          },
                          template: {
                            description:
                              'Settings to create a new disk for an attached disk',
                            type: 'object',
                            required: ['spec'],
                            properties: {
                              metadata: {
                                description:
                                  'Metadata of the disks created from this template',
                                type: 'object',
                                properties: {
                                  annotations: {
                                    type: 'object',
                                    additionalProperties: {
                                      type: 'string',
                                    },
                                  },
                                  finalizers: {
                                    type: 'array',
                                    items: {
                                      type: 'string',
                                    },
                                  },
                                  labels: {
                                    type: 'object',
                                    additionalProperties: {
                                      type: 'string',
                                    },
                                  },
                                  name: {
                                    type: 'string',
                                  },
                                  namespace: {
                                    type: 'string',
                                  },
                                },
                              },
                              spec: {
                                description:
                                  'Describes the desired configuration of a disk',
                                type: 'object',
                                properties: {
                                  populator: {
                                    description:
                                      'Populator to use while initializing the disk.',
                                    type: 'object',
                                    properties: {
                                      filesystem: {
                                        description:
                                          'Populate the disk with a filesystem',
                                        type: 'object',
                                        required: ['type'],
                                        properties: {
                                          type: {
                                            description:
                                              'The type of filesystem to populate the disk with.',
                                            type: 'string',
                                            enum: ['ext4'],
                                          },
                                        },
                                      },
                                      image: {
                                        description: 'Populate the disk from an image',
                                        type: 'object',
                                        required: ['name'],
                                        properties: {
                                          name: {
                                            description: `The name of the image to populate the disk with.

	in \`populator.image.imageRef.name\` though.`,
                                            type: 'string',
                                          },
                                        },
                                      },
                                    },
                                  },
                                  resources: {
                                    description:
                                      'The resource requirements for the disk.',
                                    type: 'object',
                                    properties: {
                                      requests: {
                                        description:
                                          'Requests describes the minimum amount of storage resources required.',
                                        type: 'object',
                                        additionalProperties: {
                                          pattern:
                                            '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                                          anyOf: [
                                            {
                                              type: 'integer',
                                            },
                                            {
                                              type: 'string',
                                            },
                                          ],
                                          'x-kubernetes-int-or-string': true,
                                        },
                                      },
                                    },
                                  },
                                  type: {
                                    description:
                                      'The type the disk, such as `pd-standard`.',
                                    type: 'string',
                                    default: 'pd-standard',
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                      name: {
                        description: `Name is used to reference the volume in \`volumeAttachments\` for
containers and VMs, and will be used to derive the platform resource
name when required by prefixing this name with the instance name upon
creation.`,
                        type: 'string',
                      },
                      secret: {
                        description: 'A secret that should populate this volume',
                        type: 'object',
                        properties: {
                          defaultMode: {
                            description: `defaultMode is Optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values
for mode bits. Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.`,
                            type: 'integer',
                            format: 'int32',
                          },
                          items: {
                            description: `items If unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.`,
                            type: 'array',
                            items: {
                              description: 'Maps a string key to a path within a volume.',
                              type: 'object',
                              required: ['key', 'path'],
                              properties: {
                                key: {
                                  description: 'key is the key to project.',
                                  type: 'string',
                                },
                                mode: {
                                  description: `mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.`,
                                  type: 'integer',
                                  format: 'int32',
                                },
                                path: {
                                  description: `path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.`,
                                  type: 'string',
                                },
                              },
                            },
                            'x-kubernetes-list-type': 'atomic',
                          },
                          optional: {
                            description:
                              'optional field specify whether the Secret or its keys must be defined',
                            type: 'boolean',
                          },
                          secretName: {
                            description: `secretName is the name of the secret in the pod's namespace to use.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret`,
                            type: 'string',
                          },
                        },
                      },
                    },
                  },
                  'x-kubernetes-list-map-keys': ['name'],
                  'x-kubernetes-list-type': 'map',
                },
              },
            },
          },
        },
      },
    },
    status: {
      description: 'WorkloadStatus defines the observed state of Workload',
      type: 'object',
      required: ['currentReplicas', 'desiredReplicas', 'replicas'],
      properties: {
        conditions: {
          description: `Represents the observations of a workload's current state.
Known condition types are: "Available", "Progressing"`,
          type: 'array',
          items: {
            description:
              'Condition contains details for one aspect of the current state of this API Resource.',
            type: 'object',
            required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
            properties: {
              lastTransitionTime: {
                description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                type: 'string',
                format: 'date-time',
              },
              message: {
                description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                type: 'string',
                maxLength: 32768,
              },
              observedGeneration: {
                description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                type: 'integer',
                format: 'int64',
                minimum: 0,
              },
              reason: {
                description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                type: 'string',
                maxLength: 1024,
                minLength: 1,
                pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
              },
              status: {
                description: 'status of the condition, one of True, False, Unknown.',
                type: 'string',
                enum: ['True', 'False', 'Unknown'],
              },
              type: {
                description:
                  'type of condition in CamelCase or in foo.example.com/CamelCase.',
                type: 'string',
                maxLength: 316,
                pattern:
                  '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
              },
            },
          },
        },
        currentReplicas: {
          description: `The number of instances created by a placement and have the latest
workload generation settings applied.`,
          type: 'integer',
          format: 'int32',
        },
        desiredReplicas: {
          description: 'The desired number of instances to be managed by a placement.',
          type: 'integer',
          format: 'int32',
        },
        gateway: {
          description: 'The status of the workload gateway if configured.',
          type: 'object',
          properties: {
            addresses: {
              description: `Addresses lists the network addresses that have been bound to the
Gateway.

This list may differ from the addresses provided in the spec under some
conditions:

  * no addresses are specified, all addresses are dynamically assigned
  * a combination of specified and dynamic addresses are assigned
  * a specified address was unusable (e.g. already in use)

<gateway:validateIPAddress>`,
              type: 'array',
              maxItems: 16,
              items: {
                description:
                  'GatewayStatusAddress describes a network address that is bound to a Gateway.',
                type: 'object',
                required: ['value'],
                properties: {
                  type: {
                    description: 'Type of the address.',
                    type: 'string',
                    default: 'IPAddress',
                    maxLength: 253,
                    minLength: 1,
                    pattern:
                      "^Hostname|IPAddress|NamedAddress|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/[A-Za-z0-9\\/\\-._~%!$&'()*+,;=:]+$",
                  },
                  value: {
                    description: `Value of the address. The validity of the values will depend
on the type and support by the controller.

Examples: \`1.2.3.4\`, \`128::1\`, \`my-ip-address\`.`,
                    type: 'string',
                    maxLength: 253,
                    minLength: 1,
                  },
                },
                'x-kubernetes-validations': [
                  {
                    rule: `self.type == 'Hostname' ? self.value.matches(r"""^(\*\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"""): true`,
                    message:
                      'Hostname value must only contain valid characters (matching ^(\\*\\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$)',
                  },
                ],
              },
            },
            conditions: {
              description: `Conditions describe the current conditions of the Gateway.

Implementations should prefer to express Gateway conditions
using the \`GatewayConditionType\` and \`GatewayConditionReason\`
constants so that operators and tools can converge on a common
vocabulary to describe Gateway state.

Known condition types are:

* "Accepted"
* "Programmed"
* "Ready"`,
              type: 'array',
              default: [
                {
                  lastTransitionTime: '1970-01-01T00:00:00Z',
                  message: 'Waiting for controller',
                  reason: 'Pending',
                  status: 'Unknown',
                  type: 'Accepted',
                },
                {
                  lastTransitionTime: '1970-01-01T00:00:00Z',
                  message: 'Waiting for controller',
                  reason: 'Pending',
                  status: 'Unknown',
                  type: 'Programmed',
                },
              ],
              maxItems: 8,
              items: {
                description:
                  'Condition contains details for one aspect of the current state of this API Resource.',
                type: 'object',
                required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
                properties: {
                  lastTransitionTime: {
                    description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                    type: 'string',
                    format: 'date-time',
                  },
                  message: {
                    description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                    type: 'string',
                    maxLength: 32768,
                  },
                  observedGeneration: {
                    description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                    type: 'integer',
                    format: 'int64',
                    minimum: 0,
                  },
                  reason: {
                    description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                    type: 'string',
                    maxLength: 1024,
                    minLength: 1,
                    pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
                  },
                  status: {
                    description: 'status of the condition, one of True, False, Unknown.',
                    type: 'string',
                    enum: ['True', 'False', 'Unknown'],
                  },
                  type: {
                    description:
                      'type of condition in CamelCase or in foo.example.com/CamelCase.',
                    type: 'string',
                    maxLength: 316,
                    pattern:
                      '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
                  },
                },
              },
              'x-kubernetes-list-map-keys': ['type'],
              'x-kubernetes-list-type': 'map',
            },
            listeners: {
              description:
                'Listeners provide status for each unique listener port defined in the Spec.',
              type: 'array',
              maxItems: 64,
              items: {
                description: 'ListenerStatus is the status associated with a Listener.',
                type: 'object',
                required: ['attachedRoutes', 'conditions', 'name', 'supportedKinds'],
                properties: {
                  attachedRoutes: {
                    description: `AttachedRoutes represents the total number of Routes that have been
successfully attached to this Listener.

Successful attachment of a Route to a Listener is based solely on the
combination of the AllowedRoutes field on the corresponding Listener
and the Route's ParentRefs field. A Route is successfully attached to
a Listener when it is selected by the Listener's AllowedRoutes field
AND the Route has a valid ParentRef selecting the whole Gateway
resource or a specific Listener as a parent resource (more detail on
attachment semantics can be found in the documentation on the various
Route kinds ParentRefs fields). Listener or Route status does not impact
successful attachment, i.e. the AttachedRoutes field count MUST be set
for Listeners with condition Accepted: false and MUST count successfully
attached Routes that may themselves have Accepted: false conditions.

Uses for this field include troubleshooting Route attachment and
measuring blast radius/impact of changes to a Listener.`,
                    type: 'integer',
                    format: 'int32',
                  },
                  conditions: {
                    description:
                      'Conditions describe the current condition of this listener.',
                    type: 'array',
                    maxItems: 8,
                    items: {
                      description:
                        'Condition contains details for one aspect of the current state of this API Resource.',
                      type: 'object',
                      required: [
                        'lastTransitionTime',
                        'message',
                        'reason',
                        'status',
                        'type',
                      ],
                      properties: {
                        lastTransitionTime: {
                          description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                          type: 'string',
                          format: 'date-time',
                        },
                        message: {
                          description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                          type: 'string',
                          maxLength: 32768,
                        },
                        observedGeneration: {
                          description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                          type: 'integer',
                          format: 'int64',
                          minimum: 0,
                        },
                        reason: {
                          description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                          type: 'string',
                          maxLength: 1024,
                          minLength: 1,
                          pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
                        },
                        status: {
                          description:
                            'status of the condition, one of True, False, Unknown.',
                          type: 'string',
                          enum: ['True', 'False', 'Unknown'],
                        },
                        type: {
                          description:
                            'type of condition in CamelCase or in foo.example.com/CamelCase.',
                          type: 'string',
                          maxLength: 316,
                          pattern:
                            '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
                        },
                      },
                    },
                    'x-kubernetes-list-map-keys': ['type'],
                    'x-kubernetes-list-type': 'map',
                  },
                  name: {
                    description:
                      'Name is the name of the Listener that this status corresponds to.',
                    type: 'string',
                    maxLength: 253,
                    minLength: 1,
                    pattern:
                      '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                  },
                  supportedKinds: {
                    description: `SupportedKinds is the list indicating the Kinds supported by this
listener. This MUST represent the kinds an implementation supports for
that Listener configuration.

If kinds are specified in Spec that are not supported, they MUST NOT
appear in this list and an implementation MUST set the "ResolvedRefs"
condition to "False" with the "InvalidRouteKinds" reason. If both valid
and invalid Route kinds are specified, the implementation MUST
reference the valid Route kinds that have been specified.`,
                    type: 'array',
                    maxItems: 8,
                    items: {
                      description:
                        'RouteGroupKind indicates the group and kind of a Route resource.',
                      type: 'object',
                      required: ['kind'],
                      properties: {
                        group: {
                          description: 'Group is the group of the Route.',
                          type: 'string',
                          default: 'gateway.networking.k8s.io',
                          maxLength: 253,
                          pattern:
                            '^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
                        },
                        kind: {
                          description: 'Kind is the kind of the Route.',
                          type: 'string',
                          maxLength: 63,
                          minLength: 1,
                          pattern: '^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$',
                        },
                      },
                    },
                  },
                },
              },
              'x-kubernetes-list-map-keys': ['name'],
              'x-kubernetes-list-type': 'map',
            },
          },
        },
        placements: {
          description: 'The current status of placemetns in a workload.',
          type: 'array',
          items: {
            type: 'object',
            required: ['currentReplicas', 'desiredReplicas', 'name', 'replicas'],
            properties: {
              conditions: {
                description: `Represents the observations of a placement's current state.
Known condition types are: "Available", "Progressing"`,
                type: 'array',
                items: {
                  description:
                    'Condition contains details for one aspect of the current state of this API Resource.',
                  type: 'object',
                  required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
                  properties: {
                    lastTransitionTime: {
                      description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                      type: 'string',
                      format: 'date-time',
                    },
                    message: {
                      description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                      type: 'string',
                      maxLength: 32768,
                    },
                    observedGeneration: {
                      description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                      type: 'integer',
                      format: 'int64',
                      minimum: 0,
                    },
                    reason: {
                      description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                      type: 'string',
                      maxLength: 1024,
                      minLength: 1,
                      pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
                    },
                    status: {
                      description:
                        'status of the condition, one of True, False, Unknown.',
                      type: 'string',
                      enum: ['True', 'False', 'Unknown'],
                    },
                    type: {
                      description:
                        'type of condition in CamelCase or in foo.example.com/CamelCase.',
                      type: 'string',
                      maxLength: 316,
                      pattern:
                        '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
                    },
                  },
                },
              },
              currentReplicas: {
                description: `The number of instances created by a placement and have the latest
workload generation settings applied.`,
                type: 'integer',
                format: 'int32',
              },
              desiredReplicas: {
                description:
                  'The desired number of instances to be managed by a placement.',
                type: 'integer',
                format: 'int32',
              },
              name: {
                description: 'The name of the placement',
                type: 'string',
              },
              replicas: {
                description: 'The number of instances created by a placement',
                type: 'integer',
                format: 'int32',
              },
            },
          },
        },
        replicas: {
          description: 'The number of instances created by a placement',
          type: 'integer',
          format: 'int32',
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'compute.datumapis.com',
      kind: 'Workload',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const

export const com_datumapis_compute_v1alpha_WorkloadDeploymentSchema = {
  description: 'WorkloadDeployment is the Schema for the workloaddeployments API',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description:
        'WorkloadDeploymentSpec defines the desired state of WorkloadDeployment',
      type: 'object',
      required: ['cityCode', 'placementName', 'scaleSettings', 'template', 'workloadRef'],
      properties: {
        cityCode: {
          description:
            'deployments can be scheduled in ways other than just a city code.',
          type: 'string',
        },
        placementName: {
          description: 'The placement in the workload which is driving a deployment',
          type: 'string',
        },
        scaleSettings: {
          description: 'Scale settings such as minimum and maximum replica counts.',
          type: 'object',
          required: ['minReplicas'],
          properties: {
            maxReplicas: {
              description: 'The maximum number of replicas.',
              type: 'integer',
              format: 'int32',
            },
            metrics: {
              description:
                'A list of metrics that determine scaling behavior, such as external metrics.',
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  resource: {
                    description: 'Resource metrics known to Datum.',
                    type: 'object',
                    required: ['name', 'target'],
                    properties: {
                      name: {
                        description: 'The name of the resource in question.',
                        type: 'string',
                      },
                      target: {
                        description: 'The target value for the given metric',
                        type: 'object',
                        properties: {
                          averageUtilization: {
                            description: `The target value of the average of the
resource metric across all relevant instances, represented as a percentage of
the requested value of the resource for the instances.`,
                            type: 'integer',
                            format: 'int32',
                          },
                          averageValue: {
                            description: `The target value of the average of the metric across all relevant instances
(as a quantity)`,
                            pattern:
                              '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                            anyOf: [
                              {
                                type: 'integer',
                              },
                              {
                                type: 'string',
                              },
                            ],
                            'x-kubernetes-int-or-string': true,
                          },
                          value: {
                            description:
                              'The target value of the metric (as a quantity).',
                            pattern:
                              '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                            anyOf: [
                              {
                                type: 'integer',
                              },
                              {
                                type: 'string',
                              },
                            ],
                            'x-kubernetes-int-or-string': true,
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
            minReplicas: {
              description: 'The minimum number of replicas.',
              type: 'integer',
              format: 'int32',
            },
          },
        },
        template: {
          description: 'Defines settings for each instance.',
          type: 'object',
          required: ['spec'],
          properties: {
            metadata: {
              description: 'Metadata of the instances created from this template',
              type: 'object',
              properties: {
                annotations: {
                  type: 'object',
                  additionalProperties: {
                    type: 'string',
                  },
                },
                finalizers: {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
                labels: {
                  type: 'object',
                  additionalProperties: {
                    type: 'string',
                  },
                },
                name: {
                  type: 'string',
                },
                namespace: {
                  type: 'string',
                },
              },
            },
            spec: {
              description: 'Describes the desired configuration of an instance',
              type: 'object',
              required: ['networkInterfaces', 'runtime'],
              properties: {
                networkInterfaces: {
                  description: 'Network interface configuration.',
                  type: 'array',
                  minItems: 1,
                  items: {
                    type: 'object',
                    required: ['network'],
                    properties: {
                      network: {
                        description: 'The network to attach the network interface to.',
                        type: 'object',
                        required: ['name'],
                        properties: {
                          name: {
                            description: 'The network name',
                            type: 'string',
                          },
                          namespace: {
                            description: `The network namespace.

Defaults to the namespace for the type the reference is embedded in.`,
                            type: 'string',
                          },
                        },
                      },
                      networkPolicy: {
                        description: `Interface specific network policy.

If provided, this will result in a platform managed network policy being
created that targets the specfiic instance interface. This network policy
will be of the lowest priority, and can effectively be prohibited from
influencing network connectivity.`,
                        type: 'object',
                        properties: {
                          ingress: {
                            type: 'array',
                            items: {
                              description:
                                'See k8s network policy types for inspiration here',
                              type: 'object',
                              properties: {
                                from: {
                                  description: `from is a list of sources which should be able to access the instances selected for this rule.
Items in this list are combined using a logical OR operation. If this field is
empty or missing, this rule matches all sources (traffic not restricted by
source). If this field is present and contains at least one item, this rule
allows traffic only if the traffic matches at least one item in the from list.`,
                                  type: 'array',
                                  items: {
                                    description: `NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of
fields are allowed`,
                                    type: 'object',
                                    properties: {
                                      ipBlock: {
                                        description: `ipBlock defines policy on a particular IPBlock. If this field is set then
neither of the other fields can be.`,
                                        type: 'object',
                                        required: ['cidr'],
                                        properties: {
                                          cidr: {
                                            description: `cidr is a string representing the IPBlock
Valid examples are "192.168.1.0/24" or "2001:db8::/64"`,
                                            type: 'string',
                                          },
                                          except: {
                                            description: `except is a slice of CIDRs that should not be included within an IPBlock
Valid examples are "192.168.1.0/24" or "2001:db8::/64"
Except values will be rejected if they are outside the cidr range`,
                                            type: 'array',
                                            items: {
                                              type: 'string',
                                            },
                                            'x-kubernetes-list-type': 'atomic',
                                          },
                                        },
                                      },
                                    },
                                  },
                                  'x-kubernetes-list-type': 'atomic',
                                },
                                ports: {
                                  description: `ports is a list of ports which should be made accessible on the instances selected for
this rule. Each item in this list is combined using a logical OR. If this field is
empty or missing, this rule matches all ports (traffic not restricted by port).
If this field is present and contains at least one item, then this rule allows
traffic only if the traffic matches at least one port in the list.`,
                                  type: 'array',
                                  items: {
                                    description:
                                      'NetworkPolicyPort describes a port to allow traffic on',
                                    type: 'object',
                                    properties: {
                                      endPort: {
                                        description: `endPort indicates that the range of ports from port to endPort if set, inclusive,
should be allowed by the policy. This field cannot be defined if the port field
is not defined or if the port field is defined as a named (string) port.
The endPort must be equal or greater than port.`,
                                        type: 'integer',
                                        format: 'int32',
                                      },
                                      port: {
                                        description: `port represents the port on the given protocol. This can either be a numerical or named
port on an instance. If this field is not provided, this matches all port names and
numbers.
If present, only traffic on the specified protocol AND port will be matched.`,
                                        anyOf: [
                                          {
                                            type: 'integer',
                                          },
                                          {
                                            type: 'string',
                                          },
                                        ],
                                        'x-kubernetes-int-or-string': true,
                                      },
                                      protocol: {
                                        description: `protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
If not specified, this field defaults to TCP.`,
                                        type: 'string',
                                      },
                                    },
                                  },
                                  'x-kubernetes-list-type': 'atomic',
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                runtime: {
                  description:
                    'The runtime type of the instance, such as a container sandbox or a VM.',
                  type: 'object',
                  required: ['resources'],
                  properties: {
                    resources: {
                      description: `Resources each instance must be allocated.

A sandbox runtime's containers may specify resource requests and
limits. When limits are defined on all containers, they MUST consume
the entire amount of resources defined here. Some resources, such
as a GPU, MUST have at least one container request them so that the
device can be presented appropriately.

A virtual machine runtime will be provided all requested resources.`,
                      type: 'object',
                      required: ['instanceType'],
                      properties: {
                        instanceType: {
                          description: `Full or partial URL of the instance type resource to use for this instance.

For example: \`datumcloud/d1-standard-2\`

May be combined with \`resources\` to allow for custom instance types for
instance families that support customization. Instance types which support
customization will appear in the form \`<project>/<instanceFamily>-custom\`.`,
                          type: 'string',
                        },
                        requests: {
                          description:
                            'Describes adjustments to the resources defined by the instance type.',
                          type: 'object',
                          additionalProperties: {
                            pattern:
                              '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                            anyOf: [
                              {
                                type: 'integer',
                              },
                              {
                                type: 'string',
                              },
                            ],
                            'x-kubernetes-int-or-string': true,
                          },
                        },
                      },
                    },
                    sandbox: {
                      description:
                        'A sandbox is a managed isolated environment capable of running containers.',
                      type: 'object',
                      required: ['containers'],
                      properties: {
                        containers: {
                          description: 'A list of containers to run within the sandbox.',
                          type: 'array',
                          minItems: 1,
                          items: {
                            type: 'object',
                            required: ['image', 'name'],
                            properties: {
                              env: {
                                description: `List of environment variables to set in the container.

so replicate the structure here too.`,
                                type: 'array',
                                items: {
                                  description:
                                    'EnvVar represents an environment variable present in a Container.',
                                  type: 'object',
                                  required: ['name'],
                                  properties: {
                                    name: {
                                      description:
                                        'Name of the environment variable. Must be a C_IDENTIFIER.',
                                      type: 'string',
                                    },
                                    value: {
                                      description: `Variable references $(VAR_NAME) are expanded
using the previously defined environment variables in the container and
any service environment variables. If a variable cannot be resolved,
the reference in the input string will be unchanged. Double $$ are reduced
to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
"$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
Escaped references will never be expanded, regardless of whether the variable
exists or not.
Defaults to "".`,
                                      type: 'string',
                                    },
                                    valueFrom: {
                                      description:
                                        "Source for the environment variable's value. Cannot be used if value is not empty.",
                                      type: 'object',
                                      properties: {
                                        configMapKeyRef: {
                                          description: 'Selects a key of a ConfigMap.',
                                          type: 'object',
                                          required: ['key'],
                                          properties: {
                                            key: {
                                              description: 'The key to select.',
                                              type: 'string',
                                            },
                                            name: {
                                              description: `Name of the referent.
This field is effectively required, but due to backwards compatibility is
allowed to be empty. Instances of this type with an empty value here are
almost certainly wrong.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names`,
                                              type: 'string',
                                              default: '',
                                            },
                                            optional: {
                                              description:
                                                'Specify whether the ConfigMap or its key must be defined',
                                              type: 'boolean',
                                            },
                                          },
                                          'x-kubernetes-map-type': 'atomic',
                                        },
                                        fieldRef: {
                                          description: `Selects a field of the pod: supports metadata.name, metadata.namespace, \`metadata.labels['<KEY>']\`, \`metadata.annotations['<KEY>']\`,
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.`,
                                          type: 'object',
                                          required: ['fieldPath'],
                                          properties: {
                                            apiVersion: {
                                              description:
                                                'Version of the schema the FieldPath is written in terms of, defaults to "v1".',
                                              type: 'string',
                                            },
                                            fieldPath: {
                                              description:
                                                'Path of the field to select in the specified API version.',
                                              type: 'string',
                                            },
                                          },
                                          'x-kubernetes-map-type': 'atomic',
                                        },
                                        resourceFieldRef: {
                                          description: `Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.`,
                                          type: 'object',
                                          required: ['resource'],
                                          properties: {
                                            containerName: {
                                              description:
                                                'Container name: required for volumes, optional for env vars',
                                              type: 'string',
                                            },
                                            divisor: {
                                              description:
                                                'Specifies the output format of the exposed resources, defaults to "1"',
                                              pattern:
                                                '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                                              anyOf: [
                                                {
                                                  type: 'integer',
                                                },
                                                {
                                                  type: 'string',
                                                },
                                              ],
                                              'x-kubernetes-int-or-string': true,
                                            },
                                            resource: {
                                              description: 'Required: resource to select',
                                              type: 'string',
                                            },
                                          },
                                          'x-kubernetes-map-type': 'atomic',
                                        },
                                        secretKeyRef: {
                                          description:
                                            "Selects a key of a secret in the pod's namespace",
                                          type: 'object',
                                          required: ['key'],
                                          properties: {
                                            key: {
                                              description:
                                                'The key of the secret to select from.  Must be a valid secret key.',
                                              type: 'string',
                                            },
                                            name: {
                                              description: `Name of the referent.
This field is effectively required, but due to backwards compatibility is
allowed to be empty. Instances of this type with an empty value here are
almost certainly wrong.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names`,
                                              type: 'string',
                                              default: '',
                                            },
                                            optional: {
                                              description:
                                                'Specify whether the Secret or its key must be defined',
                                              type: 'boolean',
                                            },
                                          },
                                          'x-kubernetes-map-type': 'atomic',
                                        },
                                      },
                                    },
                                  },
                                },
                                'x-kubernetes-list-map-keys': ['name'],
                                'x-kubernetes-list-type': 'map',
                              },
                              image: {
                                description: 'The fully qualified container image name.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the container.',
                                type: 'string',
                              },
                              ports: {
                                description: 'A list of named ports for the container.',
                                type: 'array',
                                items: {
                                  type: 'object',
                                  required: ['name', 'port'],
                                  properties: {
                                    name: {
                                      description:
                                        'The name of the port that can be referenced by other platform features.',
                                      type: 'string',
                                    },
                                    port: {
                                      description:
                                        'The port number, which can be a value between 1 and 65535.',
                                      type: 'integer',
                                      format: 'int32',
                                      maximum: 65535,
                                      minimum: 1,
                                    },
                                    protocol: {
                                      description: `protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
If not specified, this field defaults to TCP.`,
                                      type: 'string',
                                    },
                                  },
                                },
                                'x-kubernetes-list-map-keys': ['name'],
                                'x-kubernetes-list-type': 'map',
                              },
                              resources: {
                                description:
                                  'The resource requirements for the container, such as CPU, memory, and GPUs.',
                                type: 'object',
                                properties: {
                                  limits: {
                                    description:
                                      'Limits describes the maximum amount of compute resources allowed.',
                                    type: 'object',
                                    additionalProperties: {
                                      pattern:
                                        '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                                      anyOf: [
                                        {
                                          type: 'integer',
                                        },
                                        {
                                          type: 'string',
                                        },
                                      ],
                                      'x-kubernetes-int-or-string': true,
                                    },
                                  },
                                  requests: {
                                    description:
                                      'Requests describes the minimum amount of compute resources required.',
                                    type: 'object',
                                    additionalProperties: {
                                      pattern:
                                        '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                                      anyOf: [
                                        {
                                          type: 'integer',
                                        },
                                        {
                                          type: 'string',
                                        },
                                      ],
                                      'x-kubernetes-int-or-string': true,
                                    },
                                  },
                                },
                              },
                              volumeAttachments: {
                                description:
                                  'A list of volumes to attach to the container.',
                                type: 'array',
                                items: {
                                  type: 'object',
                                  required: ['name'],
                                  properties: {
                                    mountPath: {
                                      description: `The path to mount the volume inside the guest OS.

The referenced volume must be populated with a filesystem to use this
feature.

For VM based instances, this functionality requires certain capabilities
to be annotated on the boot image, such as cloud-init.`,
                                      type: 'string',
                                    },
                                    name: {
                                      description:
                                        'The name of the volume to attach as defined in InstanceSpec.Volumes.',
                                      type: 'string',
                                    },
                                  },
                                },
                              },
                            },
                          },
                          'x-kubernetes-list-map-keys': ['name'],
                          'x-kubernetes-list-type': 'map',
                        },
                        imagePullSecrets: {
                          description: `An optional list of secrets in the same namespace to use for pulling images
used by the instance.`,
                          type: 'array',
                          items: {
                            description: `References a secret in the same namespace as the entity defining the
reference.`,
                            type: 'object',
                            required: ['name'],
                            properties: {
                              name: {
                                description: 'The name of the secret',
                                type: 'string',
                              },
                            },
                          },
                        },
                      },
                    },
                    virtualMachine: {
                      description:
                        'A virtual machine is a classical VM environment, booting a full OS provided by the user via an image.',
                      type: 'object',
                      required: ['volumeAttachments'],
                      properties: {
                        ports: {
                          description: 'A list of named ports for the virtual machine.',
                          type: 'array',
                          items: {
                            type: 'object',
                            required: ['name', 'port'],
                            properties: {
                              name: {
                                description:
                                  'The name of the port that can be referenced by other platform features.',
                                type: 'string',
                              },
                              port: {
                                description:
                                  'The port number, which can be a value between 1 and 65535.',
                                type: 'integer',
                                format: 'int32',
                                maximum: 65535,
                                minimum: 1,
                              },
                              protocol: {
                                description: `protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
If not specified, this field defaults to TCP.`,
                                type: 'string',
                              },
                            },
                          },
                          'x-kubernetes-list-map-keys': ['name'],
                          'x-kubernetes-list-type': 'map',
                        },
                        volumeAttachments: {
                          description: 'A list of volumes to attach to the VM.',
                          type: 'array',
                          minItems: 1,
                          items: {
                            type: 'object',
                            required: ['name'],
                            properties: {
                              mountPath: {
                                description: `The path to mount the volume inside the guest OS.

The referenced volume must be populated with a filesystem to use this
feature.

For VM based instances, this functionality requires certain capabilities
to be annotated on the boot image, such as cloud-init.`,
                                type: 'string',
                              },
                              name: {
                                description:
                                  'The name of the volume to attach as defined in InstanceSpec.Volumes.',
                                type: 'string',
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                volumes: {
                  type: 'array',
                  items: {
                    type: 'object',
                    required: ['name'],
                    properties: {
                      configMap: {
                        description: 'A configMap that should populate this volume',
                        type: 'object',
                        properties: {
                          defaultMode: {
                            description: `defaultMode is optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.`,
                            type: 'integer',
                            format: 'int32',
                          },
                          items: {
                            description: `items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.`,
                            type: 'array',
                            items: {
                              description: 'Maps a string key to a path within a volume.',
                              type: 'object',
                              required: ['key', 'path'],
                              properties: {
                                key: {
                                  description: 'key is the key to project.',
                                  type: 'string',
                                },
                                mode: {
                                  description: `mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.`,
                                  type: 'integer',
                                  format: 'int32',
                                },
                                path: {
                                  description: `path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.`,
                                  type: 'string',
                                },
                              },
                            },
                            'x-kubernetes-list-type': 'atomic',
                          },
                          name: {
                            description: `Name of the referent.
This field is effectively required, but due to backwards compatibility is
allowed to be empty. Instances of this type with an empty value here are
almost certainly wrong.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names`,
                            type: 'string',
                            default: '',
                          },
                          optional: {
                            description:
                              'optional specify whether the ConfigMap or its keys must be defined',
                            type: 'boolean',
                          },
                        },
                        'x-kubernetes-map-type': 'atomic',
                      },
                      disk: {
                        description: 'A persistent disk backed volume.',
                        type: 'object',
                        required: ['template'],
                        properties: {
                          deviceName: {
                            description: `Specifies a unique device name that is reflected into the
\`/dev/disk/by-id/datumcloud-*\` tree of a Linux operating system
running within the instance. This name can be used to reference
the device for mounting, resizing, and so on, from within the
instance.

If not specified, the server chooses a default device name to
apply to this disk, in the form persistent-disk-x, where x is a
number assigned by Datum Cloud.`,
                            type: 'string',
                          },
                          template: {
                            description:
                              'Settings to create a new disk for an attached disk',
                            type: 'object',
                            required: ['spec'],
                            properties: {
                              metadata: {
                                description:
                                  'Metadata of the disks created from this template',
                                type: 'object',
                                properties: {
                                  annotations: {
                                    type: 'object',
                                    additionalProperties: {
                                      type: 'string',
                                    },
                                  },
                                  finalizers: {
                                    type: 'array',
                                    items: {
                                      type: 'string',
                                    },
                                  },
                                  labels: {
                                    type: 'object',
                                    additionalProperties: {
                                      type: 'string',
                                    },
                                  },
                                  name: {
                                    type: 'string',
                                  },
                                  namespace: {
                                    type: 'string',
                                  },
                                },
                              },
                              spec: {
                                description:
                                  'Describes the desired configuration of a disk',
                                type: 'object',
                                properties: {
                                  populator: {
                                    description:
                                      'Populator to use while initializing the disk.',
                                    type: 'object',
                                    properties: {
                                      filesystem: {
                                        description:
                                          'Populate the disk with a filesystem',
                                        type: 'object',
                                        required: ['type'],
                                        properties: {
                                          type: {
                                            description:
                                              'The type of filesystem to populate the disk with.',
                                            type: 'string',
                                            enum: ['ext4'],
                                          },
                                        },
                                      },
                                      image: {
                                        description: 'Populate the disk from an image',
                                        type: 'object',
                                        required: ['name'],
                                        properties: {
                                          name: {
                                            description: `The name of the image to populate the disk with.

	in \`populator.image.imageRef.name\` though.`,
                                            type: 'string',
                                          },
                                        },
                                      },
                                    },
                                  },
                                  resources: {
                                    description:
                                      'The resource requirements for the disk.',
                                    type: 'object',
                                    properties: {
                                      requests: {
                                        description:
                                          'Requests describes the minimum amount of storage resources required.',
                                        type: 'object',
                                        additionalProperties: {
                                          pattern:
                                            '^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$',
                                          anyOf: [
                                            {
                                              type: 'integer',
                                            },
                                            {
                                              type: 'string',
                                            },
                                          ],
                                          'x-kubernetes-int-or-string': true,
                                        },
                                      },
                                    },
                                  },
                                  type: {
                                    description:
                                      'The type the disk, such as `pd-standard`.',
                                    type: 'string',
                                    default: 'pd-standard',
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                      name: {
                        description: `Name is used to reference the volume in \`volumeAttachments\` for
containers and VMs, and will be used to derive the platform resource
name when required by prefixing this name with the instance name upon
creation.`,
                        type: 'string',
                      },
                      secret: {
                        description: 'A secret that should populate this volume',
                        type: 'object',
                        properties: {
                          defaultMode: {
                            description: `defaultMode is Optional: mode bits used to set permissions on created files by default.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values
for mode bits. Defaults to 0644.
Directories within the path are not affected by this setting.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.`,
                            type: 'integer',
                            format: 'int32',
                          },
                          items: {
                            description: `items If unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.`,
                            type: 'array',
                            items: {
                              description: 'Maps a string key to a path within a volume.',
                              type: 'object',
                              required: ['key', 'path'],
                              properties: {
                                key: {
                                  description: 'key is the key to project.',
                                  type: 'string',
                                },
                                mode: {
                                  description: `mode is Optional: mode bits used to set permissions on this file.
Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
If not specified, the volume defaultMode will be used.
This might be in conflict with other options that affect the file
mode, like fsGroup, and the result can be other mode bits set.`,
                                  type: 'integer',
                                  format: 'int32',
                                },
                                path: {
                                  description: `path is the relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.`,
                                  type: 'string',
                                },
                              },
                            },
                            'x-kubernetes-list-type': 'atomic',
                          },
                          optional: {
                            description:
                              'optional field specify whether the Secret or its keys must be defined',
                            type: 'boolean',
                          },
                          secretName: {
                            description: `secretName is the name of the secret in the pod's namespace to use.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret`,
                            type: 'string',
                          },
                        },
                      },
                    },
                  },
                  'x-kubernetes-list-map-keys': ['name'],
                  'x-kubernetes-list-type': 'map',
                },
              },
            },
          },
        },
        workloadRef: {
          description: 'The workload that a deployment belongs to',
          type: 'object',
          required: ['name', 'uid'],
          properties: {
            name: {
              description: 'The name of the workload',
              type: 'string',
            },
            uid: {
              description: 'UID of the Workload',
              type: 'string',
            },
          },
        },
      },
    },
    status: {
      description:
        'WorkloadDeploymentStatus defines the observed state of WorkloadDeployment',
      type: 'object',
      required: ['currentReplicas', 'desiredReplicas', 'replicas'],
      properties: {
        conditions: {
          description: `Represents the observations of a deployment's current state.
Known condition types are: "Available", "Progressing"`,
          type: 'array',
          items: {
            description:
              'Condition contains details for one aspect of the current state of this API Resource.',
            type: 'object',
            required: ['lastTransitionTime', 'message', 'reason', 'status', 'type'],
            properties: {
              lastTransitionTime: {
                description: `lastTransitionTime is the last time the condition transitioned from one status to another.
This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.`,
                type: 'string',
                format: 'date-time',
              },
              message: {
                description: `message is a human readable message indicating details about the transition.
This may be an empty string.`,
                type: 'string',
                maxLength: 32768,
              },
              observedGeneration: {
                description: `observedGeneration represents the .metadata.generation that the condition was set based upon.
For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
with respect to the current state of the instance.`,
                type: 'integer',
                format: 'int64',
                minimum: 0,
              },
              reason: {
                description: `reason contains a programmatic identifier indicating the reason for the condition's last transition.
Producers of specific condition types may define expected values and meanings for this field,
and whether the values are considered a guaranteed API.
The value should be a CamelCase string.
This field may not be empty.`,
                type: 'string',
                maxLength: 1024,
                minLength: 1,
                pattern: '^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$',
              },
              status: {
                description: 'status of the condition, one of True, False, Unknown.',
                type: 'string',
                enum: ['True', 'False', 'Unknown'],
              },
              type: {
                description:
                  'type of condition in CamelCase or in foo.example.com/CamelCase.',
                type: 'string',
                maxLength: 316,
                pattern:
                  '^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
              },
            },
          },
        },
        currentReplicas: {
          description: `The number of instances created by a deployment and have the latest
deployment generation settings applied.`,
          type: 'integer',
          format: 'int32',
        },
        desiredReplicas: {
          description: 'The desired number of instances to be managed by a deployment.',
          type: 'integer',
          format: 'int32',
        },
        location: {
          description: 'The location which the deployment has been scheduled to',
          type: 'object',
          required: ['name', 'namespace'],
          properties: {
            name: {
              description: 'Name of a datum location',
              type: 'string',
            },
            namespace: {
              description: 'Namespace for the datum location',
              type: 'string',
            },
          },
        },
        replicas: {
          description: 'The number of instances created by a deployment',
          type: 'integer',
          format: 'int32',
        },
      },
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'compute.datumapis.com',
      kind: 'WorkloadDeployment',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const

export const com_datumapis_compute_v1alpha_WorkloadDeploymentListSchema = {
  description: 'WorkloadDeploymentList is a list of WorkloadDeployment',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of workloaddeployments. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/com.datumapis.compute.v1alpha.WorkloadDeployment',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'compute.datumapis.com',
      kind: 'WorkloadDeploymentList',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const

export const com_datumapis_compute_v1alpha_WorkloadListSchema = {
  description: 'WorkloadList is a list of Workload',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of workloads. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
      type: 'array',
      items: {
        $ref: '#/components/schemas/com.datumapis.compute.v1alpha.Workload',
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'compute.datumapis.com',
      kind: 'WorkloadList',
      version: 'v1alpha',
    },
  ],
  'x-kubernetes-selectable-fields': [],
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_DeleteOptionsSchema = {
  description: 'DeleteOptions may be provided when deleting an API object.',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    dryRun: {
      description:
        'When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed',
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
      'x-kubernetes-list-type': 'atomic',
    },
    gracePeriodSeconds: {
      description:
        'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
      type: 'integer',
      format: 'int64',
    },
    ignoreStoreReadErrorWithClusterBreakingPotential: {
      description:
        'if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it',
      type: 'boolean',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    orphanDependents: {
      description: `Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.`,
      type: 'boolean',
    },
    preconditions: {
      description:
        'Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions',
        },
      ],
    },
    propagationPolicy: {
      description:
        "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
      type: 'string',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'apps',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'apps',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'apps',
      kind: 'DeleteOptions',
      version: 'v1beta2',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v2',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v2beta1',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v2beta2',
    },
    {
      group: 'batch',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'batch',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha2',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'discovery.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'discovery.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'events.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'events.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'extensions',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta2',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta3',
    },
    {
      group: 'internal.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'node.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'node.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'node.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'policy',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'policy',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'resource.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha3',
    },
    {
      group: 'resource.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'storagemigration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
  ],
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_FieldsV1Schema = {
  description: `FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

The exact format is defined in sigs.k8s.io/structured-merge-diff`,
  type: 'object',
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_ListMetaSchema = {
  description:
    'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
  type: 'object',
  properties: {
    continue: {
      description:
        'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.',
      type: 'string',
    },
    remainingItemCount: {
      description:
        'remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.',
      type: 'integer',
      format: 'int64',
    },
    resourceVersion: {
      description:
        "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
      type: 'string',
    },
    selfLink: {
      description:
        'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.',
      type: 'string',
    },
  },
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_ManagedFieldsEntrySchema = {
  description:
    'ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.',
      type: 'string',
    },
    fieldsType: {
      description:
        'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"',
      type: 'string',
    },
    fieldsV1: {
      description:
        'FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1',
        },
      ],
    },
    manager: {
      description: 'Manager is an identifier of the workflow managing these fields.',
      type: 'string',
    },
    operation: {
      description:
        "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
      type: 'string',
    },
    subresource: {
      description:
        'Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.',
      type: 'string',
    },
    time: {
      description:
        'Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
  },
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_ObjectMetaSchema = {
  description:
    'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
  type: 'object',
  properties: {
    annotations: {
      description:
        'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations',
      type: 'object',
      additionalProperties: {
        type: 'string',
        default: '',
      },
    },
    creationTimestamp: {
      description: `CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata`,
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
    deletionGracePeriodSeconds: {
      description:
        'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
      type: 'integer',
      format: 'int64',
    },
    deletionTimestamp: {
      description: `DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata`,
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
    finalizers: {
      description:
        'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.',
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
      'x-kubernetes-list-type': 'set',
      'x-kubernetes-patch-strategy': 'merge',
    },
    generateName: {
      description: `GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

If this field is specified and the generated name exists, the server will return a 409.

Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency`,
      type: 'string',
    },
    generation: {
      description:
        'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
      type: 'integer',
      format: 'int64',
    },
    labels: {
      description:
        'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels',
      type: 'object',
      additionalProperties: {
        type: 'string',
        default: '',
      },
    },
    managedFields: {
      description: `ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.`,
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry',
          },
        ],
      },
      'x-kubernetes-list-type': 'atomic',
    },
    name: {
      description:
        'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names',
      type: 'string',
    },
    namespace: {
      description: `Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces`,
      type: 'string',
    },
    ownerReferences: {
      description:
        'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference',
          },
        ],
      },
      'x-kubernetes-list-map-keys': ['uid'],
      'x-kubernetes-list-type': 'map',
      'x-kubernetes-patch-merge-key': 'uid',
      'x-kubernetes-patch-strategy': 'merge',
    },
    resourceVersion: {
      description: `An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency`,
      type: 'string',
    },
    selfLink: {
      description:
        'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.',
      type: 'string',
    },
    uid: {
      description: `UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids`,
      type: 'string',
    },
  },
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_OwnerReferenceSchema = {
  description:
    'OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.',
  type: 'object',
  required: ['apiVersion', 'kind', 'name', 'uid'],
  properties: {
    apiVersion: {
      description: 'API version of the referent.',
      type: 'string',
      default: '',
    },
    blockOwnerDeletion: {
      description:
        'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
      type: 'boolean',
    },
    controller: {
      description: 'If true, this reference points to the managing controller.',
      type: 'boolean',
    },
    kind: {
      description:
        'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
      default: '',
    },
    name: {
      description:
        'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names',
      type: 'string',
      default: '',
    },
    uid: {
      description:
        'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids',
      type: 'string',
      default: '',
    },
  },
  'x-kubernetes-map-type': 'atomic',
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_PatchSchema = {
  description:
    'Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.',
  type: 'object',
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_PreconditionsSchema = {
  description:
    'Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.',
  type: 'object',
  properties: {
    resourceVersion: {
      description: 'Specifies the target ResourceVersion',
      type: 'string',
    },
    uid: {
      description: 'Specifies the target UID.',
      type: 'string',
    },
  },
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_StatusSchema = {
  description: "Status is a return value for calls that don't return other objects.",
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    code: {
      description: 'Suggested HTTP return code for this status, 0 if not set.',
      type: 'integer',
      format: 'int32',
    },
    details: {
      description:
        'Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails',
        },
      ],
      'x-kubernetes-list-type': 'atomic',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    message: {
      description: 'A human-readable description of the status of this operation.',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
    reason: {
      description:
        'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
      type: 'string',
    },
    status: {
      description:
        'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
      type: 'string',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'Status',
      version: 'v1',
    },
  ],
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_StatusCauseSchema = {
  description:
    'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
  type: 'object',
  properties: {
    field: {
      description: `The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

Examples:
  "name" - the field "name" on the current resource
  "items[0].name" - the field "name" on the first array entry in "items"`,
      type: 'string',
    },
    message: {
      description:
        'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
      type: 'string',
    },
    reason: {
      description:
        'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
      type: 'string',
    },
  },
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_StatusDetailsSchema = {
  description:
    'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
  type: 'object',
  properties: {
    causes: {
      description:
        'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause',
          },
        ],
      },
      'x-kubernetes-list-type': 'atomic',
    },
    group: {
      description:
        'The group attribute of the resource associated with the status StatusReason.',
      type: 'string',
    },
    kind: {
      description:
        'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    name: {
      description:
        'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
      type: 'string',
    },
    retryAfterSeconds: {
      description:
        'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
      type: 'integer',
      format: 'int32',
    },
    uid: {
      description:
        'UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids',
      type: 'string',
    },
  },
} as const

export const io_k8s_apimachinery_pkg_apis_meta_v1_TimeSchema = {
  description:
    'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
  type: 'string',
  format: 'date-time',
} as const
