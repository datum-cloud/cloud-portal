// This file is auto-generated by @hey-api/openapi-ts
import type {
  ListComputeDatumapisComV1AlphaInstanceForAllNamespacesResponse,
  DeleteComputeDatumapisComV1AlphaCollectionNamespacedInstanceResponse,
  ListComputeDatumapisComV1AlphaNamespacedInstanceResponse,
  CreateComputeDatumapisComV1AlphaNamespacedInstanceResponse,
  DeleteComputeDatumapisComV1AlphaNamespacedInstanceResponse,
  ReadComputeDatumapisComV1AlphaNamespacedInstanceResponse,
  PatchComputeDatumapisComV1AlphaNamespacedInstanceResponse,
  ReplaceComputeDatumapisComV1AlphaNamespacedInstanceResponse,
  ReadComputeDatumapisComV1AlphaNamespacedInstanceStatusResponse,
  PatchComputeDatumapisComV1AlphaNamespacedInstanceStatusResponse,
  ReplaceComputeDatumapisComV1AlphaNamespacedInstanceStatusResponse,
  DeleteComputeDatumapisComV1AlphaCollectionNamespacedWorkloadDeploymentResponse,
  ListComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponse,
  CreateComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponse,
  DeleteComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponse,
  ReadComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponse,
  PatchComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponse,
  ReplaceComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponse,
  ReadComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentStatusResponse,
  PatchComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentStatusResponse,
  ReplaceComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentStatusResponse,
  DeleteComputeDatumapisComV1AlphaCollectionNamespacedWorkloadResponse,
  ListComputeDatumapisComV1AlphaNamespacedWorkloadResponse,
  CreateComputeDatumapisComV1AlphaNamespacedWorkloadResponse,
  DeleteComputeDatumapisComV1AlphaNamespacedWorkloadResponse,
  ReadComputeDatumapisComV1AlphaNamespacedWorkloadResponse,
  PatchComputeDatumapisComV1AlphaNamespacedWorkloadResponse,
  ReplaceComputeDatumapisComV1AlphaNamespacedWorkloadResponse,
  ReadComputeDatumapisComV1AlphaNamespacedWorkloadStatusResponse,
  PatchComputeDatumapisComV1AlphaNamespacedWorkloadStatusResponse,
  ReplaceComputeDatumapisComV1AlphaNamespacedWorkloadStatusResponse,
  ListComputeDatumapisComV1AlphaWorkloadDeploymentForAllNamespacesResponse,
  ListComputeDatumapisComV1AlphaWorkloadForAllNamespacesResponse,
} from './types.gen';

const ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer = (data: any) => {
  data = new Date(data);
  return data;
};

const ioK8sApimachineryPkgApisMetaV1ManagedFieldsEntrySchemaResponseTransformer = (data: any) => {
  if (data.time) {
    data.time = ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer(data.time);
  }
  return data;
};

const ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer = (data: any) => {
  if (data.creationTimestamp) {
    data.creationTimestamp = ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer(
      data.creationTimestamp
    );
  }
  if (data.deletionGracePeriodSeconds) {
    data.deletionGracePeriodSeconds = BigInt(data.deletionGracePeriodSeconds.toString());
  }
  if (data.deletionTimestamp) {
    data.deletionTimestamp = ioK8sApimachineryPkgApisMetaV1TimeSchemaResponseTransformer(
      data.deletionTimestamp
    );
  }
  if (data.generation) {
    data.generation = BigInt(data.generation.toString());
  }
  if (data.managedFields) {
    data.managedFields = data.managedFields.map((item: any) => {
      return ioK8sApimachineryPkgApisMetaV1ManagedFieldsEntrySchemaResponseTransformer(item);
    });
  }
  return data;
};

const comDatumapisComputeV1AlphaInstanceSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata
    );
  }
  if (data.status) {
    if (data.status.conditions) {
      data.status.conditions = data.status.conditions.map((item: any) => {
        item.lastTransitionTime = new Date(item.lastTransitionTime);
        if (item.observedGeneration) {
          item.observedGeneration = BigInt(item.observedGeneration.toString());
        }
        return item;
      });
    }
    return data.status;
  }
  return data;
};

const ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer = (data: any) => {
  if (data.remainingItemCount) {
    data.remainingItemCount = BigInt(data.remainingItemCount.toString());
  }
  return data;
};

const comDatumapisComputeV1AlphaInstanceListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return comDatumapisComputeV1AlphaInstanceSchemaResponseTransformer(item);
  });
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const listComputeDatumapisComV1AlphaInstanceForAllNamespacesResponseTransformer = async (
  data: any
): Promise<ListComputeDatumapisComV1AlphaInstanceForAllNamespacesResponse> => {
  data = comDatumapisComputeV1AlphaInstanceListSchemaResponseTransformer(data);
  return data;
};

const ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const deleteComputeDatumapisComV1AlphaCollectionNamespacedInstanceResponseTransformer =
  async (
    data: any
  ): Promise<DeleteComputeDatumapisComV1AlphaCollectionNamespacedInstanceResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

export const listComputeDatumapisComV1AlphaNamespacedInstanceResponseTransformer = async (
  data: any
): Promise<ListComputeDatumapisComV1AlphaNamespacedInstanceResponse> => {
  data = comDatumapisComputeV1AlphaInstanceListSchemaResponseTransformer(data);
  return data;
};

export const createComputeDatumapisComV1AlphaNamespacedInstanceResponseTransformer = async (
  data: any
): Promise<CreateComputeDatumapisComV1AlphaNamespacedInstanceResponse> => {
  data = comDatumapisComputeV1AlphaInstanceSchemaResponseTransformer(data);
  return data;
};

export const deleteComputeDatumapisComV1AlphaNamespacedInstanceResponseTransformer = async (
  data: any
): Promise<DeleteComputeDatumapisComV1AlphaNamespacedInstanceResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
  return data;
};

export const readComputeDatumapisComV1AlphaNamespacedInstanceResponseTransformer = async (
  data: any
): Promise<ReadComputeDatumapisComV1AlphaNamespacedInstanceResponse> => {
  data = comDatumapisComputeV1AlphaInstanceSchemaResponseTransformer(data);
  return data;
};

export const patchComputeDatumapisComV1AlphaNamespacedInstanceResponseTransformer = async (
  data: any
): Promise<PatchComputeDatumapisComV1AlphaNamespacedInstanceResponse> => {
  data = comDatumapisComputeV1AlphaInstanceSchemaResponseTransformer(data);
  return data;
};

export const replaceComputeDatumapisComV1AlphaNamespacedInstanceResponseTransformer = async (
  data: any
): Promise<ReplaceComputeDatumapisComV1AlphaNamespacedInstanceResponse> => {
  data = comDatumapisComputeV1AlphaInstanceSchemaResponseTransformer(data);
  return data;
};

export const readComputeDatumapisComV1AlphaNamespacedInstanceStatusResponseTransformer = async (
  data: any
): Promise<ReadComputeDatumapisComV1AlphaNamespacedInstanceStatusResponse> => {
  data = comDatumapisComputeV1AlphaInstanceSchemaResponseTransformer(data);
  return data;
};

export const patchComputeDatumapisComV1AlphaNamespacedInstanceStatusResponseTransformer = async (
  data: any
): Promise<PatchComputeDatumapisComV1AlphaNamespacedInstanceStatusResponse> => {
  data = comDatumapisComputeV1AlphaInstanceSchemaResponseTransformer(data);
  return data;
};

export const replaceComputeDatumapisComV1AlphaNamespacedInstanceStatusResponseTransformer = async (
  data: any
): Promise<ReplaceComputeDatumapisComV1AlphaNamespacedInstanceStatusResponse> => {
  data = comDatumapisComputeV1AlphaInstanceSchemaResponseTransformer(data);
  return data;
};

export const deleteComputeDatumapisComV1AlphaCollectionNamespacedWorkloadDeploymentResponseTransformer =
  async (
    data: any
  ): Promise<DeleteComputeDatumapisComV1AlphaCollectionNamespacedWorkloadDeploymentResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

const comDatumapisComputeV1AlphaWorkloadDeploymentSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata
    );
  }
  if (data.status) {
    if (data.status.conditions) {
      data.status.conditions = data.status.conditions.map((item: any) => {
        item.lastTransitionTime = new Date(item.lastTransitionTime);
        if (item.observedGeneration) {
          item.observedGeneration = BigInt(item.observedGeneration.toString());
        }
        return item;
      });
    }
    return data.status;
  }
  return data;
};

const comDatumapisComputeV1AlphaWorkloadDeploymentListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return comDatumapisComputeV1AlphaWorkloadDeploymentSchemaResponseTransformer(item);
  });
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const listComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponseTransformer = async (
  data: any
): Promise<ListComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponse> => {
  data = comDatumapisComputeV1AlphaWorkloadDeploymentListSchemaResponseTransformer(data);
  return data;
};

export const createComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponseTransformer =
  async (
    data: any
  ): Promise<CreateComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponse> => {
    data = comDatumapisComputeV1AlphaWorkloadDeploymentSchemaResponseTransformer(data);
    return data;
  };

export const deleteComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponseTransformer =
  async (
    data: any
  ): Promise<DeleteComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

export const readComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponseTransformer = async (
  data: any
): Promise<ReadComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponse> => {
  data = comDatumapisComputeV1AlphaWorkloadDeploymentSchemaResponseTransformer(data);
  return data;
};

export const patchComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponseTransformer =
  async (
    data: any
  ): Promise<PatchComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponse> => {
    data = comDatumapisComputeV1AlphaWorkloadDeploymentSchemaResponseTransformer(data);
    return data;
  };

export const replaceComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponseTransformer =
  async (
    data: any
  ): Promise<ReplaceComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentResponse> => {
    data = comDatumapisComputeV1AlphaWorkloadDeploymentSchemaResponseTransformer(data);
    return data;
  };

export const readComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentStatusResponseTransformer =
  async (
    data: any
  ): Promise<ReadComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentStatusResponse> => {
    data = comDatumapisComputeV1AlphaWorkloadDeploymentSchemaResponseTransformer(data);
    return data;
  };

export const patchComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentStatusResponseTransformer =
  async (
    data: any
  ): Promise<PatchComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentStatusResponse> => {
    data = comDatumapisComputeV1AlphaWorkloadDeploymentSchemaResponseTransformer(data);
    return data;
  };

export const replaceComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentStatusResponseTransformer =
  async (
    data: any
  ): Promise<ReplaceComputeDatumapisComV1AlphaNamespacedWorkloadDeploymentStatusResponse> => {
    data = comDatumapisComputeV1AlphaWorkloadDeploymentSchemaResponseTransformer(data);
    return data;
  };

export const deleteComputeDatumapisComV1AlphaCollectionNamespacedWorkloadResponseTransformer =
  async (
    data: any
  ): Promise<DeleteComputeDatumapisComV1AlphaCollectionNamespacedWorkloadResponse> => {
    data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
    return data;
  };

const comDatumapisComputeV1AlphaWorkloadSchemaResponseTransformer = (data: any) => {
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ObjectMetaSchemaResponseTransformer(
      data.metadata
    );
  }
  if (data.status) {
    if (data.status.conditions) {
      data.status.conditions = data.status.conditions.map((item: any) => {
        item.lastTransitionTime = new Date(item.lastTransitionTime);
        if (item.observedGeneration) {
          item.observedGeneration = BigInt(item.observedGeneration.toString());
        }
        return item;
      });
    }
    if (data.status.gateway) {
      if (data.status.gateway.conditions) {
        data.status.gateway.conditions = data.status.gateway.conditions.map((item: any) => {
          item.lastTransitionTime = new Date(item.lastTransitionTime);
          if (item.observedGeneration) {
            item.observedGeneration = BigInt(item.observedGeneration.toString());
          }
          return item;
        });
      }
      if (data.status.gateway.listeners) {
        data.status.gateway.listeners = data.status.gateway.listeners.map((item: any) => {
          item.conditions = item.conditions.map((item: any) => {
            item.lastTransitionTime = new Date(item.lastTransitionTime);
            if (item.observedGeneration) {
              item.observedGeneration = BigInt(item.observedGeneration.toString());
            }
            return item;
          });
          return item;
        });
      }
      return data.status.gateway;
    }
    if (data.status.placements) {
      data.status.placements = data.status.placements.map((item: any) => {
        if (item.conditions) {
          item.conditions = item.conditions.map((item: any) => {
            item.lastTransitionTime = new Date(item.lastTransitionTime);
            if (item.observedGeneration) {
              item.observedGeneration = BigInt(item.observedGeneration.toString());
            }
            return item;
          });
        }
        return item;
      });
    }
    return data.status;
  }
  return data;
};

const comDatumapisComputeV1AlphaWorkloadListSchemaResponseTransformer = (data: any) => {
  data.items = data.items.map((item: any) => {
    return comDatumapisComputeV1AlphaWorkloadSchemaResponseTransformer(item);
  });
  if (data.metadata) {
    data.metadata = ioK8sApimachineryPkgApisMetaV1ListMetaSchemaResponseTransformer(data.metadata);
  }
  return data;
};

export const listComputeDatumapisComV1AlphaNamespacedWorkloadResponseTransformer = async (
  data: any
): Promise<ListComputeDatumapisComV1AlphaNamespacedWorkloadResponse> => {
  data = comDatumapisComputeV1AlphaWorkloadListSchemaResponseTransformer(data);
  return data;
};

export const createComputeDatumapisComV1AlphaNamespacedWorkloadResponseTransformer = async (
  data: any
): Promise<CreateComputeDatumapisComV1AlphaNamespacedWorkloadResponse> => {
  data = comDatumapisComputeV1AlphaWorkloadSchemaResponseTransformer(data);
  return data;
};

export const deleteComputeDatumapisComV1AlphaNamespacedWorkloadResponseTransformer = async (
  data: any
): Promise<DeleteComputeDatumapisComV1AlphaNamespacedWorkloadResponse> => {
  data = ioK8sApimachineryPkgApisMetaV1StatusSchemaResponseTransformer(data);
  return data;
};

export const readComputeDatumapisComV1AlphaNamespacedWorkloadResponseTransformer = async (
  data: any
): Promise<ReadComputeDatumapisComV1AlphaNamespacedWorkloadResponse> => {
  data = comDatumapisComputeV1AlphaWorkloadSchemaResponseTransformer(data);
  return data;
};

export const patchComputeDatumapisComV1AlphaNamespacedWorkloadResponseTransformer = async (
  data: any
): Promise<PatchComputeDatumapisComV1AlphaNamespacedWorkloadResponse> => {
  data = comDatumapisComputeV1AlphaWorkloadSchemaResponseTransformer(data);
  return data;
};

export const replaceComputeDatumapisComV1AlphaNamespacedWorkloadResponseTransformer = async (
  data: any
): Promise<ReplaceComputeDatumapisComV1AlphaNamespacedWorkloadResponse> => {
  data = comDatumapisComputeV1AlphaWorkloadSchemaResponseTransformer(data);
  return data;
};

export const readComputeDatumapisComV1AlphaNamespacedWorkloadStatusResponseTransformer = async (
  data: any
): Promise<ReadComputeDatumapisComV1AlphaNamespacedWorkloadStatusResponse> => {
  data = comDatumapisComputeV1AlphaWorkloadSchemaResponseTransformer(data);
  return data;
};

export const patchComputeDatumapisComV1AlphaNamespacedWorkloadStatusResponseTransformer = async (
  data: any
): Promise<PatchComputeDatumapisComV1AlphaNamespacedWorkloadStatusResponse> => {
  data = comDatumapisComputeV1AlphaWorkloadSchemaResponseTransformer(data);
  return data;
};

export const replaceComputeDatumapisComV1AlphaNamespacedWorkloadStatusResponseTransformer = async (
  data: any
): Promise<ReplaceComputeDatumapisComV1AlphaNamespacedWorkloadStatusResponse> => {
  data = comDatumapisComputeV1AlphaWorkloadSchemaResponseTransformer(data);
  return data;
};

export const listComputeDatumapisComV1AlphaWorkloadDeploymentForAllNamespacesResponseTransformer =
  async (
    data: any
  ): Promise<ListComputeDatumapisComV1AlphaWorkloadDeploymentForAllNamespacesResponse> => {
    data = comDatumapisComputeV1AlphaWorkloadDeploymentListSchemaResponseTransformer(data);
    return data;
  };

export const listComputeDatumapisComV1AlphaWorkloadForAllNamespacesResponseTransformer = async (
  data: any
): Promise<ListComputeDatumapisComV1AlphaWorkloadForAllNamespacesResponse> => {
  data = comDatumapisComputeV1AlphaWorkloadListSchemaResponseTransformer(data);
  return data;
};
