// This file is auto-generated by @hey-api/openapi-ts
import { client as _heyApiClient } from './client.gen'
import type {
  GetCoreV1ApiResourcesData,
  GetCoreV1ApiResourcesResponse,
  ListCoreV1ConfigMapForAllNamespacesData,
  ListCoreV1ConfigMapForAllNamespacesResponse,
  ListCoreV1EventForAllNamespacesData,
  ListCoreV1EventForAllNamespacesResponse,
  ListCoreV1NamespaceData,
  ListCoreV1NamespaceResponse,
  CreateCoreV1NamespaceData,
  CreateCoreV1NamespaceResponse,
  DeleteCoreV1CollectionNamespacedConfigMapData,
  DeleteCoreV1CollectionNamespacedConfigMapResponse,
  ListCoreV1NamespacedConfigMapData,
  ListCoreV1NamespacedConfigMapResponse,
  CreateCoreV1NamespacedConfigMapData,
  CreateCoreV1NamespacedConfigMapResponse,
  DeleteCoreV1NamespacedConfigMapData,
  DeleteCoreV1NamespacedConfigMapResponse,
  ReadCoreV1NamespacedConfigMapData,
  ReadCoreV1NamespacedConfigMapResponse,
  PatchCoreV1NamespacedConfigMapData,
  PatchCoreV1NamespacedConfigMapResponse,
  ReplaceCoreV1NamespacedConfigMapData,
  ReplaceCoreV1NamespacedConfigMapResponse,
  DeleteCoreV1CollectionNamespacedEventData,
  DeleteCoreV1CollectionNamespacedEventResponse,
  ListCoreV1NamespacedEventData,
  ListCoreV1NamespacedEventResponse,
  CreateCoreV1NamespacedEventData,
  CreateCoreV1NamespacedEventResponse,
  DeleteCoreV1NamespacedEventData,
  DeleteCoreV1NamespacedEventResponse,
  ReadCoreV1NamespacedEventData,
  ReadCoreV1NamespacedEventResponse,
  PatchCoreV1NamespacedEventData,
  PatchCoreV1NamespacedEventResponse,
  ReplaceCoreV1NamespacedEventData,
  ReplaceCoreV1NamespacedEventResponse,
  DeleteCoreV1CollectionNamespacedResourceQuotaData,
  DeleteCoreV1CollectionNamespacedResourceQuotaResponse,
  ListCoreV1NamespacedResourceQuotaData,
  ListCoreV1NamespacedResourceQuotaResponse,
  CreateCoreV1NamespacedResourceQuotaData,
  CreateCoreV1NamespacedResourceQuotaResponse,
  DeleteCoreV1NamespacedResourceQuotaData,
  DeleteCoreV1NamespacedResourceQuotaResponse,
  ReadCoreV1NamespacedResourceQuotaData,
  ReadCoreV1NamespacedResourceQuotaResponse,
  PatchCoreV1NamespacedResourceQuotaData,
  PatchCoreV1NamespacedResourceQuotaResponse,
  ReplaceCoreV1NamespacedResourceQuotaData,
  ReplaceCoreV1NamespacedResourceQuotaResponse,
  ReadCoreV1NamespacedResourceQuotaStatusData,
  ReadCoreV1NamespacedResourceQuotaStatusResponse,
  PatchCoreV1NamespacedResourceQuotaStatusData,
  PatchCoreV1NamespacedResourceQuotaStatusResponse,
  ReplaceCoreV1NamespacedResourceQuotaStatusData,
  ReplaceCoreV1NamespacedResourceQuotaStatusResponse,
  DeleteCoreV1CollectionNamespacedSecretData,
  DeleteCoreV1CollectionNamespacedSecretResponse,
  ListCoreV1NamespacedSecretData,
  ListCoreV1NamespacedSecretResponse,
  CreateCoreV1NamespacedSecretData,
  CreateCoreV1NamespacedSecretResponse,
  DeleteCoreV1NamespacedSecretData,
  DeleteCoreV1NamespacedSecretResponse,
  ReadCoreV1NamespacedSecretData,
  ReadCoreV1NamespacedSecretResponse,
  PatchCoreV1NamespacedSecretData,
  PatchCoreV1NamespacedSecretResponse,
  ReplaceCoreV1NamespacedSecretData,
  ReplaceCoreV1NamespacedSecretResponse,
  DeleteCoreV1CollectionNamespacedServiceAccountData,
  DeleteCoreV1CollectionNamespacedServiceAccountResponse,
  ListCoreV1NamespacedServiceAccountData,
  ListCoreV1NamespacedServiceAccountResponse,
  CreateCoreV1NamespacedServiceAccountData,
  CreateCoreV1NamespacedServiceAccountResponse,
  DeleteCoreV1NamespacedServiceAccountData,
  DeleteCoreV1NamespacedServiceAccountResponse,
  ReadCoreV1NamespacedServiceAccountData,
  ReadCoreV1NamespacedServiceAccountResponse,
  PatchCoreV1NamespacedServiceAccountData,
  PatchCoreV1NamespacedServiceAccountResponse,
  ReplaceCoreV1NamespacedServiceAccountData,
  ReplaceCoreV1NamespacedServiceAccountResponse,
  CreateCoreV1NamespacedServiceAccountTokenData,
  CreateCoreV1NamespacedServiceAccountTokenResponse,
  DeleteCoreV1NamespaceData,
  DeleteCoreV1NamespaceResponse,
  ReadCoreV1NamespaceData,
  ReadCoreV1NamespaceResponse,
  PatchCoreV1NamespaceData,
  PatchCoreV1NamespaceResponse,
  ReplaceCoreV1NamespaceData,
  ReplaceCoreV1NamespaceResponse,
  ReplaceCoreV1NamespaceFinalizeData,
  ReplaceCoreV1NamespaceFinalizeResponse,
  ReadCoreV1NamespaceStatusData,
  ReadCoreV1NamespaceStatusResponse,
  PatchCoreV1NamespaceStatusData,
  PatchCoreV1NamespaceStatusResponse,
  ReplaceCoreV1NamespaceStatusData,
  ReplaceCoreV1NamespaceStatusResponse,
  ListCoreV1ResourceQuotaForAllNamespacesData,
  ListCoreV1ResourceQuotaForAllNamespacesResponse,
  ListCoreV1SecretForAllNamespacesData,
  ListCoreV1SecretForAllNamespacesResponse,
  ListCoreV1ServiceAccountForAllNamespacesData,
  ListCoreV1ServiceAccountForAllNamespacesResponse,
  WatchCoreV1ConfigMapListForAllNamespacesData,
  WatchCoreV1ConfigMapListForAllNamespacesResponse,
  WatchCoreV1EventListForAllNamespacesData,
  WatchCoreV1EventListForAllNamespacesResponse,
  WatchCoreV1NamespaceListData,
  WatchCoreV1NamespaceListResponse,
  WatchCoreV1NamespacedConfigMapListData,
  WatchCoreV1NamespacedConfigMapListResponse,
  WatchCoreV1NamespacedConfigMapData,
  WatchCoreV1NamespacedConfigMapResponse,
  WatchCoreV1NamespacedEventListData,
  WatchCoreV1NamespacedEventListResponse,
  WatchCoreV1NamespacedEventData,
  WatchCoreV1NamespacedEventResponse,
  WatchCoreV1NamespacedResourceQuotaListData,
  WatchCoreV1NamespacedResourceQuotaListResponse,
  WatchCoreV1NamespacedResourceQuotaData,
  WatchCoreV1NamespacedResourceQuotaResponse,
  WatchCoreV1NamespacedSecretListData,
  WatchCoreV1NamespacedSecretListResponse,
  WatchCoreV1NamespacedSecretData,
  WatchCoreV1NamespacedSecretResponse,
  WatchCoreV1NamespacedServiceAccountListData,
  WatchCoreV1NamespacedServiceAccountListResponse,
  WatchCoreV1NamespacedServiceAccountData,
  WatchCoreV1NamespacedServiceAccountResponse,
  WatchCoreV1NamespaceData,
  WatchCoreV1NamespaceResponse,
  WatchCoreV1ResourceQuotaListForAllNamespacesData,
  WatchCoreV1ResourceQuotaListForAllNamespacesResponse,
  WatchCoreV1SecretListForAllNamespacesData,
  WatchCoreV1SecretListForAllNamespacesResponse,
  WatchCoreV1ServiceAccountListForAllNamespacesData,
  WatchCoreV1ServiceAccountListForAllNamespacesResponse,
} from './types.gen'
import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * get available resources
 */
export const getCoreV1ApiResources = <ThrowOnError extends boolean = false>(
  options?: Options<GetCoreV1ApiResourcesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCoreV1ApiResourcesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/',
    ...options,
  })
}

/**
 * list or watch objects of kind ConfigMap
 */
export const listCoreV1ConfigMapForAllNamespaces = <ThrowOnError extends boolean = false>(
  options?: Options<ListCoreV1ConfigMapForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListCoreV1ConfigMapForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/configmaps',
    ...options,
  })
}

/**
 * list or watch objects of kind Event
 */
export const listCoreV1EventForAllNamespaces = <ThrowOnError extends boolean = false>(
  options?: Options<ListCoreV1EventForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListCoreV1EventForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/events',
    ...options,
  })
}

/**
 * list or watch objects of kind Namespace
 */
export const listCoreV1Namespace = <ThrowOnError extends boolean = false>(
  options?: Options<ListCoreV1NamespaceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListCoreV1NamespaceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces',
    ...options,
  })
}

/**
 * create a Namespace
 */
export const createCoreV1Namespace = <ThrowOnError extends boolean = false>(
  options: Options<CreateCoreV1NamespaceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCoreV1NamespaceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * delete collection of ConfigMap
 */
export const deleteCoreV1CollectionNamespacedConfigMap = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteCoreV1CollectionNamespacedConfigMapData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCoreV1CollectionNamespacedConfigMapResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/configmaps',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * list or watch objects of kind ConfigMap
 */
export const listCoreV1NamespacedConfigMap = <ThrowOnError extends boolean = false>(
  options: Options<ListCoreV1NamespacedConfigMapData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListCoreV1NamespacedConfigMapResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/configmaps',
    ...options,
  })
}

/**
 * create a ConfigMap
 */
export const createCoreV1NamespacedConfigMap = <ThrowOnError extends boolean = false>(
  options: Options<CreateCoreV1NamespacedConfigMapData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCoreV1NamespacedConfigMapResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/configmaps',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * delete a ConfigMap
 */
export const deleteCoreV1NamespacedConfigMap = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCoreV1NamespacedConfigMapData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCoreV1NamespacedConfigMapResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/configmaps/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * read the specified ConfigMap
 */
export const readCoreV1NamespacedConfigMap = <ThrowOnError extends boolean = false>(
  options: Options<ReadCoreV1NamespacedConfigMapData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadCoreV1NamespacedConfigMapResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/configmaps/{name}',
    ...options,
  })
}

/**
 * partially update the specified ConfigMap
 */
export const patchCoreV1NamespacedConfigMap = <ThrowOnError extends boolean = false>(
  options: Options<PatchCoreV1NamespacedConfigMapData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchCoreV1NamespacedConfigMapResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/configmaps/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace the specified ConfigMap
 */
export const replaceCoreV1NamespacedConfigMap = <ThrowOnError extends boolean = false>(
  options: Options<ReplaceCoreV1NamespacedConfigMapData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceCoreV1NamespacedConfigMapResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/configmaps/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * delete collection of Event
 */
export const deleteCoreV1CollectionNamespacedEvent = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteCoreV1CollectionNamespacedEventData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCoreV1CollectionNamespacedEventResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/events',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * list or watch objects of kind Event
 */
export const listCoreV1NamespacedEvent = <ThrowOnError extends boolean = false>(
  options: Options<ListCoreV1NamespacedEventData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListCoreV1NamespacedEventResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/events',
    ...options,
  })
}

/**
 * create an Event
 */
export const createCoreV1NamespacedEvent = <ThrowOnError extends boolean = false>(
  options: Options<CreateCoreV1NamespacedEventData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCoreV1NamespacedEventResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/events',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * delete an Event
 */
export const deleteCoreV1NamespacedEvent = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCoreV1NamespacedEventData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCoreV1NamespacedEventResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/events/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * read the specified Event
 */
export const readCoreV1NamespacedEvent = <ThrowOnError extends boolean = false>(
  options: Options<ReadCoreV1NamespacedEventData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadCoreV1NamespacedEventResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/events/{name}',
    ...options,
  })
}

/**
 * partially update the specified Event
 */
export const patchCoreV1NamespacedEvent = <ThrowOnError extends boolean = false>(
  options: Options<PatchCoreV1NamespacedEventData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchCoreV1NamespacedEventResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/events/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace the specified Event
 */
export const replaceCoreV1NamespacedEvent = <ThrowOnError extends boolean = false>(
  options: Options<ReplaceCoreV1NamespacedEventData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceCoreV1NamespacedEventResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/events/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * delete collection of ResourceQuota
 */
export const deleteCoreV1CollectionNamespacedResourceQuota = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteCoreV1CollectionNamespacedResourceQuotaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCoreV1CollectionNamespacedResourceQuotaResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/resourcequotas',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * list or watch objects of kind ResourceQuota
 */
export const listCoreV1NamespacedResourceQuota = <ThrowOnError extends boolean = false>(
  options: Options<ListCoreV1NamespacedResourceQuotaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListCoreV1NamespacedResourceQuotaResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/resourcequotas',
    ...options,
  })
}

/**
 * create a ResourceQuota
 */
export const createCoreV1NamespacedResourceQuota = <ThrowOnError extends boolean = false>(
  options: Options<CreateCoreV1NamespacedResourceQuotaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCoreV1NamespacedResourceQuotaResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/resourcequotas',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * delete a ResourceQuota
 */
export const deleteCoreV1NamespacedResourceQuota = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCoreV1NamespacedResourceQuotaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCoreV1NamespacedResourceQuotaResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/resourcequotas/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * read the specified ResourceQuota
 */
export const readCoreV1NamespacedResourceQuota = <ThrowOnError extends boolean = false>(
  options: Options<ReadCoreV1NamespacedResourceQuotaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadCoreV1NamespacedResourceQuotaResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/resourcequotas/{name}',
    ...options,
  })
}

/**
 * partially update the specified ResourceQuota
 */
export const patchCoreV1NamespacedResourceQuota = <ThrowOnError extends boolean = false>(
  options: Options<PatchCoreV1NamespacedResourceQuotaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchCoreV1NamespacedResourceQuotaResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/resourcequotas/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace the specified ResourceQuota
 */
export const replaceCoreV1NamespacedResourceQuota = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReplaceCoreV1NamespacedResourceQuotaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceCoreV1NamespacedResourceQuotaResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/resourcequotas/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * read status of the specified ResourceQuota
 */
export const readCoreV1NamespacedResourceQuotaStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReadCoreV1NamespacedResourceQuotaStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadCoreV1NamespacedResourceQuotaStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/resourcequotas/{name}/status',
    ...options,
  })
}

/**
 * partially update status of the specified ResourceQuota
 */
export const patchCoreV1NamespacedResourceQuotaStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchCoreV1NamespacedResourceQuotaStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchCoreV1NamespacedResourceQuotaStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/resourcequotas/{name}/status',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace status of the specified ResourceQuota
 */
export const replaceCoreV1NamespacedResourceQuotaStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReplaceCoreV1NamespacedResourceQuotaStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceCoreV1NamespacedResourceQuotaStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/resourcequotas/{name}/status',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * delete collection of Secret
 */
export const deleteCoreV1CollectionNamespacedSecret = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteCoreV1CollectionNamespacedSecretData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCoreV1CollectionNamespacedSecretResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/secrets',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * list or watch objects of kind Secret
 */
export const listCoreV1NamespacedSecret = <ThrowOnError extends boolean = false>(
  options: Options<ListCoreV1NamespacedSecretData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListCoreV1NamespacedSecretResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/secrets',
    ...options,
  })
}

/**
 * create a Secret
 */
export const createCoreV1NamespacedSecret = <ThrowOnError extends boolean = false>(
  options: Options<CreateCoreV1NamespacedSecretData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCoreV1NamespacedSecretResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/secrets',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * delete a Secret
 */
export const deleteCoreV1NamespacedSecret = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCoreV1NamespacedSecretData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCoreV1NamespacedSecretResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/secrets/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * read the specified Secret
 */
export const readCoreV1NamespacedSecret = <ThrowOnError extends boolean = false>(
  options: Options<ReadCoreV1NamespacedSecretData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadCoreV1NamespacedSecretResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/secrets/{name}',
    ...options,
  })
}

/**
 * partially update the specified Secret
 */
export const patchCoreV1NamespacedSecret = <ThrowOnError extends boolean = false>(
  options: Options<PatchCoreV1NamespacedSecretData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchCoreV1NamespacedSecretResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/secrets/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace the specified Secret
 */
export const replaceCoreV1NamespacedSecret = <ThrowOnError extends boolean = false>(
  options: Options<ReplaceCoreV1NamespacedSecretData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceCoreV1NamespacedSecretResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/secrets/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * delete collection of ServiceAccount
 */
export const deleteCoreV1CollectionNamespacedServiceAccount = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteCoreV1CollectionNamespacedServiceAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCoreV1CollectionNamespacedServiceAccountResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/serviceaccounts',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * list or watch objects of kind ServiceAccount
 */
export const listCoreV1NamespacedServiceAccount = <ThrowOnError extends boolean = false>(
  options: Options<ListCoreV1NamespacedServiceAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListCoreV1NamespacedServiceAccountResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/serviceaccounts',
    ...options,
  })
}

/**
 * create a ServiceAccount
 */
export const createCoreV1NamespacedServiceAccount = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateCoreV1NamespacedServiceAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCoreV1NamespacedServiceAccountResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/serviceaccounts',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * delete a ServiceAccount
 */
export const deleteCoreV1NamespacedServiceAccount = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteCoreV1NamespacedServiceAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCoreV1NamespacedServiceAccountResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/serviceaccounts/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * read the specified ServiceAccount
 */
export const readCoreV1NamespacedServiceAccount = <ThrowOnError extends boolean = false>(
  options: Options<ReadCoreV1NamespacedServiceAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadCoreV1NamespacedServiceAccountResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/serviceaccounts/{name}',
    ...options,
  })
}

/**
 * partially update the specified ServiceAccount
 */
export const patchCoreV1NamespacedServiceAccount = <ThrowOnError extends boolean = false>(
  options: Options<PatchCoreV1NamespacedServiceAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchCoreV1NamespacedServiceAccountResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/serviceaccounts/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace the specified ServiceAccount
 */
export const replaceCoreV1NamespacedServiceAccount = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ReplaceCoreV1NamespacedServiceAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceCoreV1NamespacedServiceAccountResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/serviceaccounts/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * create token of a ServiceAccount
 */
export const createCoreV1NamespacedServiceAccountToken = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateCoreV1NamespacedServiceAccountTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCoreV1NamespacedServiceAccountTokenResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * delete a Namespace
 */
export const deleteCoreV1Namespace = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCoreV1NamespaceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCoreV1NamespaceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * read the specified Namespace
 */
export const readCoreV1Namespace = <ThrowOnError extends boolean = false>(
  options: Options<ReadCoreV1NamespaceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadCoreV1NamespaceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{name}',
    ...options,
  })
}

/**
 * partially update the specified Namespace
 */
export const patchCoreV1Namespace = <ThrowOnError extends boolean = false>(
  options: Options<PatchCoreV1NamespaceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchCoreV1NamespaceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace the specified Namespace
 */
export const replaceCoreV1Namespace = <ThrowOnError extends boolean = false>(
  options: Options<ReplaceCoreV1NamespaceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceCoreV1NamespaceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{name}',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * replace finalize of the specified Namespace
 */
export const replaceCoreV1NamespaceFinalize = <ThrowOnError extends boolean = false>(
  options: Options<ReplaceCoreV1NamespaceFinalizeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceCoreV1NamespaceFinalizeResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{name}/finalize',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * read status of the specified Namespace
 */
export const readCoreV1NamespaceStatus = <ThrowOnError extends boolean = false>(
  options: Options<ReadCoreV1NamespaceStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadCoreV1NamespaceStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{name}/status',
    ...options,
  })
}

/**
 * partially update status of the specified Namespace
 */
export const patchCoreV1NamespaceStatus = <ThrowOnError extends boolean = false>(
  options: Options<PatchCoreV1NamespaceStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchCoreV1NamespaceStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{name}/status',
    ...options,
    headers: {
      'Content-Type': 'application/apply-patch+yaml',
      ...options?.headers,
    },
  })
}

/**
 * replace status of the specified Namespace
 */
export const replaceCoreV1NamespaceStatus = <ThrowOnError extends boolean = false>(
  options: Options<ReplaceCoreV1NamespaceStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReplaceCoreV1NamespaceStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/namespaces/{name}/status',
    ...options,
    headers: {
      'Content-Type': '*/*',
      ...options?.headers,
    },
  })
}

/**
 * list or watch objects of kind ResourceQuota
 */
export const listCoreV1ResourceQuotaForAllNamespaces = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListCoreV1ResourceQuotaForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListCoreV1ResourceQuotaForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/resourcequotas',
    ...options,
  })
}

/**
 * list or watch objects of kind Secret
 */
export const listCoreV1SecretForAllNamespaces = <ThrowOnError extends boolean = false>(
  options?: Options<ListCoreV1SecretForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListCoreV1SecretForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/secrets',
    ...options,
  })
}

/**
 * list or watch objects of kind ServiceAccount
 */
export const listCoreV1ServiceAccountForAllNamespaces = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListCoreV1ServiceAccountForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListCoreV1ServiceAccountForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/serviceaccounts',
    ...options,
  })
}

/**
 * watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.
 */
export const watchCoreV1ConfigMapListForAllNamespaces = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<WatchCoreV1ConfigMapListForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WatchCoreV1ConfigMapListForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/configmaps',
    ...options,
  })
}

/**
 * watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
 */
export const watchCoreV1EventListForAllNamespaces = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<WatchCoreV1EventListForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WatchCoreV1EventListForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/events',
    ...options,
  })
}

/**
 * watch individual changes to a list of Namespace. deprecated: use the 'watch' parameter with a list operation instead.
 */
export const watchCoreV1NamespaceList = <ThrowOnError extends boolean = false>(
  options?: Options<WatchCoreV1NamespaceListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WatchCoreV1NamespaceListResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/namespaces',
    ...options,
  })
}

/**
 * watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.
 */
export const watchCoreV1NamespacedConfigMapList = <ThrowOnError extends boolean = false>(
  options: Options<WatchCoreV1NamespacedConfigMapListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WatchCoreV1NamespacedConfigMapListResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/namespaces/{namespace}/configmaps',
    ...options,
  })
}

/**
 * watch changes to an object of kind ConfigMap. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
 */
export const watchCoreV1NamespacedConfigMap = <ThrowOnError extends boolean = false>(
  options: Options<WatchCoreV1NamespacedConfigMapData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WatchCoreV1NamespacedConfigMapResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/namespaces/{namespace}/configmaps/{name}',
    ...options,
  })
}

/**
 * watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
 */
export const watchCoreV1NamespacedEventList = <ThrowOnError extends boolean = false>(
  options: Options<WatchCoreV1NamespacedEventListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WatchCoreV1NamespacedEventListResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/namespaces/{namespace}/events',
    ...options,
  })
}

/**
 * watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
 */
export const watchCoreV1NamespacedEvent = <ThrowOnError extends boolean = false>(
  options: Options<WatchCoreV1NamespacedEventData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WatchCoreV1NamespacedEventResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/namespaces/{namespace}/events/{name}',
    ...options,
  })
}

/**
 * watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.
 */
export const watchCoreV1NamespacedResourceQuotaList = <
  ThrowOnError extends boolean = false,
>(
  options: Options<WatchCoreV1NamespacedResourceQuotaListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WatchCoreV1NamespacedResourceQuotaListResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/namespaces/{namespace}/resourcequotas',
    ...options,
  })
}

/**
 * watch changes to an object of kind ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
 */
export const watchCoreV1NamespacedResourceQuota = <ThrowOnError extends boolean = false>(
  options: Options<WatchCoreV1NamespacedResourceQuotaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WatchCoreV1NamespacedResourceQuotaResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}',
    ...options,
  })
}

/**
 * watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.
 */
export const watchCoreV1NamespacedSecretList = <ThrowOnError extends boolean = false>(
  options: Options<WatchCoreV1NamespacedSecretListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WatchCoreV1NamespacedSecretListResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/namespaces/{namespace}/secrets',
    ...options,
  })
}

/**
 * watch changes to an object of kind Secret. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
 */
export const watchCoreV1NamespacedSecret = <ThrowOnError extends boolean = false>(
  options: Options<WatchCoreV1NamespacedSecretData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WatchCoreV1NamespacedSecretResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/namespaces/{namespace}/secrets/{name}',
    ...options,
  })
}

/**
 * watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.
 */
export const watchCoreV1NamespacedServiceAccountList = <
  ThrowOnError extends boolean = false,
>(
  options: Options<WatchCoreV1NamespacedServiceAccountListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WatchCoreV1NamespacedServiceAccountListResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/namespaces/{namespace}/serviceaccounts',
    ...options,
  })
}

/**
 * watch changes to an object of kind ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
 */
export const watchCoreV1NamespacedServiceAccount = <ThrowOnError extends boolean = false>(
  options: Options<WatchCoreV1NamespacedServiceAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WatchCoreV1NamespacedServiceAccountResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}',
    ...options,
  })
}

/**
 * watch changes to an object of kind Namespace. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
 */
export const watchCoreV1Namespace = <ThrowOnError extends boolean = false>(
  options: Options<WatchCoreV1NamespaceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WatchCoreV1NamespaceResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/namespaces/{name}',
    ...options,
  })
}

/**
 * watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.
 */
export const watchCoreV1ResourceQuotaListForAllNamespaces = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<WatchCoreV1ResourceQuotaListForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WatchCoreV1ResourceQuotaListForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/resourcequotas',
    ...options,
  })
}

/**
 * watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.
 */
export const watchCoreV1SecretListForAllNamespaces = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<WatchCoreV1SecretListForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WatchCoreV1SecretListForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/secrets',
    ...options,
  })
}

/**
 * watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.
 */
export const watchCoreV1ServiceAccountListForAllNamespaces = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<WatchCoreV1ServiceAccountListForAllNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WatchCoreV1ServiceAccountListForAllNamespacesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/watch/serviceaccounts',
    ...options,
  })
}
