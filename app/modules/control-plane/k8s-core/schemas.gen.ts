// This file is auto-generated by @hey-api/openapi-ts

export const io_k8s_api_authentication_v1_BoundObjectReferenceSchema = {
  description: 'BoundObjectReference is a reference to an object that a token is bound to.',
  type: 'object',
  properties: {
    apiVersion: {
      description: 'API version of the referent.',
      type: 'string',
    },
    kind: {
      description: "Kind of the referent. Valid kinds are 'Pod' and 'Secret'.",
      type: 'string',
    },
    name: {
      description: 'Name of the referent.',
      type: 'string',
    },
    uid: {
      description: 'UID of the referent.',
      type: 'string',
    },
  },
} as const;

export const io_k8s_api_authentication_v1_TokenRequestSchema = {
  description: 'TokenRequest requests a token for a given service account.',
  type: 'object',
  required: ['spec'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description: 'Spec holds information about the request being evaluated',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequestSpec',
        },
      ],
    },
    status: {
      description:
        'Status is filled in by the server and indicates whether the token can be authenticated.',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.api.authentication.v1.TokenRequestStatus',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: 'authentication.k8s.io',
      kind: 'TokenRequest',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_api_authentication_v1_TokenRequestSpecSchema = {
  description: 'TokenRequestSpec contains client provided parameters of a token request.',
  type: 'object',
  required: ['audiences'],
  properties: {
    audiences: {
      description:
        'Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.',
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
      'x-kubernetes-list-type': 'atomic',
    },
    boundObjectRef: {
      description:
        "BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.api.authentication.v1.BoundObjectReference',
        },
      ],
    },
    expirationSeconds: {
      description:
        "ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.",
      type: 'integer',
      format: 'int64',
    },
  },
} as const;

export const io_k8s_api_authentication_v1_TokenRequestStatusSchema = {
  description: 'TokenRequestStatus is the result of a token request.',
  type: 'object',
  required: ['token', 'expirationTimestamp'],
  properties: {
    expirationTimestamp: {
      description: 'ExpirationTimestamp is the time of expiration of the returned token.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
    token: {
      description: 'Token is the opaque bearer token.',
      type: 'string',
      default: '',
    },
  },
} as const;

export const io_k8s_api_core_v1_ConfigMapSchema = {
  description: 'ConfigMap holds configuration data for pods to consume.',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    binaryData: {
      description:
        "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
      type: 'object',
      additionalProperties: {
        type: 'string',
        format: 'byte',
      },
    },
    data: {
      description:
        "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
      type: 'object',
      additionalProperties: {
        type: 'string',
        default: '',
      },
    },
    immutable: {
      description:
        'Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.',
      type: 'boolean',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'ConfigMap',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_api_core_v1_ConfigMapListSchema = {
  description: 'ConfigMapList is a resource containing a list of ConfigMap objects.',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description: 'Items is the list of ConfigMaps.',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.api.core.v1.ConfigMap',
          },
        ],
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'ConfigMapList',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_api_core_v1_EventSchema = {
  description:
    'Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.',
  type: 'object',
  required: ['metadata', 'involvedObject'],
  properties: {
    action: {
      description: 'What action was taken/failed regarding to the Regarding object.',
      type: 'string',
    },
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    count: {
      description: 'The number of times this event has occurred.',
      type: 'integer',
      format: 'int32',
    },
    eventTime: {
      description: 'Time when this Event was first observed.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime',
        },
      ],
    },
    firstTimestamp: {
      description:
        'The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
    involvedObject: {
      description: 'The object that this event is about.',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference',
        },
      ],
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    lastTimestamp: {
      description: 'The time at which the most recent occurrence of this event was recorded.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
    message: {
      description: 'A human-readable description of the status of this operation.',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    reason: {
      description:
        "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
      type: 'string',
    },
    related: {
      description: 'Optional secondary object for more complex actions.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference',
        },
      ],
    },
    reportingComponent: {
      description: 'Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.',
      type: 'string',
      default: '',
    },
    reportingInstance: {
      description: 'ID of the controller instance, e.g. `kubelet-xyzf`.',
      type: 'string',
      default: '',
    },
    series: {
      description:
        "Data about the Event series this event represents or nil if it's a singleton Event.",
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.api.core.v1.EventSeries',
        },
      ],
    },
    source: {
      description:
        'The component reporting this event. Should be a short machine understandable string.',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.api.core.v1.EventSource',
        },
      ],
    },
    type: {
      description: 'Type of this event (Normal, Warning), new types could be added in the future',
      type: 'string',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'Event',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_api_core_v1_EventListSchema = {
  description: 'EventList is a list of events.',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description: 'List of events',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.api.core.v1.Event',
          },
        ],
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'EventList',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_api_core_v1_EventSeriesSchema = {
  description:
    'EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.',
  type: 'object',
  properties: {
    count: {
      description: 'Number of occurrences in this series up to the last heartbeat time',
      type: 'integer',
      format: 'int32',
    },
    lastObservedTime: {
      description: 'Time of the last occurrence observed',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime',
        },
      ],
    },
  },
} as const;

export const io_k8s_api_core_v1_EventSourceSchema = {
  description: 'EventSource contains information for an event.',
  type: 'object',
  properties: {
    component: {
      description: 'Component from which the event is generated.',
      type: 'string',
    },
    host: {
      description: 'Node name on which the event is generated.',
      type: 'string',
    },
  },
} as const;

export const io_k8s_api_core_v1_LocalObjectReferenceSchema = {
  description:
    'LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.',
  type: 'object',
  properties: {
    name: {
      description:
        'Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
      type: 'string',
      default: '',
    },
  },
  'x-kubernetes-map-type': 'atomic',
} as const;

export const io_k8s_api_core_v1_NamespaceSchema = {
  description: 'Namespace provides a scope for Names. Use of multiple namespaces is optional.',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description:
        'Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceSpec',
        },
      ],
    },
    status: {
      description:
        'Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceStatus',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'Namespace',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_api_core_v1_NamespaceConditionSchema = {
  description: 'NamespaceCondition contains details about state of namespace.',
  type: 'object',
  required: ['type', 'status'],
  properties: {
    lastTransitionTime: {
      description: 'Last time the condition transitioned from one status to another.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
    message: {
      description: 'Human-readable message indicating details about last transition.',
      type: 'string',
    },
    reason: {
      description: "Unique, one-word, CamelCase reason for the condition's last transition.",
      type: 'string',
    },
    status: {
      description: 'Status of the condition, one of True, False, Unknown.',
      type: 'string',
      default: '',
    },
    type: {
      description: 'Type of namespace controller condition.',
      type: 'string',
      default: '',
    },
  },
} as const;

export const io_k8s_api_core_v1_NamespaceListSchema = {
  description: 'NamespaceList is a list of Namespaces.',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.api.core.v1.Namespace',
          },
        ],
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'NamespaceList',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_api_core_v1_NamespaceSpecSchema = {
  description: 'NamespaceSpec describes the attributes on a Namespace.',
  type: 'object',
  properties: {
    finalizers: {
      description:
        'Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/',
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
      'x-kubernetes-list-type': 'atomic',
    },
  },
} as const;

export const io_k8s_api_core_v1_NamespaceStatusSchema = {
  description: 'NamespaceStatus is information about the current status of a Namespace.',
  type: 'object',
  properties: {
    conditions: {
      description: "Represents the latest available observations of a namespace's current state.",
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.api.core.v1.NamespaceCondition',
          },
        ],
      },
      'x-kubernetes-list-map-keys': ['type'],
      'x-kubernetes-list-type': 'map',
      'x-kubernetes-patch-merge-key': 'type',
      'x-kubernetes-patch-strategy': 'merge',
    },
    phase: {
      description: `Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/

Possible enum values:
 - \`"Active"\` means the namespace is available for use in the system
 - \`"Terminating"\` means the namespace is undergoing graceful termination`,
      type: 'string',
      enum: ['Active', 'Terminating'],
    },
  },
} as const;

export const io_k8s_api_core_v1_ObjectReferenceSchema = {
  description:
    'ObjectReference contains enough information to let you inspect or modify the referred object.',
  type: 'object',
  properties: {
    apiVersion: {
      description: 'API version of the referent.',
      type: 'string',
    },
    fieldPath: {
      description:
        'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.',
      type: 'string',
    },
    kind: {
      description:
        'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    name: {
      description:
        'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
      type: 'string',
    },
    namespace: {
      description:
        'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
      type: 'string',
    },
    resourceVersion: {
      description:
        'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
      type: 'string',
    },
    uid: {
      description:
        'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
      type: 'string',
    },
  },
  'x-kubernetes-map-type': 'atomic',
} as const;

export const io_k8s_api_core_v1_ResourceQuotaSchema = {
  description: 'ResourceQuota sets aggregate quota restrictions enforced per namespace',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    spec: {
      description:
        'Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaSpec',
        },
      ],
    },
    status: {
      description:
        'Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuotaStatus',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'ResourceQuota',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_api_core_v1_ResourceQuotaListSchema = {
  description: 'ResourceQuotaList is a list of ResourceQuota items.',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.api.core.v1.ResourceQuota',
          },
        ],
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'ResourceQuotaList',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_api_core_v1_ResourceQuotaSpecSchema = {
  description: 'ResourceQuotaSpec defines the desired hard limits to enforce for Quota.',
  type: 'object',
  properties: {
    hard: {
      description:
        'hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/',
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity',
      },
    },
    scopeSelector: {
      description:
        'scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.api.core.v1.ScopeSelector',
        },
      ],
    },
    scopes: {
      description:
        'A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.',
      type: 'array',
      items: {
        type: 'string',
        default: '',
        enum: [
          'BestEffort',
          'CrossNamespacePodAffinity',
          'NotBestEffort',
          'NotTerminating',
          'PriorityClass',
          'Terminating',
        ],
      },
      'x-kubernetes-list-type': 'atomic',
    },
  },
} as const;

export const io_k8s_api_core_v1_ResourceQuotaStatusSchema = {
  description: 'ResourceQuotaStatus defines the enforced hard limits and observed use.',
  type: 'object',
  properties: {
    hard: {
      description:
        'Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/',
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity',
      },
    },
    used: {
      description: 'Used is the current observed total usage of the resource in the namespace.',
      type: 'object',
      additionalProperties: {
        $ref: '#/components/schemas/io.k8s.apimachinery.pkg.api.resource.Quantity',
      },
    },
  },
} as const;

export const io_k8s_api_core_v1_ScopeSelectorSchema = {
  description:
    'A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.',
  type: 'object',
  properties: {
    matchExpressions: {
      description: 'A list of scope selector requirements by scope of the resources.',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.api.core.v1.ScopedResourceSelectorRequirement',
          },
        ],
      },
      'x-kubernetes-list-type': 'atomic',
    },
  },
  'x-kubernetes-map-type': 'atomic',
} as const;

export const io_k8s_api_core_v1_ScopedResourceSelectorRequirementSchema = {
  description:
    'A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.',
  type: 'object',
  required: ['scopeName', 'operator'],
  properties: {
    operator: {
      description: `Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.

Possible enum values:
 - \`"DoesNotExist"\`
 - \`"Exists"\`
 - \`"In"\`
 - \`"NotIn"\``,
      type: 'string',
      default: '',
      enum: ['DoesNotExist', 'Exists', 'In', 'NotIn'],
    },
    scopeName: {
      description: `The name of the scope that the selector applies to.

Possible enum values:
 - \`"BestEffort"\` Match all pod objects that have best effort quality of service
 - \`"CrossNamespacePodAffinity"\` Match all pod objects that have cross-namespace pod (anti)affinity mentioned.
 - \`"NotBestEffort"\` Match all pod objects that do not have best effort quality of service
 - \`"NotTerminating"\` Match all pod objects where spec.activeDeadlineSeconds is nil
 - \`"PriorityClass"\` Match all pod objects that have priority class mentioned
 - \`"Terminating"\` Match all pod objects where spec.activeDeadlineSeconds >=0`,
      type: 'string',
      default: '',
      enum: [
        'BestEffort',
        'CrossNamespacePodAffinity',
        'NotBestEffort',
        'NotTerminating',
        'PriorityClass',
        'Terminating',
      ],
    },
    values: {
      description:
        'An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
      'x-kubernetes-list-type': 'atomic',
    },
  },
} as const;

export const io_k8s_api_core_v1_SecretSchema = {
  description:
    'Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    data: {
      description:
        "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
      type: 'object',
      additionalProperties: {
        type: 'string',
        format: 'byte',
      },
    },
    immutable: {
      description:
        'Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.',
      type: 'boolean',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    stringData: {
      description:
        'stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.',
      type: 'object',
      additionalProperties: {
        type: 'string',
        default: '',
      },
    },
    type: {
      description:
        'Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types',
      type: 'string',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'Secret',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_api_core_v1_SecretListSchema = {
  description: 'SecretList is a list of Secret.',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.api.core.v1.Secret',
          },
        ],
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'SecretList',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_api_core_v1_ServiceAccountSchema = {
  description:
    'ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    automountServiceAccountToken: {
      description:
        'AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.',
      type: 'boolean',
    },
    imagePullSecrets: {
      description:
        'ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.api.core.v1.LocalObjectReference',
          },
        ],
      },
      'x-kubernetes-list-type': 'atomic',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta',
        },
      ],
    },
    secrets: {
      description:
        'Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a "kubernetes.io/enforce-mountable-secrets" annotation set to "true". The "kubernetes.io/enforce-mountable-secrets" annotation is deprecated since v1.32. Prefer separate namespaces to isolate access to mounted secrets. This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference',
          },
        ],
      },
      'x-kubernetes-list-map-keys': ['name'],
      'x-kubernetes-list-type': 'map',
      'x-kubernetes-patch-merge-key': 'name',
      'x-kubernetes-patch-strategy': 'merge',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'ServiceAccount',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_api_core_v1_ServiceAccountListSchema = {
  description: 'ServiceAccountList is a list of ServiceAccount objects',
  type: 'object',
  required: ['items'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    items: {
      description:
        'List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.api.core.v1.ServiceAccount',
          },
        ],
      },
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'ServiceAccountList',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_apimachinery_pkg_api_resource_QuantitySchema = {
  description: `Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

The serialization format is:

\`\`\` <quantity>        ::= <signedNumber><suffix>

	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)

<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei

	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)

<decimalSI>       ::= m | "" | k | M | G | T | P | E

	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)

<decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> \`\`\`

No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:

- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.

The sign will be omitted unless the number is negative.

Examples:

- 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"

Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.`,
  oneOf: [
    {
      type: 'string',
    },
    {
      type: 'number',
    },
  ],
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_APIResourceSchema = {
  description: 'APIResource specifies the name of a resource and whether it is namespaced.',
  type: 'object',
  required: ['name', 'singularName', 'namespaced', 'kind', 'verbs'],
  properties: {
    categories: {
      description:
        "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
      'x-kubernetes-list-type': 'atomic',
    },
    group: {
      description:
        'group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale".',
      type: 'string',
    },
    kind: {
      description:
        "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
      type: 'string',
      default: '',
    },
    name: {
      description: 'name is the plural name of the resource.',
      type: 'string',
      default: '',
    },
    namespaced: {
      description: 'namespaced indicates if a resource is namespaced or not.',
      type: 'boolean',
      default: false,
    },
    shortNames: {
      description: 'shortNames is a list of suggested short names of the resource.',
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
      'x-kubernetes-list-type': 'atomic',
    },
    singularName: {
      description:
        'singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.',
      type: 'string',
      default: '',
    },
    storageVersionHash: {
      description:
        'The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.',
      type: 'string',
    },
    verbs: {
      description:
        'verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)',
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
    },
    version: {
      description: `version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)".`,
      type: 'string',
    },
  },
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_APIResourceListSchema = {
  description:
    'APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.',
  type: 'object',
  required: ['groupVersion', 'resources'],
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    groupVersion: {
      description: 'groupVersion is the group and version this APIResourceList is for.',
      type: 'string',
      default: '',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    resources: {
      description: 'resources contains the name of the resources and if they are namespaced.',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource',
          },
        ],
      },
      'x-kubernetes-list-type': 'atomic',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'APIResourceList',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_DeleteOptionsSchema = {
  description: 'DeleteOptions may be provided when deleting an API object.',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    dryRun: {
      description:
        'When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed',
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
      'x-kubernetes-list-type': 'atomic',
    },
    gracePeriodSeconds: {
      description:
        'The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.',
      type: 'integer',
      format: 'int64',
    },
    ignoreStoreReadErrorWithClusterBreakingPotential: {
      description:
        'if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it',
      type: 'boolean',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    orphanDependents: {
      description: `Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.`,
      type: 'boolean',
    },
    preconditions: {
      description:
        'Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions',
        },
      ],
    },
    propagationPolicy: {
      description:
        "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
      type: 'string',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'admission.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'admission.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'apiextensions.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'apiextensions.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'apiregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'apiregistration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'apps',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'apps',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'apps',
      kind: 'DeleteOptions',
      version: 'v1beta2',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v2',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v2beta1',
    },
    {
      group: 'autoscaling',
      kind: 'DeleteOptions',
      version: 'v2beta2',
    },
    {
      group: 'batch',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'batch',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha2',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'discovery.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'discovery.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'events.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'events.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'extensions',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta2',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta3',
    },
    {
      group: 'imagepolicy.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'internal.apiserver.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'node.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'node.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'node.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'policy',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'policy',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'resource.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha3',
    },
    {
      group: 'resource.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1beta1',
    },
    {
      group: 'storagemigration.k8s.io',
      kind: 'DeleteOptions',
      version: 'v1alpha1',
    },
  ],
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_FieldsV1Schema = {
  description: `FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

The exact format is defined in sigs.k8s.io/structured-merge-diff`,
  type: 'object',
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_ListMetaSchema = {
  description:
    'ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.',
  type: 'object',
  properties: {
    continue: {
      description:
        'continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.',
      type: 'string',
    },
    remainingItemCount: {
      description:
        'remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.',
      type: 'integer',
      format: 'int64',
    },
    resourceVersion: {
      description:
        "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
      type: 'string',
    },
    selfLink: {
      description:
        'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.',
      type: 'string',
    },
  },
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_ManagedFieldsEntrySchema = {
  description:
    'ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.',
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.',
      type: 'string',
    },
    fieldsType: {
      description:
        'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"',
      type: 'string',
    },
    fieldsV1: {
      description:
        'FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1',
        },
      ],
    },
    manager: {
      description: 'Manager is an identifier of the workflow managing these fields.',
      type: 'string',
    },
    operation: {
      description:
        "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
      type: 'string',
    },
    subresource: {
      description:
        'Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.',
      type: 'string',
    },
    time: {
      description:
        'Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
  },
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_MicroTimeSchema = {
  description: 'MicroTime is version of Time with microsecond level precision.',
  type: 'string',
  format: 'date-time',
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_ObjectMetaSchema = {
  description:
    'ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.',
  type: 'object',
  properties: {
    annotations: {
      description:
        'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations',
      type: 'object',
      additionalProperties: {
        type: 'string',
        default: '',
      },
    },
    creationTimestamp: {
      description: `CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata`,
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
    deletionGracePeriodSeconds: {
      description:
        'Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.',
      type: 'integer',
      format: 'int64',
    },
    deletionTimestamp: {
      description: `DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata`,
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time',
        },
      ],
    },
    finalizers: {
      description:
        'Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.',
      type: 'array',
      items: {
        type: 'string',
        default: '',
      },
      'x-kubernetes-list-type': 'set',
      'x-kubernetes-patch-strategy': 'merge',
    },
    generateName: {
      description: `GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

If this field is specified and the generated name exists, the server will return a 409.

Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency`,
      type: 'string',
    },
    generation: {
      description:
        'A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.',
      type: 'integer',
      format: 'int64',
    },
    labels: {
      description:
        'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels',
      type: 'object',
      additionalProperties: {
        type: 'string',
        default: '',
      },
    },
    managedFields: {
      description: `ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.`,
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry',
          },
        ],
      },
      'x-kubernetes-list-type': 'atomic',
    },
    name: {
      description:
        'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names',
      type: 'string',
    },
    namespace: {
      description: `Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces`,
      type: 'string',
    },
    ownerReferences: {
      description:
        'List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference',
          },
        ],
      },
      'x-kubernetes-list-map-keys': ['uid'],
      'x-kubernetes-list-type': 'map',
      'x-kubernetes-patch-merge-key': 'uid',
      'x-kubernetes-patch-strategy': 'merge',
    },
    resourceVersion: {
      description: `An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency`,
      type: 'string',
    },
    selfLink: {
      description:
        'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.',
      type: 'string',
    },
    uid: {
      description: `UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids`,
      type: 'string',
    },
  },
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_OwnerReferenceSchema = {
  description:
    'OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.',
  type: 'object',
  required: ['apiVersion', 'kind', 'name', 'uid'],
  properties: {
    apiVersion: {
      description: 'API version of the referent.',
      type: 'string',
      default: '',
    },
    blockOwnerDeletion: {
      description:
        'If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.',
      type: 'boolean',
    },
    controller: {
      description: 'If true, this reference points to the managing controller.',
      type: 'boolean',
    },
    kind: {
      description:
        'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
      default: '',
    },
    name: {
      description:
        'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names',
      type: 'string',
      default: '',
    },
    uid: {
      description:
        'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids',
      type: 'string',
      default: '',
    },
  },
  'x-kubernetes-map-type': 'atomic',
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_PatchSchema = {
  description:
    'Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.',
  type: 'object',
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_PreconditionsSchema = {
  description:
    'Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.',
  type: 'object',
  properties: {
    resourceVersion: {
      description: 'Specifies the target ResourceVersion',
      type: 'string',
    },
    uid: {
      description: 'Specifies the target UID.',
      type: 'string',
    },
  },
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_StatusSchema = {
  description: "Status is a return value for calls that don't return other objects.",
  type: 'object',
  properties: {
    apiVersion: {
      description:
        'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
      type: 'string',
    },
    code: {
      description: 'Suggested HTTP return code for this status, 0 if not set.',
      type: 'integer',
      format: 'int32',
    },
    details: {
      description:
        'Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.',
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails',
        },
      ],
      'x-kubernetes-list-type': 'atomic',
    },
    kind: {
      description:
        'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    message: {
      description: 'A human-readable description of the status of this operation.',
      type: 'string',
    },
    metadata: {
      description:
        'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      default: {},
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta',
        },
      ],
    },
    reason: {
      description:
        'A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.',
      type: 'string',
    },
    status: {
      description:
        'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
      type: 'string',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'Status',
      version: 'v1',
    },
  ],
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_StatusCauseSchema = {
  description:
    'StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.',
  type: 'object',
  properties: {
    field: {
      description: `The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

Examples:
  "name" - the field "name" on the current resource
  "items[0].name" - the field "name" on the first array entry in "items"`,
      type: 'string',
    },
    message: {
      description:
        'A human-readable description of the cause of the error.  This field may be presented as-is to a reader.',
      type: 'string',
    },
    reason: {
      description:
        'A machine-readable description of the cause of the error. If this value is empty there is no information available.',
      type: 'string',
    },
  },
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_StatusDetailsSchema = {
  description:
    'StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.',
  type: 'object',
  properties: {
    causes: {
      description:
        'The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.',
      type: 'array',
      items: {
        default: {},
        allOf: [
          {
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause',
          },
        ],
      },
      'x-kubernetes-list-type': 'atomic',
    },
    group: {
      description: 'The group attribute of the resource associated with the status StatusReason.',
      type: 'string',
    },
    kind: {
      description:
        'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
      type: 'string',
    },
    name: {
      description:
        'The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).',
      type: 'string',
    },
    retryAfterSeconds: {
      description:
        'If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.',
      type: 'integer',
      format: 'int32',
    },
    uid: {
      description:
        'UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids',
      type: 'string',
    },
  },
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_TimeSchema = {
  description:
    'Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.',
  type: 'string',
  format: 'date-time',
} as const;

export const io_k8s_apimachinery_pkg_apis_meta_v1_WatchEventSchema = {
  description: 'Event represents a single event to a watched resource.',
  type: 'object',
  required: ['type', 'object'],
  properties: {
    object: {
      description: `Object is:
 * If Type is Added or Modified: the new state of the object.
 * If Type is Deleted: the state of the object immediately before deletion.
 * If Type is Error: *Status is recommended; other types may make sense
   depending on context.`,
      allOf: [
        {
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.runtime.RawExtension',
        },
      ],
    },
    type: {
      type: 'string',
      default: '',
    },
  },
  'x-kubernetes-group-version-kind': [
    {
      group: '',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'admission.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'admission.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'WatchEvent',
      version: 'v1alpha1',
    },
    {
      group: 'admissionregistration.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'apiextensions.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'apiextensions.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'apiregistration.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'apiregistration.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'apps',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'apps',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'apps',
      kind: 'WatchEvent',
      version: 'v1beta2',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'WatchEvent',
      version: 'v1alpha1',
    },
    {
      group: 'authentication.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'authorization.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'authorization.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'autoscaling',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'autoscaling',
      kind: 'WatchEvent',
      version: 'v2',
    },
    {
      group: 'autoscaling',
      kind: 'WatchEvent',
      version: 'v2beta1',
    },
    {
      group: 'autoscaling',
      kind: 'WatchEvent',
      version: 'v2beta2',
    },
    {
      group: 'batch',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'batch',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'WatchEvent',
      version: 'v1alpha1',
    },
    {
      group: 'certificates.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'WatchEvent',
      version: 'v1alpha2',
    },
    {
      group: 'coordination.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'discovery.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'discovery.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'events.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'events.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'extensions',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta2',
    },
    {
      group: 'flowcontrol.apiserver.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta3',
    },
    {
      group: 'imagepolicy.k8s.io',
      kind: 'WatchEvent',
      version: 'v1alpha1',
    },
    {
      group: 'internal.apiserver.k8s.io',
      kind: 'WatchEvent',
      version: 'v1alpha1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'WatchEvent',
      version: 'v1alpha1',
    },
    {
      group: 'networking.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'node.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'node.k8s.io',
      kind: 'WatchEvent',
      version: 'v1alpha1',
    },
    {
      group: 'node.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'policy',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'policy',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'WatchEvent',
      version: 'v1alpha1',
    },
    {
      group: 'rbac.authorization.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'resource.k8s.io',
      kind: 'WatchEvent',
      version: 'v1alpha3',
    },
    {
      group: 'resource.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'WatchEvent',
      version: 'v1alpha1',
    },
    {
      group: 'scheduling.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'WatchEvent',
      version: 'v1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'WatchEvent',
      version: 'v1alpha1',
    },
    {
      group: 'storage.k8s.io',
      kind: 'WatchEvent',
      version: 'v1beta1',
    },
    {
      group: 'storagemigration.k8s.io',
      kind: 'WatchEvent',
      version: 'v1alpha1',
    },
  ],
} as const;

export const io_k8s_apimachinery_pkg_runtime_RawExtensionSchema = {
  description: `RawExtension is used to hold extensions in external versions.

To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.

// Internal package:

	type MyAPIObject struct {
		runtime.TypeMeta \`json:",inline"\`
		MyPlugin runtime.Object \`json:"myPlugin"\`
	}

	type PluginA struct {
		AOption string \`json:"aOption"\`
	}

// External package:

	type MyAPIObject struct {
		runtime.TypeMeta \`json:",inline"\`
		MyPlugin runtime.RawExtension \`json:"myPlugin"\`
	}

	type PluginA struct {
		AOption string \`json:"aOption"\`
	}

// On the wire, the JSON will look something like this:

	{
		"kind":"MyAPIObject",
		"apiVersion":"v1",
		"myPlugin": {
			"kind":"PluginA",
			"aOption":"foo",
		},
	}

So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)`,
  type: 'object',
} as const;
